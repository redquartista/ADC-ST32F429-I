
MyFirstProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002050  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08002200  08002200  00012200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080022ac  080022ac  000122ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080022b0  080022b0  000122b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000080  20000000  080022b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
  7 .bss          00000038  20000080  20000080  00020080  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200000b8  200000b8  00020080  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 10 .debug_info   00007621  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000013ce  00000000  00000000  000276d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000008c8  00000000  00000000  00028aa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000800  00000000  00000000  00029368  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000031a5  00000000  00000000  00029b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000316b  00000000  00000000  0002cd0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002fe78  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002c14  00000000  00000000  0002fef4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080021e8 	.word	0x080021e8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	080021e8 	.word	0x080021e8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8000290:	b480      	push	{r7}
 8000292:	b085      	sub	sp, #20
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
 8000298:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 800029a:	2300      	movs	r3, #0
 800029c:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 800029e:	2300      	movs	r3, #0
 80002a0:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	685b      	ldr	r3, [r3, #4]
 80002a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 80002a8:	68fb      	ldr	r3, [r7, #12]
 80002aa:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80002ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80002b2:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	791b      	ldrb	r3, [r3, #4]
 80002b8:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	681b      	ldr	r3, [r3, #0]
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80002be:	4313      	orrs	r3, r2
 80002c0:	68fa      	ldr	r2, [r7, #12]
 80002c2:	4313      	orrs	r3, r2
 80002c4:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	68fa      	ldr	r2, [r7, #12]
 80002ca:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	689b      	ldr	r3, [r3, #8]
 80002d0:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 80002d2:	68fa      	ldr	r2, [r7, #12]
 80002d4:	4b18      	ldr	r3, [pc, #96]	; (8000338 <ADC_Init+0xa8>)
 80002d6:	4013      	ands	r3, r2
 80002d8:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80002da:	683b      	ldr	r3, [r7, #0]
 80002dc:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 80002de:	683b      	ldr	r3, [r7, #0]
 80002e0:	68db      	ldr	r3, [r3, #12]
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80002e2:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 80002e4:	683b      	ldr	r3, [r7, #0]
 80002e6:	689b      	ldr	r3, [r3, #8]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 80002e8:	431a      	orrs	r2, r3
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	795b      	ldrb	r3, [r3, #5]
 80002ee:	005b      	lsls	r3, r3, #1
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80002f0:	4313      	orrs	r3, r2
 80002f2:	68fa      	ldr	r2, [r7, #12]
 80002f4:	4313      	orrs	r3, r2
 80002f6:	60fb      	str	r3, [r7, #12]
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	68fa      	ldr	r2, [r7, #12]
 80002fc:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000302:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800030a:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 800030c:	683b      	ldr	r3, [r7, #0]
 800030e:	7d1b      	ldrb	r3, [r3, #20]
 8000310:	3b01      	subs	r3, #1
 8000312:	b2da      	uxtb	r2, r3
 8000314:	7afb      	ldrb	r3, [r7, #11]
 8000316:	4313      	orrs	r3, r2
 8000318:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 800031a:	7afb      	ldrb	r3, [r7, #11]
 800031c:	051b      	lsls	r3, r3, #20
 800031e:	68fa      	ldr	r2, [r7, #12]
 8000320:	4313      	orrs	r3, r2
 8000322:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	68fa      	ldr	r2, [r7, #12]
 8000328:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800032a:	bf00      	nop
 800032c:	3714      	adds	r7, #20
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	c0fff7fd 	.word	0xc0fff7fd

0800033c <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 800033c:	b480      	push	{r7}
 800033e:	b085      	sub	sp, #20
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 8000344:	2300      	movs	r3, #0
 8000346:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 8000348:	4b0e      	ldr	r3, [pc, #56]	; (8000384 <ADC_CommonInit+0x48>)
 800034a:	685b      	ldr	r3, [r3, #4]
 800034c:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 800034e:	68fa      	ldr	r2, [r7, #12]
 8000350:	4b0d      	ldr	r3, [pc, #52]	; (8000388 <ADC_CommonInit+0x4c>)
 8000352:	4013      	ands	r3, r2
 8000354:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	685b      	ldr	r3, [r3, #4]
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 800035e:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	689b      	ldr	r3, [r3, #8]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8000364:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	68db      	ldr	r3, [r3, #12]
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 800036a:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 800036c:	68fa      	ldr	r2, [r7, #12]
 800036e:	4313      	orrs	r3, r2
 8000370:	60fb      	str	r3, [r7, #12]
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 8000372:	4a04      	ldr	r2, [pc, #16]	; (8000384 <ADC_CommonInit+0x48>)
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	6053      	str	r3, [r2, #4]
}
 8000378:	bf00      	nop
 800037a:	3714      	adds	r7, #20
 800037c:	46bd      	mov	sp, r7
 800037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000382:	4770      	bx	lr
 8000384:	40012300 	.word	0x40012300
 8000388:	fffc30e0 	.word	0xfffc30e0

0800038c <ADC_CommonStructInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 800038c:	b480      	push	{r7}
 800038e:	b083      	sub	sp, #12
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	2200      	movs	r2, #0
 8000398:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_Prescaler member */
  ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	2200      	movs	r2, #0
 800039e:	605a      	str	r2, [r3, #4]

  /* Initialize the ADC_DMAAccessMode member */
  ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	2200      	movs	r2, #0
 80003a4:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_TwoSamplingDelay member */
  ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	2200      	movs	r2, #0
 80003aa:	60da      	str	r2, [r3, #12]
}
 80003ac:	bf00      	nop
 80003ae:	370c      	adds	r7, #12
 80003b0:	46bd      	mov	sp, r7
 80003b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b6:	4770      	bx	lr

080003b8 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b083      	sub	sp, #12
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
 80003c0:	460b      	mov	r3, r1
 80003c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80003c4:	78fb      	ldrb	r3, [r7, #3]
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d006      	beq.n	80003d8 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	689b      	ldr	r3, [r3, #8]
 80003ce:	f043 0201 	orr.w	r2, r3, #1
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 80003d6:	e005      	b.n	80003e4 <ADC_Cmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	689b      	ldr	r3, [r3, #8]
 80003dc:	f023 0201 	bic.w	r2, r3, #1
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	609a      	str	r2, [r3, #8]
}
 80003e4:	bf00      	nop
 80003e6:	370c      	adds	r7, #12
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr

080003f0 <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b085      	sub	sp, #20
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
 80003f8:	4608      	mov	r0, r1
 80003fa:	4611      	mov	r1, r2
 80003fc:	461a      	mov	r2, r3
 80003fe:	4603      	mov	r3, r0
 8000400:	70fb      	strb	r3, [r7, #3]
 8000402:	460b      	mov	r3, r1
 8000404:	70bb      	strb	r3, [r7, #2]
 8000406:	4613      	mov	r3, r2
 8000408:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 800040a:	2300      	movs	r3, #0
 800040c:	60fb      	str	r3, [r7, #12]
 800040e:	2300      	movs	r3, #0
 8000410:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000412:	78fb      	ldrb	r3, [r7, #3]
 8000414:	2b09      	cmp	r3, #9
 8000416:	d923      	bls.n	8000460 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	68db      	ldr	r3, [r3, #12]
 800041c:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 800041e:	78fb      	ldrb	r3, [r7, #3]
 8000420:	f1a3 020a 	sub.w	r2, r3, #10
 8000424:	4613      	mov	r3, r2
 8000426:	005b      	lsls	r3, r3, #1
 8000428:	4413      	add	r3, r2
 800042a:	2207      	movs	r2, #7
 800042c:	fa02 f303 	lsl.w	r3, r2, r3
 8000430:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000432:	68bb      	ldr	r3, [r7, #8]
 8000434:	43db      	mvns	r3, r3
 8000436:	68fa      	ldr	r2, [r7, #12]
 8000438:	4013      	ands	r3, r2
 800043a:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 800043c:	7879      	ldrb	r1, [r7, #1]
 800043e:	78fb      	ldrb	r3, [r7, #3]
 8000440:	f1a3 020a 	sub.w	r2, r3, #10
 8000444:	4613      	mov	r3, r2
 8000446:	005b      	lsls	r3, r3, #1
 8000448:	4413      	add	r3, r2
 800044a:	fa01 f303 	lsl.w	r3, r1, r3
 800044e:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000450:	68fa      	ldr	r2, [r7, #12]
 8000452:	68bb      	ldr	r3, [r7, #8]
 8000454:	4313      	orrs	r3, r2
 8000456:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	68fa      	ldr	r2, [r7, #12]
 800045c:	60da      	str	r2, [r3, #12]
 800045e:	e01e      	b.n	800049e <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	691b      	ldr	r3, [r3, #16]
 8000464:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8000466:	78fa      	ldrb	r2, [r7, #3]
 8000468:	4613      	mov	r3, r2
 800046a:	005b      	lsls	r3, r3, #1
 800046c:	4413      	add	r3, r2
 800046e:	2207      	movs	r2, #7
 8000470:	fa02 f303 	lsl.w	r3, r2, r3
 8000474:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000476:	68bb      	ldr	r3, [r7, #8]
 8000478:	43db      	mvns	r3, r3
 800047a:	68fa      	ldr	r2, [r7, #12]
 800047c:	4013      	ands	r3, r2
 800047e:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8000480:	7879      	ldrb	r1, [r7, #1]
 8000482:	78fa      	ldrb	r2, [r7, #3]
 8000484:	4613      	mov	r3, r2
 8000486:	005b      	lsls	r3, r3, #1
 8000488:	4413      	add	r3, r2
 800048a:	fa01 f303 	lsl.w	r3, r1, r3
 800048e:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000490:	68fa      	ldr	r2, [r7, #12]
 8000492:	68bb      	ldr	r3, [r7, #8]
 8000494:	4313      	orrs	r3, r2
 8000496:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	68fa      	ldr	r2, [r7, #12]
 800049c:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 800049e:	78bb      	ldrb	r3, [r7, #2]
 80004a0:	2b06      	cmp	r3, #6
 80004a2:	d821      	bhi.n	80004e8 <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004a8:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 80004aa:	78bb      	ldrb	r3, [r7, #2]
 80004ac:	1e5a      	subs	r2, r3, #1
 80004ae:	4613      	mov	r3, r2
 80004b0:	009b      	lsls	r3, r3, #2
 80004b2:	4413      	add	r3, r2
 80004b4:	221f      	movs	r2, #31
 80004b6:	fa02 f303 	lsl.w	r3, r2, r3
 80004ba:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80004bc:	68bb      	ldr	r3, [r7, #8]
 80004be:	43db      	mvns	r3, r3
 80004c0:	68fa      	ldr	r2, [r7, #12]
 80004c2:	4013      	ands	r3, r2
 80004c4:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 80004c6:	78f9      	ldrb	r1, [r7, #3]
 80004c8:	78bb      	ldrb	r3, [r7, #2]
 80004ca:	1e5a      	subs	r2, r3, #1
 80004cc:	4613      	mov	r3, r2
 80004ce:	009b      	lsls	r3, r3, #2
 80004d0:	4413      	add	r3, r2
 80004d2:	fa01 f303 	lsl.w	r3, r1, r3
 80004d6:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80004d8:	68fa      	ldr	r2, [r7, #12]
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	4313      	orrs	r3, r2
 80004de:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	68fa      	ldr	r2, [r7, #12]
 80004e4:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 80004e6:	e047      	b.n	8000578 <ADC_RegularChannelConfig+0x188>
  else if (Rank < 13)
 80004e8:	78bb      	ldrb	r3, [r7, #2]
 80004ea:	2b0c      	cmp	r3, #12
 80004ec:	d821      	bhi.n	8000532 <ADC_RegularChannelConfig+0x142>
    tmpreg1 = ADCx->SQR2;
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f2:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 80004f4:	78bb      	ldrb	r3, [r7, #2]
 80004f6:	1fda      	subs	r2, r3, #7
 80004f8:	4613      	mov	r3, r2
 80004fa:	009b      	lsls	r3, r3, #2
 80004fc:	4413      	add	r3, r2
 80004fe:	221f      	movs	r2, #31
 8000500:	fa02 f303 	lsl.w	r3, r2, r3
 8000504:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 8000506:	68bb      	ldr	r3, [r7, #8]
 8000508:	43db      	mvns	r3, r3
 800050a:	68fa      	ldr	r2, [r7, #12]
 800050c:	4013      	ands	r3, r2
 800050e:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8000510:	78f9      	ldrb	r1, [r7, #3]
 8000512:	78bb      	ldrb	r3, [r7, #2]
 8000514:	1fda      	subs	r2, r3, #7
 8000516:	4613      	mov	r3, r2
 8000518:	009b      	lsls	r3, r3, #2
 800051a:	4413      	add	r3, r2
 800051c:	fa01 f303 	lsl.w	r3, r1, r3
 8000520:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 8000522:	68fa      	ldr	r2, [r7, #12]
 8000524:	68bb      	ldr	r3, [r7, #8]
 8000526:	4313      	orrs	r3, r2
 8000528:	60fb      	str	r3, [r7, #12]
    ADCx->SQR2 = tmpreg1;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	68fa      	ldr	r2, [r7, #12]
 800052e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000530:	e022      	b.n	8000578 <ADC_RegularChannelConfig+0x188>
    tmpreg1 = ADCx->SQR1;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000536:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8000538:	78bb      	ldrb	r3, [r7, #2]
 800053a:	f1a3 020d 	sub.w	r2, r3, #13
 800053e:	4613      	mov	r3, r2
 8000540:	009b      	lsls	r3, r3, #2
 8000542:	4413      	add	r3, r2
 8000544:	221f      	movs	r2, #31
 8000546:	fa02 f303 	lsl.w	r3, r2, r3
 800054a:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 800054c:	68bb      	ldr	r3, [r7, #8]
 800054e:	43db      	mvns	r3, r3
 8000550:	68fa      	ldr	r2, [r7, #12]
 8000552:	4013      	ands	r3, r2
 8000554:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8000556:	78f9      	ldrb	r1, [r7, #3]
 8000558:	78bb      	ldrb	r3, [r7, #2]
 800055a:	f1a3 020d 	sub.w	r2, r3, #13
 800055e:	4613      	mov	r3, r2
 8000560:	009b      	lsls	r3, r3, #2
 8000562:	4413      	add	r3, r2
 8000564:	fa01 f303 	lsl.w	r3, r1, r3
 8000568:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 800056a:	68fa      	ldr	r2, [r7, #12]
 800056c:	68bb      	ldr	r3, [r7, #8]
 800056e:	4313      	orrs	r3, r2
 8000570:	60fb      	str	r3, [r7, #12]
    ADCx->SQR1 = tmpreg1;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	68fa      	ldr	r2, [r7, #12]
 8000576:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000578:	bf00      	nop
 800057a:	3714      	adds	r7, #20
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr

08000584 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	689b      	ldr	r3, [r3, #8]
 8000590:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	609a      	str	r2, [r3, #8]
}
 8000598:	bf00      	nop
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr

080005a4 <ADC_DiscModeCmd>:
  *         regular group channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	460b      	mov	r3, r1
 80005ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80005b0:	78fb      	ldrb	r3, [r7, #3]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d006      	beq.n	80005c4 <ADC_DiscModeCmd+0x20>
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	685b      	ldr	r3, [r3, #4]
 80005ba:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
  }
}
 80005c2:	e005      	b.n	80005d0 <ADC_DiscModeCmd+0x2c>
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	605a      	str	r2, [r3, #4]
}
 80005d0:	bf00      	nop
 80005d2:	370c      	adds	r7, #12
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr

080005dc <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e8:	b29b      	uxth	r3, r3
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	370c      	adds	r7, #12
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr

080005f6 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 80005f6:	b480      	push	{r7}
 80005f8:	b083      	sub	sp, #12
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	6078      	str	r0, [r7, #4]
 80005fe:	460b      	mov	r3, r1
 8000600:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000602:	78fb      	ldrb	r3, [r7, #3]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d006      	beq.n	8000616 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f043 0201 	orr.w	r2, r3, #1
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8000614:	e005      	b.n	8000622 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	f023 0201 	bic.w	r2, r3, #1
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	601a      	str	r2, [r3, #0]
}
 8000622:	bf00      	nop
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
	...

08000630 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000630:	b480      	push	{r7}
 8000632:	b087      	sub	sp, #28
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800063a:	2300      	movs	r3, #0
 800063c:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4a15      	ldr	r2, [pc, #84]	; (800069c <DMA_GetFlagStatus+0x6c>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d802      	bhi.n	8000650 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800064a:	4b15      	ldr	r3, [pc, #84]	; (80006a0 <DMA_GetFlagStatus+0x70>)
 800064c:	613b      	str	r3, [r7, #16]
 800064e:	e001      	b.n	8000654 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000650:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <DMA_GetFlagStatus+0x74>)
 8000652:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800065a:	2b00      	cmp	r3, #0
 800065c:	d003      	beq.n	8000666 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 800065e:	693b      	ldr	r3, [r7, #16]
 8000660:	685b      	ldr	r3, [r3, #4]
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	e002      	b.n	800066c <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8000666:	693b      	ldr	r3, [r7, #16]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000672:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000676:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8000678:	68fa      	ldr	r2, [r7, #12]
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	4013      	ands	r3, r2
 800067e:	2b00      	cmp	r3, #0
 8000680:	d002      	beq.n	8000688 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8000682:	2301      	movs	r3, #1
 8000684:	75fb      	strb	r3, [r7, #23]
 8000686:	e001      	b.n	800068c <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8000688:	2300      	movs	r3, #0
 800068a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 800068c:	7dfb      	ldrb	r3, [r7, #23]
}
 800068e:	4618      	mov	r0, r3
 8000690:	371c      	adds	r7, #28
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	4002640f 	.word	0x4002640f
 80006a0:	40026000 	.word	0x40026000
 80006a4:	40026400 	.word	0x40026400

080006a8 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4a10      	ldr	r2, [pc, #64]	; (80006f8 <DMA_ClearFlag+0x50>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d802      	bhi.n	80006c0 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80006ba:	4b10      	ldr	r3, [pc, #64]	; (80006fc <DMA_ClearFlag+0x54>)
 80006bc:	60fb      	str	r3, [r7, #12]
 80006be:	e001      	b.n	80006c4 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <DMA_ClearFlag+0x58>)
 80006c2:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d007      	beq.n	80006de <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80006d4:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80006d8:	68fa      	ldr	r2, [r7, #12]
 80006da:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 80006dc:	e006      	b.n	80006ec <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80006e4:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80006e8:	68fa      	ldr	r2, [r7, #12]
 80006ea:	6093      	str	r3, [r2, #8]
}
 80006ec:	bf00      	nop
 80006ee:	3714      	adds	r7, #20
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	4002640f 	.word	0x4002640f
 80006fc:	40026000 	.word	0x40026000
 8000700:	40026400 	.word	0x40026400

08000704 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000704:	b480      	push	{r7}
 8000706:	b087      	sub	sp, #28
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800070e:	2300      	movs	r3, #0
 8000710:	617b      	str	r3, [r7, #20]
 8000712:	2300      	movs	r3, #0
 8000714:	613b      	str	r3, [r7, #16]
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800071a:	2300      	movs	r3, #0
 800071c:	617b      	str	r3, [r7, #20]
 800071e:	e076      	b.n	800080e <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000720:	2201      	movs	r2, #1
 8000722:	697b      	ldr	r3, [r7, #20]
 8000724:	fa02 f303 	lsl.w	r3, r2, r3
 8000728:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	681a      	ldr	r2, [r3, #0]
 800072e:	693b      	ldr	r3, [r7, #16]
 8000730:	4013      	ands	r3, r2
 8000732:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000734:	68fa      	ldr	r2, [r7, #12]
 8000736:	693b      	ldr	r3, [r7, #16]
 8000738:	429a      	cmp	r2, r3
 800073a:	d165      	bne.n	8000808 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681a      	ldr	r2, [r3, #0]
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	005b      	lsls	r3, r3, #1
 8000744:	2103      	movs	r1, #3
 8000746:	fa01 f303 	lsl.w	r3, r1, r3
 800074a:	43db      	mvns	r3, r3
 800074c:	401a      	ands	r2, r3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	791b      	ldrb	r3, [r3, #4]
 800075a:	4619      	mov	r1, r3
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	005b      	lsls	r3, r3, #1
 8000760:	fa01 f303 	lsl.w	r3, r1, r3
 8000764:	431a      	orrs	r2, r3
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	791b      	ldrb	r3, [r3, #4]
 800076e:	2b01      	cmp	r3, #1
 8000770:	d003      	beq.n	800077a <GPIO_Init+0x76>
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	791b      	ldrb	r3, [r3, #4]
 8000776:	2b02      	cmp	r3, #2
 8000778:	d12e      	bne.n	80007d8 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	689a      	ldr	r2, [r3, #8]
 800077e:	697b      	ldr	r3, [r7, #20]
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	2103      	movs	r1, #3
 8000784:	fa01 f303 	lsl.w	r3, r1, r3
 8000788:	43db      	mvns	r3, r3
 800078a:	401a      	ands	r2, r3
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	689a      	ldr	r2, [r3, #8]
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	795b      	ldrb	r3, [r3, #5]
 8000798:	4619      	mov	r1, r3
 800079a:	697b      	ldr	r3, [r7, #20]
 800079c:	005b      	lsls	r3, r3, #1
 800079e:	fa01 f303 	lsl.w	r3, r1, r3
 80007a2:	431a      	orrs	r2, r3
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	685a      	ldr	r2, [r3, #4]
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	b29b      	uxth	r3, r3
 80007b0:	4619      	mov	r1, r3
 80007b2:	2301      	movs	r3, #1
 80007b4:	408b      	lsls	r3, r1
 80007b6:	43db      	mvns	r3, r3
 80007b8:	401a      	ands	r2, r3
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	685b      	ldr	r3, [r3, #4]
 80007c2:	683a      	ldr	r2, [r7, #0]
 80007c4:	7992      	ldrb	r2, [r2, #6]
 80007c6:	4611      	mov	r1, r2
 80007c8:	697a      	ldr	r2, [r7, #20]
 80007ca:	b292      	uxth	r2, r2
 80007cc:	fa01 f202 	lsl.w	r2, r1, r2
 80007d0:	b292      	uxth	r2, r2
 80007d2:	431a      	orrs	r2, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	68da      	ldr	r2, [r3, #12]
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	b29b      	uxth	r3, r3
 80007e0:	005b      	lsls	r3, r3, #1
 80007e2:	2103      	movs	r1, #3
 80007e4:	fa01 f303 	lsl.w	r3, r1, r3
 80007e8:	43db      	mvns	r3, r3
 80007ea:	401a      	ands	r2, r3
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	68da      	ldr	r2, [r3, #12]
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	79db      	ldrb	r3, [r3, #7]
 80007f8:	4619      	mov	r1, r3
 80007fa:	697b      	ldr	r3, [r7, #20]
 80007fc:	005b      	lsls	r3, r3, #1
 80007fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000802:	431a      	orrs	r2, r3
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	3301      	adds	r3, #1
 800080c:	617b      	str	r3, [r7, #20]
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	2b0f      	cmp	r3, #15
 8000812:	d985      	bls.n	8000720 <GPIO_Init+0x1c>
    }
  }
}
 8000814:	bf00      	nop
 8000816:	371c      	adds	r7, #28
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr

08000820 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000820:	b480      	push	{r7}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	460b      	mov	r3, r1
 800082a:	807b      	strh	r3, [r7, #2]
 800082c:	4613      	mov	r3, r2
 800082e:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000830:	2300      	movs	r3, #0
 8000832:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000834:	2300      	movs	r3, #0
 8000836:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000838:	787a      	ldrb	r2, [r7, #1]
 800083a:	887b      	ldrh	r3, [r7, #2]
 800083c:	f003 0307 	and.w	r3, r3, #7
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	fa02 f303 	lsl.w	r3, r2, r3
 8000846:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000848:	887b      	ldrh	r3, [r7, #2]
 800084a:	08db      	lsrs	r3, r3, #3
 800084c:	b29b      	uxth	r3, r3
 800084e:	4618      	mov	r0, r3
 8000850:	887b      	ldrh	r3, [r7, #2]
 8000852:	08db      	lsrs	r3, r3, #3
 8000854:	b29b      	uxth	r3, r3
 8000856:	461a      	mov	r2, r3
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	3208      	adds	r2, #8
 800085c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000860:	887b      	ldrh	r3, [r7, #2]
 8000862:	f003 0307 	and.w	r3, r3, #7
 8000866:	009b      	lsls	r3, r3, #2
 8000868:	210f      	movs	r1, #15
 800086a:	fa01 f303 	lsl.w	r3, r1, r3
 800086e:	43db      	mvns	r3, r3
 8000870:	ea02 0103 	and.w	r1, r2, r3
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	f100 0208 	add.w	r2, r0, #8
 800087a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800087e:	887b      	ldrh	r3, [r7, #2]
 8000880:	08db      	lsrs	r3, r3, #3
 8000882:	b29b      	uxth	r3, r3
 8000884:	461a      	mov	r2, r3
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	3208      	adds	r2, #8
 800088a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	4313      	orrs	r3, r2
 8000892:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000894:	887b      	ldrh	r3, [r7, #2]
 8000896:	08db      	lsrs	r3, r3, #3
 8000898:	b29b      	uxth	r3, r3
 800089a:	461a      	mov	r2, r3
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	3208      	adds	r2, #8
 80008a0:	68b9      	ldr	r1, [r7, #8]
 80008a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80008a6:	bf00      	nop
 80008a8:	3714      	adds	r7, #20
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr

080008b2 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80008b2:	b480      	push	{r7}
 80008b4:	b083      	sub	sp, #12
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
 80008ba:	460b      	mov	r3, r1
 80008bc:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80008be:	78fb      	ldrb	r3, [r7, #3]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d008      	beq.n	80008d6 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	881b      	ldrh	r3, [r3, #0]
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008ce:	b29a      	uxth	r2, r3
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
  }
}
 80008d4:	e007      	b.n	80008e6 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	881b      	ldrh	r3, [r3, #0]
 80008da:	b29b      	uxth	r3, r3
 80008dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80008e0:	b29a      	uxth	r2, r3
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	801a      	strh	r2, [r3, #0]
}
 80008e6:	bf00      	nop
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr

080008f2 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 80008f2:	b480      	push	{r7}
 80008f4:	b087      	sub	sp, #28
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	6078      	str	r0, [r7, #4]
 80008fa:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80008fc:	2300      	movs	r3, #0
 80008fe:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	613b      	str	r3, [r7, #16]
 8000904:	2300      	movs	r3, #0
 8000906:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	0f1b      	lsrs	r3, r3, #28
 8000910:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000918:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 800091a:	693b      	ldr	r3, [r7, #16]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d003      	beq.n	8000928 <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	3314      	adds	r3, #20
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	e005      	b.n	8000934 <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	0c1b      	lsrs	r3, r3, #16
 800092c:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	3318      	adds	r3, #24
 8000932:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	4013      	ands	r3, r2
 800093c:	2b00      	cmp	r3, #0
 800093e:	d002      	beq.n	8000946 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8000940:	2301      	movs	r3, #1
 8000942:	75fb      	strb	r3, [r7, #23]
 8000944:	e001      	b.n	800094a <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8000946:	2300      	movs	r3, #0
 8000948:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 800094a:	7dfb      	ldrb	r3, [r7, #23]
}
 800094c:	4618      	mov	r0, r3
 800094e:	371c      	adds	r7, #28
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000958:	b480      	push	{r7}
 800095a:	b089      	sub	sp, #36	; 0x24
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000960:	2300      	movs	r3, #0
 8000962:	61bb      	str	r3, [r7, #24]
 8000964:	2300      	movs	r3, #0
 8000966:	617b      	str	r3, [r7, #20]
 8000968:	2300      	movs	r3, #0
 800096a:	61fb      	str	r3, [r7, #28]
 800096c:	2302      	movs	r3, #2
 800096e:	613b      	str	r3, [r7, #16]
 8000970:	2300      	movs	r3, #0
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	2302      	movs	r3, #2
 8000976:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000978:	4b47      	ldr	r3, [pc, #284]	; (8000a98 <RCC_GetClocksFreq+0x140>)
 800097a:	689b      	ldr	r3, [r3, #8]
 800097c:	f003 030c 	and.w	r3, r3, #12
 8000980:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8000982:	69bb      	ldr	r3, [r7, #24]
 8000984:	2b04      	cmp	r3, #4
 8000986:	d007      	beq.n	8000998 <RCC_GetClocksFreq+0x40>
 8000988:	2b08      	cmp	r3, #8
 800098a:	d009      	beq.n	80009a0 <RCC_GetClocksFreq+0x48>
 800098c:	2b00      	cmp	r3, #0
 800098e:	d13d      	bne.n	8000a0c <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	4a42      	ldr	r2, [pc, #264]	; (8000a9c <RCC_GetClocksFreq+0x144>)
 8000994:	601a      	str	r2, [r3, #0]
      break;
 8000996:	e03d      	b.n	8000a14 <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4a41      	ldr	r2, [pc, #260]	; (8000aa0 <RCC_GetClocksFreq+0x148>)
 800099c:	601a      	str	r2, [r3, #0]
      break;
 800099e:	e039      	b.n	8000a14 <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80009a0:	4b3d      	ldr	r3, [pc, #244]	; (8000a98 <RCC_GetClocksFreq+0x140>)
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	0d9b      	lsrs	r3, r3, #22
 80009a6:	f003 0301 	and.w	r3, r3, #1
 80009aa:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80009ac:	4b3a      	ldr	r3, [pc, #232]	; (8000a98 <RCC_GetClocksFreq+0x140>)
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80009b4:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d00c      	beq.n	80009d6 <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80009bc:	4a38      	ldr	r2, [pc, #224]	; (8000aa0 <RCC_GetClocksFreq+0x148>)
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c4:	4a34      	ldr	r2, [pc, #208]	; (8000a98 <RCC_GetClocksFreq+0x140>)
 80009c6:	6852      	ldr	r2, [r2, #4]
 80009c8:	0992      	lsrs	r2, r2, #6
 80009ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80009ce:	fb02 f303 	mul.w	r3, r2, r3
 80009d2:	61fb      	str	r3, [r7, #28]
 80009d4:	e00b      	b.n	80009ee <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80009d6:	4a31      	ldr	r2, [pc, #196]	; (8000a9c <RCC_GetClocksFreq+0x144>)
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	fbb2 f3f3 	udiv	r3, r2, r3
 80009de:	4a2e      	ldr	r2, [pc, #184]	; (8000a98 <RCC_GetClocksFreq+0x140>)
 80009e0:	6852      	ldr	r2, [r2, #4]
 80009e2:	0992      	lsrs	r2, r2, #6
 80009e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80009e8:	fb02 f303 	mul.w	r3, r2, r3
 80009ec:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80009ee:	4b2a      	ldr	r3, [pc, #168]	; (8000a98 <RCC_GetClocksFreq+0x140>)
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	0c1b      	lsrs	r3, r3, #16
 80009f4:	f003 0303 	and.w	r3, r3, #3
 80009f8:	3301      	adds	r3, #1
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80009fe:	69fa      	ldr	r2, [r7, #28]
 8000a00:	693b      	ldr	r3, [r7, #16]
 8000a02:	fbb2 f2f3 	udiv	r2, r2, r3
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	601a      	str	r2, [r3, #0]
      break;
 8000a0a:	e003      	b.n	8000a14 <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4a23      	ldr	r2, [pc, #140]	; (8000a9c <RCC_GetClocksFreq+0x144>)
 8000a10:	601a      	str	r2, [r3, #0]
      break;
 8000a12:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000a14:	4b20      	ldr	r3, [pc, #128]	; (8000a98 <RCC_GetClocksFreq+0x140>)
 8000a16:	689b      	ldr	r3, [r3, #8]
 8000a18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000a1c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8000a1e:	69bb      	ldr	r3, [r7, #24]
 8000a20:	091b      	lsrs	r3, r3, #4
 8000a22:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000a24:	4a1f      	ldr	r2, [pc, #124]	; (8000aa4 <RCC_GetClocksFreq+0x14c>)
 8000a26:	69bb      	ldr	r3, [r7, #24]
 8000a28:	4413      	add	r3, r2
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	40da      	lsrs	r2, r3
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000a3c:	4b16      	ldr	r3, [pc, #88]	; (8000a98 <RCC_GetClocksFreq+0x140>)
 8000a3e:	689b      	ldr	r3, [r3, #8]
 8000a40:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000a44:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8000a46:	69bb      	ldr	r3, [r7, #24]
 8000a48:	0a9b      	lsrs	r3, r3, #10
 8000a4a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000a4c:	4a15      	ldr	r2, [pc, #84]	; (8000aa4 <RCC_GetClocksFreq+0x14c>)
 8000a4e:	69bb      	ldr	r3, [r7, #24]
 8000a50:	4413      	add	r3, r2
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	685a      	ldr	r2, [r3, #4]
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	40da      	lsrs	r2, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <RCC_GetClocksFreq+0x140>)
 8000a66:	689b      	ldr	r3, [r3, #8]
 8000a68:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000a6c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8000a6e:	69bb      	ldr	r3, [r7, #24]
 8000a70:	0b5b      	lsrs	r3, r3, #13
 8000a72:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000a74:	4a0b      	ldr	r2, [pc, #44]	; (8000aa4 <RCC_GetClocksFreq+0x14c>)
 8000a76:	69bb      	ldr	r3, [r7, #24]
 8000a78:	4413      	add	r3, r2
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	685a      	ldr	r2, [r3, #4]
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	40da      	lsrs	r2, r3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	60da      	str	r2, [r3, #12]
}
 8000a8c:	bf00      	nop
 8000a8e:	3724      	adds	r7, #36	; 0x24
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	00f42400 	.word	0x00f42400
 8000aa0:	007a1200 	.word	0x007a1200
 8000aa4:	20000000 	.word	0x20000000

08000aa8 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	460b      	mov	r3, r1
 8000ab2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000ab4:	78fb      	ldrb	r3, [r7, #3]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d006      	beq.n	8000ac8 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000aba:	490a      	ldr	r1, [pc, #40]	; (8000ae4 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000abc:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000abe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000ac6:	e006      	b.n	8000ad6 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000ac8:	4906      	ldr	r1, [pc, #24]	; (8000ae4 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000aca:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000acc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	43db      	mvns	r3, r3
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000ad6:	bf00      	nop
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	40023800 	.word	0x40023800

08000ae8 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	460b      	mov	r3, r1
 8000af2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000af4:	78fb      	ldrb	r3, [r7, #3]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d006      	beq.n	8000b08 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000afa:	490a      	ldr	r1, [pc, #40]	; (8000b24 <RCC_APB2PeriphClockCmd+0x3c>)
 8000afc:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <RCC_APB2PeriphClockCmd+0x3c>)
 8000afe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4313      	orrs	r3, r2
 8000b04:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000b06:	e006      	b.n	8000b16 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000b08:	4906      	ldr	r1, [pc, #24]	; (8000b24 <RCC_APB2PeriphClockCmd+0x3c>)
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <RCC_APB2PeriphClockCmd+0x3c>)
 8000b0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	43db      	mvns	r3, r3
 8000b12:	4013      	ands	r3, r2
 8000b14:	644b      	str	r3, [r1, #68]	; 0x44
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	40023800 	.word	0x40023800

08000b28 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	; 0x28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000b32:	2300      	movs	r3, #0
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
 8000b36:	2300      	movs	r3, #0
 8000b38:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	8a1b      	ldrh	r3, [r3, #16]
 8000b46:	b29b      	uxth	r3, r3
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b4c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	88db      	ldrh	r3, [r3, #6]
 8000b56:	461a      	mov	r2, r3
 8000b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b60:	b29a      	uxth	r2, r3
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	899b      	ldrh	r3, [r3, #12]
 8000b6a:	b29b      	uxth	r3, r3
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b70:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000b74:	f023 030c 	bic.w	r3, r3, #12
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	889a      	ldrh	r2, [r3, #4]
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	891b      	ldrh	r3, [r3, #8]
 8000b82:	4313      	orrs	r3, r2
 8000b84:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	461a      	mov	r2, r3
 8000b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b92:	4313      	orrs	r3, r2
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b98:	b29a      	uxth	r2, r3
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	8a9b      	ldrh	r3, [r3, #20]
 8000ba2:	b29b      	uxth	r3, r3
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	899b      	ldrh	r3, [r3, #12]
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bbc:	b29a      	uxth	r2, r3
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000bc2:	f107 0308 	add.w	r3, r7, #8
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff fec6 	bl	8000958 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4a30      	ldr	r2, [pc, #192]	; (8000c90 <USART_Init+0x168>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d003      	beq.n	8000bdc <USART_Init+0xb4>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4a2f      	ldr	r2, [pc, #188]	; (8000c94 <USART_Init+0x16c>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d102      	bne.n	8000be2 <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	623b      	str	r3, [r7, #32]
 8000be0:	e001      	b.n	8000be6 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000be2:	693b      	ldr	r3, [r7, #16]
 8000be4:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	899b      	ldrh	r3, [r3, #12]
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	b21b      	sxth	r3, r3
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	da0c      	bge.n	8000c0c <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000bf2:	6a3a      	ldr	r2, [r7, #32]
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	4413      	add	r3, r2
 8000bfa:	009a      	lsls	r2, r3, #2
 8000bfc:	441a      	add	r2, r3
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c08:	61fb      	str	r3, [r7, #28]
 8000c0a:	e00b      	b.n	8000c24 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000c0c:	6a3a      	ldr	r2, [r7, #32]
 8000c0e:	4613      	mov	r3, r2
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	4413      	add	r3, r2
 8000c14:	009a      	lsls	r2, r3, #2
 8000c16:	441a      	add	r2, r3
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c22:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	4a1c      	ldr	r2, [pc, #112]	; (8000c98 <USART_Init+0x170>)
 8000c28:	fba2 2303 	umull	r2, r3, r2, r3
 8000c2c:	095b      	lsrs	r3, r3, #5
 8000c2e:	011b      	lsls	r3, r3, #4
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c34:	091b      	lsrs	r3, r3, #4
 8000c36:	2264      	movs	r2, #100	; 0x64
 8000c38:	fb02 f303 	mul.w	r3, r2, r3
 8000c3c:	69fa      	ldr	r2, [r7, #28]
 8000c3e:	1ad3      	subs	r3, r2, r3
 8000c40:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	899b      	ldrh	r3, [r3, #12]
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	b21b      	sxth	r3, r3
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	da0c      	bge.n	8000c68 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000c4e:	69bb      	ldr	r3, [r7, #24]
 8000c50:	00db      	lsls	r3, r3, #3
 8000c52:	3332      	adds	r3, #50	; 0x32
 8000c54:	4a10      	ldr	r2, [pc, #64]	; (8000c98 <USART_Init+0x170>)
 8000c56:	fba2 2303 	umull	r2, r3, r2, r3
 8000c5a:	095b      	lsrs	r3, r3, #5
 8000c5c:	f003 0307 	and.w	r3, r3, #7
 8000c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c62:	4313      	orrs	r3, r2
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
 8000c66:	e00b      	b.n	8000c80 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000c68:	69bb      	ldr	r3, [r7, #24]
 8000c6a:	011b      	lsls	r3, r3, #4
 8000c6c:	3332      	adds	r3, #50	; 0x32
 8000c6e:	4a0a      	ldr	r2, [pc, #40]	; (8000c98 <USART_Init+0x170>)
 8000c70:	fba2 2303 	umull	r2, r3, r2, r3
 8000c74:	095b      	lsrs	r3, r3, #5
 8000c76:	f003 030f 	and.w	r3, r3, #15
 8000c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c82:	b29a      	uxth	r2, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	811a      	strh	r2, [r3, #8]
}
 8000c88:	bf00      	nop
 8000c8a:	3728      	adds	r7, #40	; 0x28
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40011000 	.word	0x40011000
 8000c94:	40011400 	.word	0x40011400
 8000c98:	51eb851f 	.word	0x51eb851f

08000c9c <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000ca8:	78fb      	ldrb	r3, [r7, #3]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d008      	beq.n	8000cc0 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	899b      	ldrh	r3, [r3, #12]
 8000cb2:	b29b      	uxth	r3, r3
 8000cb4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000cb8:	b29a      	uxth	r2, r3
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8000cbe:	e007      	b.n	8000cd0 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	899b      	ldrh	r3, [r3, #12]
 8000cc4:	b29b      	uxth	r3, r3
 8000cc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000cca:	b29a      	uxth	r2, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	819a      	strh	r2, [r3, #12]
}
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000ce8:	887b      	ldrh	r3, [r7, #2]
 8000cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000cee:	b29a      	uxth	r2, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	809a      	strh	r2, [r3, #4]
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	460b      	mov	r3, r1
 8000d0a:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	881b      	ldrh	r3, [r3, #0]
 8000d14:	b29a      	uxth	r2, r3
 8000d16:	887b      	ldrh	r3, [r7, #2]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	b29b      	uxth	r3, r3
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d002      	beq.n	8000d26 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8000d20:	2301      	movs	r3, #1
 8000d22:	73fb      	strb	r3, [r7, #15]
 8000d24:	e001      	b.n	8000d2a <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8000d26:	2300      	movs	r3, #0
 8000d28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3714      	adds	r7, #20
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <STM_EVAL_LEDInit>:
  *     @arg LED3
  *     @arg LED4
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	4a10      	ldr	r2, [pc, #64]	; (8000d88 <STM_EVAL_LEDInit+0x50>)
 8000d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff feab 	bl	8000aa8 <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	4a0d      	ldr	r2, [pc, #52]	; (8000d8c <STM_EVAL_LEDInit+0x54>)
 8000d56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000d60:	2300      	movs	r3, #0
 8000d62:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000d64:	2301      	movs	r3, #1
 8000d66:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	4a08      	ldr	r2, [pc, #32]	; (8000d90 <STM_EVAL_LEDInit+0x58>)
 8000d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d74:	f107 0208 	add.w	r2, r7, #8
 8000d78:	4611      	mov	r1, r2
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff fcc2 	bl	8000704 <GPIO_Init>
}
 8000d80:	bf00      	nop
 8000d82:	3710      	adds	r7, #16
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	0800220c 	.word	0x0800220c
 8000d8c:	08002208 	.word	0x08002208
 8000d90:	20000010 	.word	0x20000010

08000d94 <STM_EVAL_LEDOn>:
  *     @arg LED3
  *     @arg LED4 
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	4a06      	ldr	r2, [pc, #24]	; (8000dbc <STM_EVAL_LEDOn+0x28>)
 8000da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000da6:	79fa      	ldrb	r2, [r7, #7]
 8000da8:	4905      	ldr	r1, [pc, #20]	; (8000dc0 <STM_EVAL_LEDOn+0x2c>)
 8000daa:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000dae:	831a      	strh	r2, [r3, #24]
}
 8000db0:	bf00      	nop
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	20000010 	.word	0x20000010
 8000dc0:	08002208 	.word	0x08002208

08000dc4 <STM_EVAL_LEDToggle>:
  *     @arg LED3
  *     @arg LED4  
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	4a09      	ldr	r2, [pc, #36]	; (8000df8 <STM_EVAL_LEDToggle+0x34>)
 8000dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dd6:	79fa      	ldrb	r2, [r7, #7]
 8000dd8:	4907      	ldr	r1, [pc, #28]	; (8000df8 <STM_EVAL_LEDToggle+0x34>)
 8000dda:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000dde:	6952      	ldr	r2, [r2, #20]
 8000de0:	79f9      	ldrb	r1, [r7, #7]
 8000de2:	4806      	ldr	r0, [pc, #24]	; (8000dfc <STM_EVAL_LEDToggle+0x38>)
 8000de4:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 8000de8:	404a      	eors	r2, r1
 8000dea:	615a      	str	r2, [r3, #20]
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	20000010 	.word	0x20000010
 8000dfc:	08002208 	.word	0x08002208

08000e00 <DMA1_Stream4_IRQHandler>:
  * @brief  This function handles the DMA Tx Channel interrupt Handler.
  * @param  None
  * @retval None
  */
void sEE_I2C_DMA_TX_IRQHandler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* Check if the DMA transfer is complete */
  if(DMA_GetFlagStatus(sEE_I2C_DMA_STREAM_TX, sEE_TX_DMA_FLAG_TCIF) != RESET)
 8000e04:	4916      	ldr	r1, [pc, #88]	; (8000e60 <DMA1_Stream4_IRQHandler+0x60>)
 8000e06:	4817      	ldr	r0, [pc, #92]	; (8000e64 <DMA1_Stream4_IRQHandler+0x64>)
 8000e08:	f7ff fc12 	bl	8000630 <DMA_GetFlagStatus>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d024      	beq.n	8000e5c <DMA1_Stream4_IRQHandler+0x5c>
  {  
    /* Disable the DMA Tx Stream and Clear TC flag */  
    DMA_Cmd(sEE_I2C_DMA_STREAM_TX, DISABLE);
 8000e12:	2100      	movs	r1, #0
 8000e14:	4813      	ldr	r0, [pc, #76]	; (8000e64 <DMA1_Stream4_IRQHandler+0x64>)
 8000e16:	f7ff fbee 	bl	80005f6 <DMA_Cmd>
    DMA_ClearFlag(sEE_I2C_DMA_STREAM_TX, sEE_TX_DMA_FLAG_TCIF);
 8000e1a:	4911      	ldr	r1, [pc, #68]	; (8000e60 <DMA1_Stream4_IRQHandler+0x60>)
 8000e1c:	4811      	ldr	r0, [pc, #68]	; (8000e64 <DMA1_Stream4_IRQHandler+0x64>)
 8000e1e:	f7ff fc43 	bl	80006a8 <DMA_ClearFlag>

    /*!< Wait till all data have been physically transferred on the bus */
    sEETimeout = sEE_LONG_TIMEOUT;
 8000e22:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <DMA1_Stream4_IRQHandler+0x68>)
 8000e24:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 8000e28:	601a      	str	r2, [r3, #0]
    while(!I2C_GetFlagStatus(sEE_I2C, I2C_FLAG_BTF))
 8000e2a:	e008      	b.n	8000e3e <DMA1_Stream4_IRQHandler+0x3e>
    {
      if((sEETimeout--) == 0) sEE_TIMEOUT_UserCallback();
 8000e2c:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <DMA1_Stream4_IRQHandler+0x68>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	1e5a      	subs	r2, r3, #1
 8000e32:	490d      	ldr	r1, [pc, #52]	; (8000e68 <DMA1_Stream4_IRQHandler+0x68>)
 8000e34:	600a      	str	r2, [r1, #0]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d101      	bne.n	8000e3e <DMA1_Stream4_IRQHandler+0x3e>
 8000e3a:	f000 f8f9 	bl	8001030 <sEE_TIMEOUT_UserCallback>
    while(!I2C_GetFlagStatus(sEE_I2C, I2C_FLAG_BTF))
 8000e3e:	490b      	ldr	r1, [pc, #44]	; (8000e6c <DMA1_Stream4_IRQHandler+0x6c>)
 8000e40:	480b      	ldr	r0, [pc, #44]	; (8000e70 <DMA1_Stream4_IRQHandler+0x70>)
 8000e42:	f7ff fd56 	bl	80008f2 <I2C_GetFlagStatus>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d0ef      	beq.n	8000e2c <DMA1_Stream4_IRQHandler+0x2c>
    }
    
    /*!< Send STOP condition */
    I2C_GenerateSTOP(sEE_I2C, ENABLE);
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	4808      	ldr	r0, [pc, #32]	; (8000e70 <DMA1_Stream4_IRQHandler+0x70>)
 8000e50:	f7ff fd2f 	bl	80008b2 <I2C_GenerateSTOP>
    
    /* Reset the variable holding the number of data to be written */
    *sEEDataWritePointer = 0;  
 8000e54:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <DMA1_Stream4_IRQHandler+0x74>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2200      	movs	r2, #0
 8000e5a:	701a      	strb	r2, [r3, #0]
  }
}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	20000020 	.word	0x20000020
 8000e64:	40026070 	.word	0x40026070
 8000e68:	20000018 	.word	0x20000018
 8000e6c:	10000004 	.word	0x10000004
 8000e70:	40005c00 	.word	0x40005c00
 8000e74:	200000a8 	.word	0x200000a8

08000e78 <DMA1_Stream2_IRQHandler>:
  * @brief  This function handles the DMA Rx Channel interrupt Handler.
  * @param  None
  * @retval None
  */
void sEE_I2C_DMA_RX_IRQHandler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* Check if the DMA transfer is complete */
  if(DMA_GetFlagStatus(sEE_I2C_DMA_STREAM_RX, sEE_RX_DMA_FLAG_TCIF) != RESET)
 8000e7c:	f04f 5181 	mov.w	r1, #270532608	; 0x10200000
 8000e80:	480c      	ldr	r0, [pc, #48]	; (8000eb4 <DMA1_Stream2_IRQHandler+0x3c>)
 8000e82:	f7ff fbd5 	bl	8000630 <DMA_GetFlagStatus>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d010      	beq.n	8000eae <DMA1_Stream2_IRQHandler+0x36>
  {      
    /*!< Send STOP Condition */
    I2C_GenerateSTOP(sEE_I2C, ENABLE);    
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	480a      	ldr	r0, [pc, #40]	; (8000eb8 <DMA1_Stream2_IRQHandler+0x40>)
 8000e90:	f7ff fd0f 	bl	80008b2 <I2C_GenerateSTOP>
    
    /* Disable the DMA Rx Stream and Clear TC Flag */  
    DMA_Cmd(sEE_I2C_DMA_STREAM_RX, DISABLE);
 8000e94:	2100      	movs	r1, #0
 8000e96:	4807      	ldr	r0, [pc, #28]	; (8000eb4 <DMA1_Stream2_IRQHandler+0x3c>)
 8000e98:	f7ff fbad 	bl	80005f6 <DMA_Cmd>
    DMA_ClearFlag(sEE_I2C_DMA_STREAM_RX, sEE_RX_DMA_FLAG_TCIF);
 8000e9c:	f04f 5181 	mov.w	r1, #270532608	; 0x10200000
 8000ea0:	4804      	ldr	r0, [pc, #16]	; (8000eb4 <DMA1_Stream2_IRQHandler+0x3c>)
 8000ea2:	f7ff fc01 	bl	80006a8 <DMA_ClearFlag>
    
    /* Reset the variable holding the number of data to be read */
    *sEEDataReadPointer = 0;
 8000ea6:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <DMA1_Stream2_IRQHandler+0x44>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	801a      	strh	r2, [r3, #0]
  }
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40026040 	.word	0x40026040
 8000eb8:	40005c00 	.word	0x40005c00
 8000ebc:	200000b0 	.word	0x200000b0

08000ec0 <main>:
**===========================================================================
*/


int main(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b094      	sub	sp, #80	; 0x50
 8000ec4:	af00      	add	r7, sp, #0

  /*Declaration of variables, initialization structures*/

   GPIO_InitTypeDef  GPIO_InitStructure, GPIO_InitStructureAN;
   USART_InitTypeDef USART_InitStruct;
   int i = 0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	64fb      	str	r3, [r7, #76]	; 0x4c
  /*Initialize Clock to ADC, LTDC, USART, GPIO*/

  /*ADC1 and LTDC, both the peripherals on ABP2. Hence we initialize the clock to these
   *Peripherals with following functions: */

  RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 8000eca:	2101      	movs	r1, #1
 8000ecc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000ed0:	f7ff fe0a 	bl	8000ae8 <RCC_APB2PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_LTDC, ENABLE);
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000eda:	f7ff fe05 	bl	8000ae8 <RCC_APB2PeriphClockCmd>

  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000ede:	2101      	movs	r1, #1
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	f7ff fde1 	bl	8000aa8 <RCC_AHB1PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1,ENABLE);
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	2010      	movs	r0, #16
 8000eea:	f7ff fdfd 	bl	8000ae8 <RCC_APB2PeriphClockCmd>

  /*Set PA9 and PA10 to alternate function of USART*/
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource9, GPIO_AF_USART1);
 8000eee:	2207      	movs	r2, #7
 8000ef0:	2109      	movs	r1, #9
 8000ef2:	484a      	ldr	r0, [pc, #296]	; (800101c <main+0x15c>)
 8000ef4:	f7ff fc94 	bl	8000820 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_USART1);
 8000ef8:	2207      	movs	r2, #7
 8000efa:	210a      	movs	r1, #10
 8000efc:	4847      	ldr	r0, [pc, #284]	; (800101c <main+0x15c>)
 8000efe:	f7ff fc8f 	bl	8000820 <GPIO_PinAFConfig>

  /*GPIOA Initialization for PA1, PA9 and PA10*/
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 8000f02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f06:	647b      	str	r3, [r7, #68]	; 0x44
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000f14:	2301      	movs	r3, #1
 8000f16:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000f20:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000f24:	4619      	mov	r1, r3
 8000f26:	483d      	ldr	r0, [pc, #244]	; (800101c <main+0x15c>)
 8000f28:	f7ff fbec 	bl	8000704 <GPIO_Init>
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 8000f2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f30:	647b      	str	r3, [r7, #68]	; 0x44
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000f32:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000f36:	4619      	mov	r1, r3
 8000f38:	4838      	ldr	r0, [pc, #224]	; (800101c <main+0x15c>)
 8000f3a:	f7ff fbe3 	bl	8000704 <GPIO_Init>

  /*Setting PA1 as Analog pin with no pull*/
  GPIO_InitStructureAN.GPIO_Pin = GPIO_Pin_0;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	63fb      	str	r3, [r7, #60]	; 0x3c
  GPIO_InitStructureAN.GPIO_Mode = GPIO_Mode_AN;
 8000f42:	2303      	movs	r3, #3
 8000f44:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
  GPIO_InitStructureAN.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  GPIO_Init(GPIOA, &GPIO_InitStructureAN);
 8000f4e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f52:	4619      	mov	r1, r3
 8000f54:	4831      	ldr	r0, [pc, #196]	; (800101c <main+0x15c>)
 8000f56:	f7ff fbd5 	bl	8000704 <GPIO_Init>


  /*USART Initialization*/

  USART_InitStruct.USART_BaudRate = 115200;
 8000f5a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000f60:	2300      	movs	r3, #0
 8000f62:	873b      	strh	r3, [r7, #56]	; 0x38
  USART_InitStruct.USART_Mode = USART_Mode_Tx;
 8000f64:	2308      	movs	r3, #8
 8000f66:	86fb      	strh	r3, [r7, #54]	; 0x36
  USART_InitStruct.USART_Parity = USART_Parity_No;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	86bb      	strh	r3, [r7, #52]	; 0x34
  USART_InitStruct.USART_StopBits = USART_StopBits_1;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	867b      	strh	r3, [r7, #50]	; 0x32
  USART_InitStruct.USART_WordLength = USART_WordLength_8b;
 8000f70:	2300      	movs	r3, #0
 8000f72:	863b      	strh	r3, [r7, #48]	; 0x30
  USART_Init(USART1, &USART_InitStruct);
 8000f74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4829      	ldr	r0, [pc, #164]	; (8001020 <main+0x160>)
 8000f7c:	f7ff fdd4 	bl	8000b28 <USART_Init>
  USART_Cmd	(USART1, ENABLE);
 8000f80:	2101      	movs	r1, #1
 8000f82:	4827      	ldr	r0, [pc, #156]	; (8001020 <main+0x160>)
 8000f84:	f7ff fe8a 	bl	8000c9c <USART_Cmd>

  /*ADC Initialization*/

  ADC_InitTypeDef ADC1_Init_Type;
  ADC1_Init_Type.ADC_Resolution = ADC_Resolution_12b; //Set-up ADC in 12-bit resolution mode
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
  ADC1_Init_Type.ADC_ScanConvMode = DISABLE; //Set-up ADC for single channel mode
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	763b      	strb	r3, [r7, #24]
  ADC1_Init_Type.ADC_NbrOfConversion = 1; //Number of "Regular" conversions set at 1
 8000f90:	2301      	movs	r3, #1
 8000f92:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  ADC1_Init_Type.ADC_DataAlign = ADC_DataAlign_Right; //Conversion result will be stored in right-aligned mode
 8000f96:	2300      	movs	r3, #0
 8000f98:	627b      	str	r3, [r7, #36]	; 0x24
  ADC1_Init_Type.ADC_ContinuousConvMode = ENABLE; //Conversion does not stop at EOC signal
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	767b      	strb	r3, [r7, #25]
  ADC1_Init_Type.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	623b      	str	r3, [r7, #32]
  ADC1_Init_Type.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61fb      	str	r3, [r7, #28]
  ADC_CommonInitTypeDef ADC1_Common_Init_Type;
  ADC_CommonStructInit(&ADC1_Common_Init_Type);
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff f9ef 	bl	800038c <ADC_CommonStructInit>
  /*Initialize ADC1_Common_Init_Type.ADC_Mode to Independent, ADC1_Common_Init_Type.ADC_Prescaler to 2,
   ADC1_Common_Init_Type.ADC_DMAAccessMode to disabled, ADC1_Common_Init_Type.ADC_TwoSamplingDelay to 5  cycles*/



  ADC_CommonInit(&ADC1_Common_Init_Type);
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff f9c3 	bl	800033c <ADC_CommonInit>
  ADC_Init(ADC1, &ADC1_Init_Type);
 8000fb6:	f107 0314 	add.w	r3, r7, #20
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4819      	ldr	r0, [pc, #100]	; (8001024 <main+0x164>)
 8000fbe:	f7ff f967 	bl	8000290 <ADC_Init>
  //ADC_ContinuousModeCmd (ADC1, ENABLE);
  ADC_DiscModeCmd (ADC1, DISABLE);
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4817      	ldr	r0, [pc, #92]	; (8001024 <main+0x164>)
 8000fc6:	f7ff faed 	bl	80005a4 <ADC_DiscModeCmd>
  //ADC_EOCOnEachRegularChannelCmd(ADC1,ENABLE);
  ADC_RegularChannelConfig( ADC1, ADC_Channel_0, 1, ADC_SampleTime_15Cycles);
 8000fca:	2301      	movs	r3, #1
 8000fcc:	2201      	movs	r2, #1
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4814      	ldr	r0, [pc, #80]	; (8001024 <main+0x164>)
 8000fd2:	f7ff fa0d 	bl	80003f0 <ADC_RegularChannelConfig>
  ADC_Cmd (ADC1, ENABLE);
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	4812      	ldr	r0, [pc, #72]	; (8001024 <main+0x164>)
 8000fda:	f7ff f9ed 	bl	80003b8 <ADC_Cmd>

  /* Initialize LTCD*/


  //STM_EVAL_LEDInit(LED3);
  STM_EVAL_LEDInit(LED4);
 8000fde:	2001      	movs	r0, #1
 8000fe0:	f7ff feaa 	bl	8000d38 <STM_EVAL_LEDInit>

  //STM_EVAL_LEDOn(LED3);
  STM_EVAL_LEDOn(LED4);
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	f7ff fed5 	bl	8000d94 <STM_EVAL_LEDOn>
  //int count =0;
  /* Infinite loop */

  while (1)
  {
	  ADC_SoftwareStartConv(ADC1); //Starts Conversion
 8000fea:	480e      	ldr	r0, [pc, #56]	; (8001024 <main+0x164>)
 8000fec:	f7ff faca 	bl	8000584 <ADC_SoftwareStartConv>
//		  tempff = (float)ADC_GetConversionValue(ADC1);
//		  tempff=(300*tempff/4096);
//		  tempff=tempff+2;
//		  tempDecimals = (tempff-(int)tempff)*100;
		  //printf("Temp = %d.%d C \r\n", (int)tempff, (int)tempDecimals);
	  printf("%d \r\n", (int)ADC_GetConversionValue(ADC1));
 8000ff0:	480c      	ldr	r0, [pc, #48]	; (8001024 <main+0x164>)
 8000ff2:	f7ff faf3 	bl	80005dc <ADC_GetConversionValue>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	480b      	ldr	r0, [pc, #44]	; (8001028 <main+0x168>)
 8000ffc:	f000 f9f4 	bl	80013e8 <iprintf>
	  STM_EVAL_LEDToggle(LED4);
 8001000:	2001      	movs	r0, #1
 8001002:	f7ff fedf 	bl	8000dc4 <STM_EVAL_LEDToggle>
	  for(i=0;i<1000000;i++);
 8001006:	2300      	movs	r3, #0
 8001008:	64fb      	str	r3, [r7, #76]	; 0x4c
 800100a:	e002      	b.n	8001012 <main+0x152>
 800100c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800100e:	3301      	adds	r3, #1
 8001010:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001014:	4a05      	ldr	r2, [pc, #20]	; (800102c <main+0x16c>)
 8001016:	4293      	cmp	r3, r2
 8001018:	ddf8      	ble.n	800100c <main+0x14c>
	  ADC_SoftwareStartConv(ADC1); //Starts Conversion
 800101a:	e7e6      	b.n	8000fea <main+0x12a>
 800101c:	40020000 	.word	0x40020000
 8001020:	40011000 	.word	0x40011000
 8001024:	40012000 	.word	0x40012000
 8001028:	08002200 	.word	0x08002200
 800102c:	000f423f 	.word	0x000f423f

08001030 <sEE_TIMEOUT_UserCallback>:
/*
 * Callback used by stm324xg_eval_i2c_ee.c.
 * Refer to stm324xg_eval_i2c_ee.h for more info.
 */
uint32_t sEE_TIMEOUT_UserCallback(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  while (1)
 8001034:	e7fe      	b.n	8001034 <sEE_TIMEOUT_UserCallback+0x4>
	...

08001038 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001038:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001070 <LoopFillZerobss+0x14>
  
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800103c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800103e:	e003      	b.n	8001048 <LoopCopyDataInit>

08001040 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001042:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001044:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001046:	3104      	adds	r1, #4

08001048 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001048:	480b      	ldr	r0, [pc, #44]	; (8001078 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800104a:	4b0c      	ldr	r3, [pc, #48]	; (800107c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800104c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800104e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001050:	d3f6      	bcc.n	8001040 <CopyDataInit>
  ldr  r2, =_sbss
 8001052:	4a0b      	ldr	r2, [pc, #44]	; (8001080 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001054:	e002      	b.n	800105c <LoopFillZerobss>

08001056 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001056:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001058:	f842 3b04 	str.w	r3, [r2], #4

0800105c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800105c:	4b09      	ldr	r3, [pc, #36]	; (8001084 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800105e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001060:	d3f9      	bcc.n	8001056 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001062:	f000 f8eb 	bl	800123c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001066:	f000 f99b 	bl	80013a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800106a:	f7ff ff29 	bl	8000ec0 <main>
  bx  lr    
 800106e:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001070:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001074:	080022b4 	.word	0x080022b4
  ldr  r0, =_sdata
 8001078:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800107c:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8001080:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8001084:	200000b8 	.word	0x200000b8

08001088 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001088:	e7fe      	b.n	8001088 <ADC_IRQHandler>

0800108a <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800109c:	e7fe      	b.n	800109c <HardFault_Handler+0x4>

0800109e <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80010a2:	e7fe      	b.n	80010a2 <MemManage_Handler+0x4>

080010a4 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80010a8:	e7fe      	b.n	80010a8 <BusFault_Handler+0x4>

080010aa <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80010aa:	b480      	push	{r7}
 80010ac:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80010ae:	e7fe      	b.n	80010ae <UsageFault_Handler+0x4>

080010b0 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0
}
 80010c2:	bf00      	nop
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 80010de:	bf00      	nop
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <_write>:
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	/* return len; */
	for(int i = 0; i< len; i++)
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
 80010f8:	e013      	b.n	8001122 <_write+0x3a>
	{
		USART_SendData(USART1, ptr[i]);
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	68ba      	ldr	r2, [r7, #8]
 80010fe:	4413      	add	r3, r2
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	b29b      	uxth	r3, r3
 8001104:	4619      	mov	r1, r3
 8001106:	480d      	ldr	r0, [pc, #52]	; (800113c <_write+0x54>)
 8001108:	f7ff fde8 	bl	8000cdc <USART_SendData>
		while(SET != USART_GetFlagStatus(USART1, USART_FLAG_TC));
 800110c:	bf00      	nop
 800110e:	2140      	movs	r1, #64	; 0x40
 8001110:	480a      	ldr	r0, [pc, #40]	; (800113c <_write+0x54>)
 8001112:	f7ff fdf5 	bl	8000d00 <USART_GetFlagStatus>
 8001116:	4603      	mov	r3, r0
 8001118:	2b01      	cmp	r3, #1
 800111a:	d1f8      	bne.n	800110e <_write+0x26>
	for(int i = 0; i< len; i++)
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	3301      	adds	r3, #1
 8001120:	617b      	str	r3, [r7, #20]
 8001122:	697a      	ldr	r2, [r7, #20]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	429a      	cmp	r2, r3
 8001128:	dbe7      	blt.n	80010fa <_write+0x12>
	}
	errno = ENOSYS;
 800112a:	4b05      	ldr	r3, [pc, #20]	; (8001140 <_write+0x58>)
 800112c:	2258      	movs	r2, #88	; 0x58
 800112e:	601a      	str	r2, [r3, #0]
	return -1;
 8001130:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001134:	4618      	mov	r0, r3
 8001136:	3718      	adds	r7, #24
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40011000 	.word	0x40011000
 8001140:	200000b4 	.word	0x200000b4

08001144 <_sbrk>:

void * _sbrk(int32_t incr)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 800114c:	4b0b      	ldr	r3, [pc, #44]	; (800117c <_sbrk+0x38>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d102      	bne.n	800115a <_sbrk+0x16>
		heap_end = & end;
 8001154:	4b09      	ldr	r3, [pc, #36]	; (800117c <_sbrk+0x38>)
 8001156:	4a0a      	ldr	r2, [pc, #40]	; (8001180 <_sbrk+0x3c>)
 8001158:	601a      	str	r2, [r3, #0]
	}

	prev_heap_end = heap_end;
 800115a:	4b08      	ldr	r3, [pc, #32]	; (800117c <_sbrk+0x38>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	60fb      	str	r3, [r7, #12]
	heap_end += incr;
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <_sbrk+0x38>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4413      	add	r3, r2
 8001168:	4a04      	ldr	r2, [pc, #16]	; (800117c <_sbrk+0x38>)
 800116a:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 800116c:	68fb      	ldr	r3, [r7, #12]
}
 800116e:	4618      	mov	r0, r3
 8001170:	3714      	adds	r7, #20
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	2000009c 	.word	0x2000009c
 8001180:	200000b8 	.word	0x200000b8

08001184 <_close>:

int _close(int32_t file)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 800118c:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <_close+0x20>)
 800118e:	2258      	movs	r2, #88	; 0x58
 8001190:	601a      	str	r2, [r3, #0]
	return -1;
 8001192:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001196:	4618      	mov	r0, r3
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	200000b4 	.word	0x200000b4

080011a8 <_fstat>:


int _fstat(int32_t file, struct stat *st)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
	errno = ENOSYS;
 80011b2:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <_fstat+0x20>)
 80011b4:	2258      	movs	r2, #88	; 0x58
 80011b6:	601a      	str	r2, [r3, #0]
	return -1;
 80011b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011bc:	4618      	mov	r0, r3
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	200000b4 	.word	0x200000b4

080011cc <_isatty>:

int _isatty(int32_t file)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 80011d4:	4b04      	ldr	r3, [pc, #16]	; (80011e8 <_isatty+0x1c>)
 80011d6:	2258      	movs	r2, #88	; 0x58
 80011d8:	601a      	str	r2, [r3, #0]
	return 0;
 80011da:	2300      	movs	r3, #0
}
 80011dc:	4618      	mov	r0, r3
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	200000b4 	.word	0x200000b4

080011ec <_lseek>:

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 80011f8:	4b05      	ldr	r3, [pc, #20]	; (8001210 <_lseek+0x24>)
 80011fa:	2258      	movs	r2, #88	; 0x58
 80011fc:	601a      	str	r2, [r3, #0]
	return -1;
 80011fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001202:	4618      	mov	r0, r3
 8001204:	3714      	adds	r7, #20
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	200000b4 	.word	0x200000b4

08001214 <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 8001220:	4b05      	ldr	r3, [pc, #20]	; (8001238 <_read+0x24>)
 8001222:	2258      	movs	r2, #88	; 0x58
 8001224:	601a      	str	r2, [r3, #0]
	return -1;
 8001226:	f04f 33ff 	mov.w	r3, #4294967295
}
 800122a:	4618      	mov	r0, r3
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	200000b4 	.word	0x200000b4

0800123c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001240:	4a16      	ldr	r2, [pc, #88]	; (800129c <SystemInit+0x60>)
 8001242:	4b16      	ldr	r3, [pc, #88]	; (800129c <SystemInit+0x60>)
 8001244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001248:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800124c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001250:	4a13      	ldr	r2, [pc, #76]	; (80012a0 <SystemInit+0x64>)
 8001252:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <SystemInit+0x64>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f043 0301 	orr.w	r3, r3, #1
 800125a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800125c:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <SystemInit+0x64>)
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001262:	4a0f      	ldr	r2, [pc, #60]	; (80012a0 <SystemInit+0x64>)
 8001264:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <SystemInit+0x64>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800126c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001270:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001272:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <SystemInit+0x64>)
 8001274:	4a0b      	ldr	r2, [pc, #44]	; (80012a4 <SystemInit+0x68>)
 8001276:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001278:	4a09      	ldr	r2, [pc, #36]	; (80012a0 <SystemInit+0x64>)
 800127a:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <SystemInit+0x64>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001282:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <SystemInit+0x64>)
 8001286:	2200      	movs	r2, #0
 8001288:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800128a:	f000 f80d 	bl	80012a8 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800128e:	4b03      	ldr	r3, [pc, #12]	; (800129c <SystemInit+0x60>)
 8001290:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001294:	609a      	str	r2, [r3, #8]
#endif
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	e000ed00 	.word	0xe000ed00
 80012a0:	40023800 	.word	0x40023800
 80012a4:	24003010 	.word	0x24003010

080012a8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	607b      	str	r3, [r7, #4]
 80012b2:	2300      	movs	r3, #0
 80012b4:	603b      	str	r3, [r7, #0]
                   (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

#else /* PLL_SOURCE_HSE_BYPASS or PLL_SOURCE_HSE */

  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80012b6:	4a36      	ldr	r2, [pc, #216]	; (8001390 <SetSysClock+0xe8>)
 80012b8:	4b35      	ldr	r3, [pc, #212]	; (8001390 <SetSysClock+0xe8>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c0:	6013      	str	r3, [r2, #0]
  RCC->CR |= ((uint32_t)RCC_CR_HSEBYP);
#endif   /* PLL_SOURCE_HSE_BYPASS */
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80012c2:	4b33      	ldr	r3, [pc, #204]	; (8001390 <SetSysClock+0xe8>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ca:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	3301      	adds	r3, #1
 80012d0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d103      	bne.n	80012e0 <SetSysClock+0x38>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80012de:	d1f0      	bne.n	80012c2 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80012e0:	4b2b      	ldr	r3, [pc, #172]	; (8001390 <SetSysClock+0xe8>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d002      	beq.n	80012f2 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80012ec:	2301      	movs	r3, #1
 80012ee:	603b      	str	r3, [r7, #0]
 80012f0:	e001      	b.n	80012f6 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80012f2:	2300      	movs	r3, #0
 80012f4:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d102      	bne.n	8001302 <SetSysClock+0x5a>
  {
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80012fc:	4b24      	ldr	r3, [pc, #144]	; (8001390 <SetSysClock+0xe8>)
 80012fe:	4a25      	ldr	r2, [pc, #148]	; (8001394 <SetSysClock+0xec>)
 8001300:	605a      	str	r2, [r3, #4]
         configuration. User can add here some code to deal with this error */
  }
#endif /*PLL_SOURCE_HSI*/
  
      /* Select regulator voltage output Scale 1 mode, System frequency up to 180 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001302:	4a23      	ldr	r2, [pc, #140]	; (8001390 <SetSysClock+0xe8>)
 8001304:	4b22      	ldr	r3, [pc, #136]	; (8001390 <SetSysClock+0xe8>)
 8001306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800130c:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 800130e:	4a22      	ldr	r2, [pc, #136]	; (8001398 <SetSysClock+0xf0>)
 8001310:	4b21      	ldr	r3, [pc, #132]	; (8001398 <SetSysClock+0xf0>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001318:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800131a:	4a1d      	ldr	r2, [pc, #116]	; (8001390 <SetSysClock+0xe8>)
 800131c:	4b1c      	ldr	r3, [pc, #112]	; (8001390 <SetSysClock+0xe8>)
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001322:	4a1b      	ldr	r2, [pc, #108]	; (8001390 <SetSysClock+0xe8>)
 8001324:	4b1a      	ldr	r3, [pc, #104]	; (8001390 <SetSysClock+0xe8>)
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800132c:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800132e:	4a18      	ldr	r2, [pc, #96]	; (8001390 <SetSysClock+0xe8>)
 8001330:	4b17      	ldr	r3, [pc, #92]	; (8001390 <SetSysClock+0xe8>)
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8001338:	6093      	str	r3, [r2, #8]

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800133a:	4a15      	ldr	r2, [pc, #84]	; (8001390 <SetSysClock+0xe8>)
 800133c:	4b14      	ldr	r3, [pc, #80]	; (8001390 <SetSysClock+0xe8>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001344:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001346:	bf00      	nop
 8001348:	4b11      	ldr	r3, [pc, #68]	; (8001390 <SetSysClock+0xe8>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d0f9      	beq.n	8001348 <SetSysClock+0xa0>
    {
    }

    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <SetSysClock+0xf4>)
 8001356:	f240 7205 	movw	r2, #1797	; 0x705
 800135a:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800135c:	4a0c      	ldr	r2, [pc, #48]	; (8001390 <SetSysClock+0xe8>)
 800135e:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <SetSysClock+0xe8>)
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	f023 0303 	bic.w	r3, r3, #3
 8001366:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001368:	4a09      	ldr	r2, [pc, #36]	; (8001390 <SetSysClock+0xe8>)
 800136a:	4b09      	ldr	r3, [pc, #36]	; (8001390 <SetSysClock+0xe8>)
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f043 0302 	orr.w	r3, r3, #2
 8001372:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001374:	bf00      	nop
 8001376:	4b06      	ldr	r3, [pc, #24]	; (8001390 <SetSysClock+0xe8>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f003 030c 	and.w	r3, r3, #12
 800137e:	2b08      	cmp	r3, #8
 8001380:	d1f9      	bne.n	8001376 <SetSysClock+0xce>
    {
    }
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	40023800 	.word	0x40023800
 8001394:	07405a08 	.word	0x07405a08
 8001398:	40007000 	.word	0x40007000
 800139c:	40023c00 	.word	0x40023c00

080013a0 <__libc_init_array>:
 80013a0:	b570      	push	{r4, r5, r6, lr}
 80013a2:	4e0d      	ldr	r6, [pc, #52]	; (80013d8 <__libc_init_array+0x38>)
 80013a4:	4c0d      	ldr	r4, [pc, #52]	; (80013dc <__libc_init_array+0x3c>)
 80013a6:	1ba4      	subs	r4, r4, r6
 80013a8:	10a4      	asrs	r4, r4, #2
 80013aa:	2500      	movs	r5, #0
 80013ac:	42a5      	cmp	r5, r4
 80013ae:	d109      	bne.n	80013c4 <__libc_init_array+0x24>
 80013b0:	4e0b      	ldr	r6, [pc, #44]	; (80013e0 <__libc_init_array+0x40>)
 80013b2:	4c0c      	ldr	r4, [pc, #48]	; (80013e4 <__libc_init_array+0x44>)
 80013b4:	f000 ff18 	bl	80021e8 <_init>
 80013b8:	1ba4      	subs	r4, r4, r6
 80013ba:	10a4      	asrs	r4, r4, #2
 80013bc:	2500      	movs	r5, #0
 80013be:	42a5      	cmp	r5, r4
 80013c0:	d105      	bne.n	80013ce <__libc_init_array+0x2e>
 80013c2:	bd70      	pop	{r4, r5, r6, pc}
 80013c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80013c8:	4798      	blx	r3
 80013ca:	3501      	adds	r5, #1
 80013cc:	e7ee      	b.n	80013ac <__libc_init_array+0xc>
 80013ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80013d2:	4798      	blx	r3
 80013d4:	3501      	adds	r5, #1
 80013d6:	e7f2      	b.n	80013be <__libc_init_array+0x1e>
 80013d8:	080022ac 	.word	0x080022ac
 80013dc:	080022ac 	.word	0x080022ac
 80013e0:	080022ac 	.word	0x080022ac
 80013e4:	080022b0 	.word	0x080022b0

080013e8 <iprintf>:
 80013e8:	b40f      	push	{r0, r1, r2, r3}
 80013ea:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <iprintf+0x2c>)
 80013ec:	b513      	push	{r0, r1, r4, lr}
 80013ee:	681c      	ldr	r4, [r3, #0]
 80013f0:	b124      	cbz	r4, 80013fc <iprintf+0x14>
 80013f2:	69a3      	ldr	r3, [r4, #24]
 80013f4:	b913      	cbnz	r3, 80013fc <iprintf+0x14>
 80013f6:	4620      	mov	r0, r4
 80013f8:	f000 f84e 	bl	8001498 <__sinit>
 80013fc:	ab05      	add	r3, sp, #20
 80013fe:	9a04      	ldr	r2, [sp, #16]
 8001400:	68a1      	ldr	r1, [r4, #8]
 8001402:	9301      	str	r3, [sp, #4]
 8001404:	4620      	mov	r0, r4
 8001406:	f000 f9af 	bl	8001768 <_vfiprintf_r>
 800140a:	b002      	add	sp, #8
 800140c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001410:	b004      	add	sp, #16
 8001412:	4770      	bx	lr
 8001414:	2000001c 	.word	0x2000001c

08001418 <_cleanup_r>:
 8001418:	4901      	ldr	r1, [pc, #4]	; (8001420 <_cleanup_r+0x8>)
 800141a:	f000 b8a9 	b.w	8001570 <_fwalk_reent>
 800141e:	bf00      	nop
 8001420:	0800203d 	.word	0x0800203d

08001424 <std.isra.0>:
 8001424:	2300      	movs	r3, #0
 8001426:	b510      	push	{r4, lr}
 8001428:	4604      	mov	r4, r0
 800142a:	6003      	str	r3, [r0, #0]
 800142c:	6043      	str	r3, [r0, #4]
 800142e:	6083      	str	r3, [r0, #8]
 8001430:	8181      	strh	r1, [r0, #12]
 8001432:	6643      	str	r3, [r0, #100]	; 0x64
 8001434:	81c2      	strh	r2, [r0, #14]
 8001436:	6103      	str	r3, [r0, #16]
 8001438:	6143      	str	r3, [r0, #20]
 800143a:	6183      	str	r3, [r0, #24]
 800143c:	4619      	mov	r1, r3
 800143e:	2208      	movs	r2, #8
 8001440:	305c      	adds	r0, #92	; 0x5c
 8001442:	f000 f8b3 	bl	80015ac <memset>
 8001446:	4b05      	ldr	r3, [pc, #20]	; (800145c <std.isra.0+0x38>)
 8001448:	6263      	str	r3, [r4, #36]	; 0x24
 800144a:	4b05      	ldr	r3, [pc, #20]	; (8001460 <std.isra.0+0x3c>)
 800144c:	62a3      	str	r3, [r4, #40]	; 0x28
 800144e:	4b05      	ldr	r3, [pc, #20]	; (8001464 <std.isra.0+0x40>)
 8001450:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001452:	4b05      	ldr	r3, [pc, #20]	; (8001468 <std.isra.0+0x44>)
 8001454:	6224      	str	r4, [r4, #32]
 8001456:	6323      	str	r3, [r4, #48]	; 0x30
 8001458:	bd10      	pop	{r4, pc}
 800145a:	bf00      	nop
 800145c:	08001ce1 	.word	0x08001ce1
 8001460:	08001d03 	.word	0x08001d03
 8001464:	08001d3b 	.word	0x08001d3b
 8001468:	08001d5f 	.word	0x08001d5f

0800146c <__sfmoreglue>:
 800146c:	b570      	push	{r4, r5, r6, lr}
 800146e:	1e4a      	subs	r2, r1, #1
 8001470:	2568      	movs	r5, #104	; 0x68
 8001472:	4355      	muls	r5, r2
 8001474:	460e      	mov	r6, r1
 8001476:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800147a:	f000 f8ed 	bl	8001658 <_malloc_r>
 800147e:	4604      	mov	r4, r0
 8001480:	b140      	cbz	r0, 8001494 <__sfmoreglue+0x28>
 8001482:	2100      	movs	r1, #0
 8001484:	e880 0042 	stmia.w	r0, {r1, r6}
 8001488:	300c      	adds	r0, #12
 800148a:	60a0      	str	r0, [r4, #8]
 800148c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001490:	f000 f88c 	bl	80015ac <memset>
 8001494:	4620      	mov	r0, r4
 8001496:	bd70      	pop	{r4, r5, r6, pc}

08001498 <__sinit>:
 8001498:	6983      	ldr	r3, [r0, #24]
 800149a:	b510      	push	{r4, lr}
 800149c:	4604      	mov	r4, r0
 800149e:	bb33      	cbnz	r3, 80014ee <__sinit+0x56>
 80014a0:	6483      	str	r3, [r0, #72]	; 0x48
 80014a2:	64c3      	str	r3, [r0, #76]	; 0x4c
 80014a4:	6503      	str	r3, [r0, #80]	; 0x50
 80014a6:	4b12      	ldr	r3, [pc, #72]	; (80014f0 <__sinit+0x58>)
 80014a8:	4a12      	ldr	r2, [pc, #72]	; (80014f4 <__sinit+0x5c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	6282      	str	r2, [r0, #40]	; 0x28
 80014ae:	4298      	cmp	r0, r3
 80014b0:	bf04      	itt	eq
 80014b2:	2301      	moveq	r3, #1
 80014b4:	6183      	streq	r3, [r0, #24]
 80014b6:	f000 f81f 	bl	80014f8 <__sfp>
 80014ba:	6060      	str	r0, [r4, #4]
 80014bc:	4620      	mov	r0, r4
 80014be:	f000 f81b 	bl	80014f8 <__sfp>
 80014c2:	60a0      	str	r0, [r4, #8]
 80014c4:	4620      	mov	r0, r4
 80014c6:	f000 f817 	bl	80014f8 <__sfp>
 80014ca:	2200      	movs	r2, #0
 80014cc:	60e0      	str	r0, [r4, #12]
 80014ce:	2104      	movs	r1, #4
 80014d0:	6860      	ldr	r0, [r4, #4]
 80014d2:	f7ff ffa7 	bl	8001424 <std.isra.0>
 80014d6:	2201      	movs	r2, #1
 80014d8:	2109      	movs	r1, #9
 80014da:	68a0      	ldr	r0, [r4, #8]
 80014dc:	f7ff ffa2 	bl	8001424 <std.isra.0>
 80014e0:	2202      	movs	r2, #2
 80014e2:	2112      	movs	r1, #18
 80014e4:	68e0      	ldr	r0, [r4, #12]
 80014e6:	f7ff ff9d 	bl	8001424 <std.isra.0>
 80014ea:	2301      	movs	r3, #1
 80014ec:	61a3      	str	r3, [r4, #24]
 80014ee:	bd10      	pop	{r4, pc}
 80014f0:	08002274 	.word	0x08002274
 80014f4:	08001419 	.word	0x08001419

080014f8 <__sfp>:
 80014f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014fa:	4b1c      	ldr	r3, [pc, #112]	; (800156c <__sfp+0x74>)
 80014fc:	681e      	ldr	r6, [r3, #0]
 80014fe:	69b3      	ldr	r3, [r6, #24]
 8001500:	4607      	mov	r7, r0
 8001502:	b913      	cbnz	r3, 800150a <__sfp+0x12>
 8001504:	4630      	mov	r0, r6
 8001506:	f7ff ffc7 	bl	8001498 <__sinit>
 800150a:	3648      	adds	r6, #72	; 0x48
 800150c:	68b4      	ldr	r4, [r6, #8]
 800150e:	6873      	ldr	r3, [r6, #4]
 8001510:	3b01      	subs	r3, #1
 8001512:	d503      	bpl.n	800151c <__sfp+0x24>
 8001514:	6833      	ldr	r3, [r6, #0]
 8001516:	b133      	cbz	r3, 8001526 <__sfp+0x2e>
 8001518:	6836      	ldr	r6, [r6, #0]
 800151a:	e7f7      	b.n	800150c <__sfp+0x14>
 800151c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001520:	b16d      	cbz	r5, 800153e <__sfp+0x46>
 8001522:	3468      	adds	r4, #104	; 0x68
 8001524:	e7f4      	b.n	8001510 <__sfp+0x18>
 8001526:	2104      	movs	r1, #4
 8001528:	4638      	mov	r0, r7
 800152a:	f7ff ff9f 	bl	800146c <__sfmoreglue>
 800152e:	6030      	str	r0, [r6, #0]
 8001530:	2800      	cmp	r0, #0
 8001532:	d1f1      	bne.n	8001518 <__sfp+0x20>
 8001534:	230c      	movs	r3, #12
 8001536:	603b      	str	r3, [r7, #0]
 8001538:	4604      	mov	r4, r0
 800153a:	4620      	mov	r0, r4
 800153c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800153e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001542:	81e3      	strh	r3, [r4, #14]
 8001544:	2301      	movs	r3, #1
 8001546:	81a3      	strh	r3, [r4, #12]
 8001548:	6665      	str	r5, [r4, #100]	; 0x64
 800154a:	6025      	str	r5, [r4, #0]
 800154c:	60a5      	str	r5, [r4, #8]
 800154e:	6065      	str	r5, [r4, #4]
 8001550:	6125      	str	r5, [r4, #16]
 8001552:	6165      	str	r5, [r4, #20]
 8001554:	61a5      	str	r5, [r4, #24]
 8001556:	2208      	movs	r2, #8
 8001558:	4629      	mov	r1, r5
 800155a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800155e:	f000 f825 	bl	80015ac <memset>
 8001562:	6365      	str	r5, [r4, #52]	; 0x34
 8001564:	63a5      	str	r5, [r4, #56]	; 0x38
 8001566:	64a5      	str	r5, [r4, #72]	; 0x48
 8001568:	64e5      	str	r5, [r4, #76]	; 0x4c
 800156a:	e7e6      	b.n	800153a <__sfp+0x42>
 800156c:	08002274 	.word	0x08002274

08001570 <_fwalk_reent>:
 8001570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001574:	4680      	mov	r8, r0
 8001576:	4689      	mov	r9, r1
 8001578:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800157c:	2600      	movs	r6, #0
 800157e:	b914      	cbnz	r4, 8001586 <_fwalk_reent+0x16>
 8001580:	4630      	mov	r0, r6
 8001582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001586:	68a5      	ldr	r5, [r4, #8]
 8001588:	6867      	ldr	r7, [r4, #4]
 800158a:	3f01      	subs	r7, #1
 800158c:	d501      	bpl.n	8001592 <_fwalk_reent+0x22>
 800158e:	6824      	ldr	r4, [r4, #0]
 8001590:	e7f5      	b.n	800157e <_fwalk_reent+0xe>
 8001592:	89ab      	ldrh	r3, [r5, #12]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d907      	bls.n	80015a8 <_fwalk_reent+0x38>
 8001598:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800159c:	3301      	adds	r3, #1
 800159e:	d003      	beq.n	80015a8 <_fwalk_reent+0x38>
 80015a0:	4629      	mov	r1, r5
 80015a2:	4640      	mov	r0, r8
 80015a4:	47c8      	blx	r9
 80015a6:	4306      	orrs	r6, r0
 80015a8:	3568      	adds	r5, #104	; 0x68
 80015aa:	e7ee      	b.n	800158a <_fwalk_reent+0x1a>

080015ac <memset>:
 80015ac:	4402      	add	r2, r0
 80015ae:	4603      	mov	r3, r0
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d100      	bne.n	80015b6 <memset+0xa>
 80015b4:	4770      	bx	lr
 80015b6:	f803 1b01 	strb.w	r1, [r3], #1
 80015ba:	e7f9      	b.n	80015b0 <memset+0x4>

080015bc <_free_r>:
 80015bc:	b538      	push	{r3, r4, r5, lr}
 80015be:	4605      	mov	r5, r0
 80015c0:	2900      	cmp	r1, #0
 80015c2:	d045      	beq.n	8001650 <_free_r+0x94>
 80015c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80015c8:	1f0c      	subs	r4, r1, #4
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	bfb8      	it	lt
 80015ce:	18e4      	addlt	r4, r4, r3
 80015d0:	f000 fdd4 	bl	800217c <__malloc_lock>
 80015d4:	4a1f      	ldr	r2, [pc, #124]	; (8001654 <_free_r+0x98>)
 80015d6:	6813      	ldr	r3, [r2, #0]
 80015d8:	4610      	mov	r0, r2
 80015da:	b933      	cbnz	r3, 80015ea <_free_r+0x2e>
 80015dc:	6063      	str	r3, [r4, #4]
 80015de:	6014      	str	r4, [r2, #0]
 80015e0:	4628      	mov	r0, r5
 80015e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80015e6:	f000 bdca 	b.w	800217e <__malloc_unlock>
 80015ea:	42a3      	cmp	r3, r4
 80015ec:	d90c      	bls.n	8001608 <_free_r+0x4c>
 80015ee:	6821      	ldr	r1, [r4, #0]
 80015f0:	1862      	adds	r2, r4, r1
 80015f2:	4293      	cmp	r3, r2
 80015f4:	bf04      	itt	eq
 80015f6:	681a      	ldreq	r2, [r3, #0]
 80015f8:	685b      	ldreq	r3, [r3, #4]
 80015fa:	6063      	str	r3, [r4, #4]
 80015fc:	bf04      	itt	eq
 80015fe:	1852      	addeq	r2, r2, r1
 8001600:	6022      	streq	r2, [r4, #0]
 8001602:	6004      	str	r4, [r0, #0]
 8001604:	e7ec      	b.n	80015e0 <_free_r+0x24>
 8001606:	4613      	mov	r3, r2
 8001608:	685a      	ldr	r2, [r3, #4]
 800160a:	b10a      	cbz	r2, 8001610 <_free_r+0x54>
 800160c:	42a2      	cmp	r2, r4
 800160e:	d9fa      	bls.n	8001606 <_free_r+0x4a>
 8001610:	6819      	ldr	r1, [r3, #0]
 8001612:	1858      	adds	r0, r3, r1
 8001614:	42a0      	cmp	r0, r4
 8001616:	d10b      	bne.n	8001630 <_free_r+0x74>
 8001618:	6820      	ldr	r0, [r4, #0]
 800161a:	4401      	add	r1, r0
 800161c:	1858      	adds	r0, r3, r1
 800161e:	4282      	cmp	r2, r0
 8001620:	6019      	str	r1, [r3, #0]
 8001622:	d1dd      	bne.n	80015e0 <_free_r+0x24>
 8001624:	6810      	ldr	r0, [r2, #0]
 8001626:	6852      	ldr	r2, [r2, #4]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	4401      	add	r1, r0
 800162c:	6019      	str	r1, [r3, #0]
 800162e:	e7d7      	b.n	80015e0 <_free_r+0x24>
 8001630:	d902      	bls.n	8001638 <_free_r+0x7c>
 8001632:	230c      	movs	r3, #12
 8001634:	602b      	str	r3, [r5, #0]
 8001636:	e7d3      	b.n	80015e0 <_free_r+0x24>
 8001638:	6820      	ldr	r0, [r4, #0]
 800163a:	1821      	adds	r1, r4, r0
 800163c:	428a      	cmp	r2, r1
 800163e:	bf04      	itt	eq
 8001640:	6811      	ldreq	r1, [r2, #0]
 8001642:	6852      	ldreq	r2, [r2, #4]
 8001644:	6062      	str	r2, [r4, #4]
 8001646:	bf04      	itt	eq
 8001648:	1809      	addeq	r1, r1, r0
 800164a:	6021      	streq	r1, [r4, #0]
 800164c:	605c      	str	r4, [r3, #4]
 800164e:	e7c7      	b.n	80015e0 <_free_r+0x24>
 8001650:	bd38      	pop	{r3, r4, r5, pc}
 8001652:	bf00      	nop
 8001654:	200000a0 	.word	0x200000a0

08001658 <_malloc_r>:
 8001658:	b570      	push	{r4, r5, r6, lr}
 800165a:	1ccd      	adds	r5, r1, #3
 800165c:	f025 0503 	bic.w	r5, r5, #3
 8001660:	3508      	adds	r5, #8
 8001662:	2d0c      	cmp	r5, #12
 8001664:	bf38      	it	cc
 8001666:	250c      	movcc	r5, #12
 8001668:	2d00      	cmp	r5, #0
 800166a:	4606      	mov	r6, r0
 800166c:	db01      	blt.n	8001672 <_malloc_r+0x1a>
 800166e:	42a9      	cmp	r1, r5
 8001670:	d903      	bls.n	800167a <_malloc_r+0x22>
 8001672:	230c      	movs	r3, #12
 8001674:	6033      	str	r3, [r6, #0]
 8001676:	2000      	movs	r0, #0
 8001678:	bd70      	pop	{r4, r5, r6, pc}
 800167a:	f000 fd7f 	bl	800217c <__malloc_lock>
 800167e:	4a23      	ldr	r2, [pc, #140]	; (800170c <_malloc_r+0xb4>)
 8001680:	6814      	ldr	r4, [r2, #0]
 8001682:	4621      	mov	r1, r4
 8001684:	b991      	cbnz	r1, 80016ac <_malloc_r+0x54>
 8001686:	4c22      	ldr	r4, [pc, #136]	; (8001710 <_malloc_r+0xb8>)
 8001688:	6823      	ldr	r3, [r4, #0]
 800168a:	b91b      	cbnz	r3, 8001694 <_malloc_r+0x3c>
 800168c:	4630      	mov	r0, r6
 800168e:	f000 fb17 	bl	8001cc0 <_sbrk_r>
 8001692:	6020      	str	r0, [r4, #0]
 8001694:	4629      	mov	r1, r5
 8001696:	4630      	mov	r0, r6
 8001698:	f000 fb12 	bl	8001cc0 <_sbrk_r>
 800169c:	1c43      	adds	r3, r0, #1
 800169e:	d126      	bne.n	80016ee <_malloc_r+0x96>
 80016a0:	230c      	movs	r3, #12
 80016a2:	6033      	str	r3, [r6, #0]
 80016a4:	4630      	mov	r0, r6
 80016a6:	f000 fd6a 	bl	800217e <__malloc_unlock>
 80016aa:	e7e4      	b.n	8001676 <_malloc_r+0x1e>
 80016ac:	680b      	ldr	r3, [r1, #0]
 80016ae:	1b5b      	subs	r3, r3, r5
 80016b0:	d41a      	bmi.n	80016e8 <_malloc_r+0x90>
 80016b2:	2b0b      	cmp	r3, #11
 80016b4:	d90f      	bls.n	80016d6 <_malloc_r+0x7e>
 80016b6:	600b      	str	r3, [r1, #0]
 80016b8:	50cd      	str	r5, [r1, r3]
 80016ba:	18cc      	adds	r4, r1, r3
 80016bc:	4630      	mov	r0, r6
 80016be:	f000 fd5e 	bl	800217e <__malloc_unlock>
 80016c2:	f104 000b 	add.w	r0, r4, #11
 80016c6:	1d23      	adds	r3, r4, #4
 80016c8:	f020 0007 	bic.w	r0, r0, #7
 80016cc:	1ac3      	subs	r3, r0, r3
 80016ce:	d01b      	beq.n	8001708 <_malloc_r+0xb0>
 80016d0:	425a      	negs	r2, r3
 80016d2:	50e2      	str	r2, [r4, r3]
 80016d4:	bd70      	pop	{r4, r5, r6, pc}
 80016d6:	428c      	cmp	r4, r1
 80016d8:	bf0d      	iteet	eq
 80016da:	6863      	ldreq	r3, [r4, #4]
 80016dc:	684b      	ldrne	r3, [r1, #4]
 80016de:	6063      	strne	r3, [r4, #4]
 80016e0:	6013      	streq	r3, [r2, #0]
 80016e2:	bf18      	it	ne
 80016e4:	460c      	movne	r4, r1
 80016e6:	e7e9      	b.n	80016bc <_malloc_r+0x64>
 80016e8:	460c      	mov	r4, r1
 80016ea:	6849      	ldr	r1, [r1, #4]
 80016ec:	e7ca      	b.n	8001684 <_malloc_r+0x2c>
 80016ee:	1cc4      	adds	r4, r0, #3
 80016f0:	f024 0403 	bic.w	r4, r4, #3
 80016f4:	42a0      	cmp	r0, r4
 80016f6:	d005      	beq.n	8001704 <_malloc_r+0xac>
 80016f8:	1a21      	subs	r1, r4, r0
 80016fa:	4630      	mov	r0, r6
 80016fc:	f000 fae0 	bl	8001cc0 <_sbrk_r>
 8001700:	3001      	adds	r0, #1
 8001702:	d0cd      	beq.n	80016a0 <_malloc_r+0x48>
 8001704:	6025      	str	r5, [r4, #0]
 8001706:	e7d9      	b.n	80016bc <_malloc_r+0x64>
 8001708:	bd70      	pop	{r4, r5, r6, pc}
 800170a:	bf00      	nop
 800170c:	200000a0 	.word	0x200000a0
 8001710:	200000a4 	.word	0x200000a4

08001714 <__sfputc_r>:
 8001714:	6893      	ldr	r3, [r2, #8]
 8001716:	3b01      	subs	r3, #1
 8001718:	2b00      	cmp	r3, #0
 800171a:	b410      	push	{r4}
 800171c:	6093      	str	r3, [r2, #8]
 800171e:	da09      	bge.n	8001734 <__sfputc_r+0x20>
 8001720:	6994      	ldr	r4, [r2, #24]
 8001722:	42a3      	cmp	r3, r4
 8001724:	db02      	blt.n	800172c <__sfputc_r+0x18>
 8001726:	b2cb      	uxtb	r3, r1
 8001728:	2b0a      	cmp	r3, #10
 800172a:	d103      	bne.n	8001734 <__sfputc_r+0x20>
 800172c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001730:	f000 bb1a 	b.w	8001d68 <__swbuf_r>
 8001734:	6813      	ldr	r3, [r2, #0]
 8001736:	1c58      	adds	r0, r3, #1
 8001738:	6010      	str	r0, [r2, #0]
 800173a:	7019      	strb	r1, [r3, #0]
 800173c:	b2c8      	uxtb	r0, r1
 800173e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001742:	4770      	bx	lr

08001744 <__sfputs_r>:
 8001744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001746:	4606      	mov	r6, r0
 8001748:	460f      	mov	r7, r1
 800174a:	4614      	mov	r4, r2
 800174c:	18d5      	adds	r5, r2, r3
 800174e:	42ac      	cmp	r4, r5
 8001750:	d101      	bne.n	8001756 <__sfputs_r+0x12>
 8001752:	2000      	movs	r0, #0
 8001754:	e007      	b.n	8001766 <__sfputs_r+0x22>
 8001756:	463a      	mov	r2, r7
 8001758:	f814 1b01 	ldrb.w	r1, [r4], #1
 800175c:	4630      	mov	r0, r6
 800175e:	f7ff ffd9 	bl	8001714 <__sfputc_r>
 8001762:	1c43      	adds	r3, r0, #1
 8001764:	d1f3      	bne.n	800174e <__sfputs_r+0xa>
 8001766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001768 <_vfiprintf_r>:
 8001768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800176c:	b09d      	sub	sp, #116	; 0x74
 800176e:	460c      	mov	r4, r1
 8001770:	4617      	mov	r7, r2
 8001772:	9303      	str	r3, [sp, #12]
 8001774:	4606      	mov	r6, r0
 8001776:	b118      	cbz	r0, 8001780 <_vfiprintf_r+0x18>
 8001778:	6983      	ldr	r3, [r0, #24]
 800177a:	b90b      	cbnz	r3, 8001780 <_vfiprintf_r+0x18>
 800177c:	f7ff fe8c 	bl	8001498 <__sinit>
 8001780:	4b7c      	ldr	r3, [pc, #496]	; (8001974 <_vfiprintf_r+0x20c>)
 8001782:	429c      	cmp	r4, r3
 8001784:	d157      	bne.n	8001836 <_vfiprintf_r+0xce>
 8001786:	6874      	ldr	r4, [r6, #4]
 8001788:	89a3      	ldrh	r3, [r4, #12]
 800178a:	0718      	lsls	r0, r3, #28
 800178c:	d55d      	bpl.n	800184a <_vfiprintf_r+0xe2>
 800178e:	6923      	ldr	r3, [r4, #16]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d05a      	beq.n	800184a <_vfiprintf_r+0xe2>
 8001794:	2300      	movs	r3, #0
 8001796:	9309      	str	r3, [sp, #36]	; 0x24
 8001798:	2320      	movs	r3, #32
 800179a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800179e:	2330      	movs	r3, #48	; 0x30
 80017a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80017a4:	f04f 0b01 	mov.w	fp, #1
 80017a8:	46b8      	mov	r8, r7
 80017aa:	4645      	mov	r5, r8
 80017ac:	f815 3b01 	ldrb.w	r3, [r5], #1
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d155      	bne.n	8001860 <_vfiprintf_r+0xf8>
 80017b4:	ebb8 0a07 	subs.w	sl, r8, r7
 80017b8:	d00b      	beq.n	80017d2 <_vfiprintf_r+0x6a>
 80017ba:	4653      	mov	r3, sl
 80017bc:	463a      	mov	r2, r7
 80017be:	4621      	mov	r1, r4
 80017c0:	4630      	mov	r0, r6
 80017c2:	f7ff ffbf 	bl	8001744 <__sfputs_r>
 80017c6:	3001      	adds	r0, #1
 80017c8:	f000 80c4 	beq.w	8001954 <_vfiprintf_r+0x1ec>
 80017cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80017ce:	4453      	add	r3, sl
 80017d0:	9309      	str	r3, [sp, #36]	; 0x24
 80017d2:	f898 3000 	ldrb.w	r3, [r8]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f000 80bc 	beq.w	8001954 <_vfiprintf_r+0x1ec>
 80017dc:	2300      	movs	r3, #0
 80017de:	f04f 32ff 	mov.w	r2, #4294967295
 80017e2:	9304      	str	r3, [sp, #16]
 80017e4:	9307      	str	r3, [sp, #28]
 80017e6:	9205      	str	r2, [sp, #20]
 80017e8:	9306      	str	r3, [sp, #24]
 80017ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80017ee:	931a      	str	r3, [sp, #104]	; 0x68
 80017f0:	2205      	movs	r2, #5
 80017f2:	7829      	ldrb	r1, [r5, #0]
 80017f4:	4860      	ldr	r0, [pc, #384]	; (8001978 <_vfiprintf_r+0x210>)
 80017f6:	f7fe fcfb 	bl	80001f0 <memchr>
 80017fa:	f105 0801 	add.w	r8, r5, #1
 80017fe:	9b04      	ldr	r3, [sp, #16]
 8001800:	2800      	cmp	r0, #0
 8001802:	d131      	bne.n	8001868 <_vfiprintf_r+0x100>
 8001804:	06d9      	lsls	r1, r3, #27
 8001806:	bf44      	itt	mi
 8001808:	2220      	movmi	r2, #32
 800180a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800180e:	071a      	lsls	r2, r3, #28
 8001810:	bf44      	itt	mi
 8001812:	222b      	movmi	r2, #43	; 0x2b
 8001814:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001818:	782a      	ldrb	r2, [r5, #0]
 800181a:	2a2a      	cmp	r2, #42	; 0x2a
 800181c:	d02c      	beq.n	8001878 <_vfiprintf_r+0x110>
 800181e:	9a07      	ldr	r2, [sp, #28]
 8001820:	2100      	movs	r1, #0
 8001822:	200a      	movs	r0, #10
 8001824:	46a8      	mov	r8, r5
 8001826:	3501      	adds	r5, #1
 8001828:	f898 3000 	ldrb.w	r3, [r8]
 800182c:	3b30      	subs	r3, #48	; 0x30
 800182e:	2b09      	cmp	r3, #9
 8001830:	d96d      	bls.n	800190e <_vfiprintf_r+0x1a6>
 8001832:	b371      	cbz	r1, 8001892 <_vfiprintf_r+0x12a>
 8001834:	e026      	b.n	8001884 <_vfiprintf_r+0x11c>
 8001836:	4b51      	ldr	r3, [pc, #324]	; (800197c <_vfiprintf_r+0x214>)
 8001838:	429c      	cmp	r4, r3
 800183a:	d101      	bne.n	8001840 <_vfiprintf_r+0xd8>
 800183c:	68b4      	ldr	r4, [r6, #8]
 800183e:	e7a3      	b.n	8001788 <_vfiprintf_r+0x20>
 8001840:	4b4f      	ldr	r3, [pc, #316]	; (8001980 <_vfiprintf_r+0x218>)
 8001842:	429c      	cmp	r4, r3
 8001844:	bf08      	it	eq
 8001846:	68f4      	ldreq	r4, [r6, #12]
 8001848:	e79e      	b.n	8001788 <_vfiprintf_r+0x20>
 800184a:	4621      	mov	r1, r4
 800184c:	4630      	mov	r0, r6
 800184e:	f000 faef 	bl	8001e30 <__swsetup_r>
 8001852:	2800      	cmp	r0, #0
 8001854:	d09e      	beq.n	8001794 <_vfiprintf_r+0x2c>
 8001856:	f04f 30ff 	mov.w	r0, #4294967295
 800185a:	b01d      	add	sp, #116	; 0x74
 800185c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001860:	2b25      	cmp	r3, #37	; 0x25
 8001862:	d0a7      	beq.n	80017b4 <_vfiprintf_r+0x4c>
 8001864:	46a8      	mov	r8, r5
 8001866:	e7a0      	b.n	80017aa <_vfiprintf_r+0x42>
 8001868:	4a43      	ldr	r2, [pc, #268]	; (8001978 <_vfiprintf_r+0x210>)
 800186a:	1a80      	subs	r0, r0, r2
 800186c:	fa0b f000 	lsl.w	r0, fp, r0
 8001870:	4318      	orrs	r0, r3
 8001872:	9004      	str	r0, [sp, #16]
 8001874:	4645      	mov	r5, r8
 8001876:	e7bb      	b.n	80017f0 <_vfiprintf_r+0x88>
 8001878:	9a03      	ldr	r2, [sp, #12]
 800187a:	1d11      	adds	r1, r2, #4
 800187c:	6812      	ldr	r2, [r2, #0]
 800187e:	9103      	str	r1, [sp, #12]
 8001880:	2a00      	cmp	r2, #0
 8001882:	db01      	blt.n	8001888 <_vfiprintf_r+0x120>
 8001884:	9207      	str	r2, [sp, #28]
 8001886:	e004      	b.n	8001892 <_vfiprintf_r+0x12a>
 8001888:	4252      	negs	r2, r2
 800188a:	f043 0302 	orr.w	r3, r3, #2
 800188e:	9207      	str	r2, [sp, #28]
 8001890:	9304      	str	r3, [sp, #16]
 8001892:	f898 3000 	ldrb.w	r3, [r8]
 8001896:	2b2e      	cmp	r3, #46	; 0x2e
 8001898:	d110      	bne.n	80018bc <_vfiprintf_r+0x154>
 800189a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800189e:	2b2a      	cmp	r3, #42	; 0x2a
 80018a0:	f108 0101 	add.w	r1, r8, #1
 80018a4:	d137      	bne.n	8001916 <_vfiprintf_r+0x1ae>
 80018a6:	9b03      	ldr	r3, [sp, #12]
 80018a8:	1d1a      	adds	r2, r3, #4
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	9203      	str	r2, [sp, #12]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	bfb8      	it	lt
 80018b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80018b6:	f108 0802 	add.w	r8, r8, #2
 80018ba:	9305      	str	r3, [sp, #20]
 80018bc:	4d31      	ldr	r5, [pc, #196]	; (8001984 <_vfiprintf_r+0x21c>)
 80018be:	f898 1000 	ldrb.w	r1, [r8]
 80018c2:	2203      	movs	r2, #3
 80018c4:	4628      	mov	r0, r5
 80018c6:	f7fe fc93 	bl	80001f0 <memchr>
 80018ca:	b140      	cbz	r0, 80018de <_vfiprintf_r+0x176>
 80018cc:	2340      	movs	r3, #64	; 0x40
 80018ce:	1b40      	subs	r0, r0, r5
 80018d0:	fa03 f000 	lsl.w	r0, r3, r0
 80018d4:	9b04      	ldr	r3, [sp, #16]
 80018d6:	4303      	orrs	r3, r0
 80018d8:	9304      	str	r3, [sp, #16]
 80018da:	f108 0801 	add.w	r8, r8, #1
 80018de:	f898 1000 	ldrb.w	r1, [r8]
 80018e2:	4829      	ldr	r0, [pc, #164]	; (8001988 <_vfiprintf_r+0x220>)
 80018e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80018e8:	2206      	movs	r2, #6
 80018ea:	f108 0701 	add.w	r7, r8, #1
 80018ee:	f7fe fc7f 	bl	80001f0 <memchr>
 80018f2:	2800      	cmp	r0, #0
 80018f4:	d034      	beq.n	8001960 <_vfiprintf_r+0x1f8>
 80018f6:	4b25      	ldr	r3, [pc, #148]	; (800198c <_vfiprintf_r+0x224>)
 80018f8:	bb03      	cbnz	r3, 800193c <_vfiprintf_r+0x1d4>
 80018fa:	9b03      	ldr	r3, [sp, #12]
 80018fc:	3307      	adds	r3, #7
 80018fe:	f023 0307 	bic.w	r3, r3, #7
 8001902:	3308      	adds	r3, #8
 8001904:	9303      	str	r3, [sp, #12]
 8001906:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001908:	444b      	add	r3, r9
 800190a:	9309      	str	r3, [sp, #36]	; 0x24
 800190c:	e74c      	b.n	80017a8 <_vfiprintf_r+0x40>
 800190e:	fb00 3202 	mla	r2, r0, r2, r3
 8001912:	2101      	movs	r1, #1
 8001914:	e786      	b.n	8001824 <_vfiprintf_r+0xbc>
 8001916:	2300      	movs	r3, #0
 8001918:	9305      	str	r3, [sp, #20]
 800191a:	4618      	mov	r0, r3
 800191c:	250a      	movs	r5, #10
 800191e:	4688      	mov	r8, r1
 8001920:	3101      	adds	r1, #1
 8001922:	f898 2000 	ldrb.w	r2, [r8]
 8001926:	3a30      	subs	r2, #48	; 0x30
 8001928:	2a09      	cmp	r2, #9
 800192a:	d903      	bls.n	8001934 <_vfiprintf_r+0x1cc>
 800192c:	2b00      	cmp	r3, #0
 800192e:	d0c5      	beq.n	80018bc <_vfiprintf_r+0x154>
 8001930:	9005      	str	r0, [sp, #20]
 8001932:	e7c3      	b.n	80018bc <_vfiprintf_r+0x154>
 8001934:	fb05 2000 	mla	r0, r5, r0, r2
 8001938:	2301      	movs	r3, #1
 800193a:	e7f0      	b.n	800191e <_vfiprintf_r+0x1b6>
 800193c:	ab03      	add	r3, sp, #12
 800193e:	9300      	str	r3, [sp, #0]
 8001940:	4622      	mov	r2, r4
 8001942:	4b13      	ldr	r3, [pc, #76]	; (8001990 <_vfiprintf_r+0x228>)
 8001944:	a904      	add	r1, sp, #16
 8001946:	4630      	mov	r0, r6
 8001948:	f3af 8000 	nop.w
 800194c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001950:	4681      	mov	r9, r0
 8001952:	d1d8      	bne.n	8001906 <_vfiprintf_r+0x19e>
 8001954:	89a3      	ldrh	r3, [r4, #12]
 8001956:	065b      	lsls	r3, r3, #25
 8001958:	f53f af7d 	bmi.w	8001856 <_vfiprintf_r+0xee>
 800195c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800195e:	e77c      	b.n	800185a <_vfiprintf_r+0xf2>
 8001960:	ab03      	add	r3, sp, #12
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	4622      	mov	r2, r4
 8001966:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <_vfiprintf_r+0x228>)
 8001968:	a904      	add	r1, sp, #16
 800196a:	4630      	mov	r0, r6
 800196c:	f000 f888 	bl	8001a80 <_printf_i>
 8001970:	e7ec      	b.n	800194c <_vfiprintf_r+0x1e4>
 8001972:	bf00      	nop
 8001974:	08002234 	.word	0x08002234
 8001978:	08002278 	.word	0x08002278
 800197c:	08002254 	.word	0x08002254
 8001980:	08002214 	.word	0x08002214
 8001984:	0800227e 	.word	0x0800227e
 8001988:	08002282 	.word	0x08002282
 800198c:	00000000 	.word	0x00000000
 8001990:	08001745 	.word	0x08001745

08001994 <_printf_common>:
 8001994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001998:	4691      	mov	r9, r2
 800199a:	461f      	mov	r7, r3
 800199c:	688a      	ldr	r2, [r1, #8]
 800199e:	690b      	ldr	r3, [r1, #16]
 80019a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80019a4:	4293      	cmp	r3, r2
 80019a6:	bfb8      	it	lt
 80019a8:	4613      	movlt	r3, r2
 80019aa:	f8c9 3000 	str.w	r3, [r9]
 80019ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80019b2:	4606      	mov	r6, r0
 80019b4:	460c      	mov	r4, r1
 80019b6:	b112      	cbz	r2, 80019be <_printf_common+0x2a>
 80019b8:	3301      	adds	r3, #1
 80019ba:	f8c9 3000 	str.w	r3, [r9]
 80019be:	6823      	ldr	r3, [r4, #0]
 80019c0:	0699      	lsls	r1, r3, #26
 80019c2:	bf42      	ittt	mi
 80019c4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80019c8:	3302      	addmi	r3, #2
 80019ca:	f8c9 3000 	strmi.w	r3, [r9]
 80019ce:	6825      	ldr	r5, [r4, #0]
 80019d0:	f015 0506 	ands.w	r5, r5, #6
 80019d4:	d107      	bne.n	80019e6 <_printf_common+0x52>
 80019d6:	f104 0a19 	add.w	sl, r4, #25
 80019da:	68e3      	ldr	r3, [r4, #12]
 80019dc:	f8d9 2000 	ldr.w	r2, [r9]
 80019e0:	1a9b      	subs	r3, r3, r2
 80019e2:	429d      	cmp	r5, r3
 80019e4:	db29      	blt.n	8001a3a <_printf_common+0xa6>
 80019e6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80019ea:	6822      	ldr	r2, [r4, #0]
 80019ec:	3300      	adds	r3, #0
 80019ee:	bf18      	it	ne
 80019f0:	2301      	movne	r3, #1
 80019f2:	0692      	lsls	r2, r2, #26
 80019f4:	d42e      	bmi.n	8001a54 <_printf_common+0xc0>
 80019f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80019fa:	4639      	mov	r1, r7
 80019fc:	4630      	mov	r0, r6
 80019fe:	47c0      	blx	r8
 8001a00:	3001      	adds	r0, #1
 8001a02:	d021      	beq.n	8001a48 <_printf_common+0xb4>
 8001a04:	6823      	ldr	r3, [r4, #0]
 8001a06:	68e5      	ldr	r5, [r4, #12]
 8001a08:	f8d9 2000 	ldr.w	r2, [r9]
 8001a0c:	f003 0306 	and.w	r3, r3, #6
 8001a10:	2b04      	cmp	r3, #4
 8001a12:	bf08      	it	eq
 8001a14:	1aad      	subeq	r5, r5, r2
 8001a16:	68a3      	ldr	r3, [r4, #8]
 8001a18:	6922      	ldr	r2, [r4, #16]
 8001a1a:	bf0c      	ite	eq
 8001a1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001a20:	2500      	movne	r5, #0
 8001a22:	4293      	cmp	r3, r2
 8001a24:	bfc4      	itt	gt
 8001a26:	1a9b      	subgt	r3, r3, r2
 8001a28:	18ed      	addgt	r5, r5, r3
 8001a2a:	f04f 0900 	mov.w	r9, #0
 8001a2e:	341a      	adds	r4, #26
 8001a30:	454d      	cmp	r5, r9
 8001a32:	d11b      	bne.n	8001a6c <_printf_common+0xd8>
 8001a34:	2000      	movs	r0, #0
 8001a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	4652      	mov	r2, sl
 8001a3e:	4639      	mov	r1, r7
 8001a40:	4630      	mov	r0, r6
 8001a42:	47c0      	blx	r8
 8001a44:	3001      	adds	r0, #1
 8001a46:	d103      	bne.n	8001a50 <_printf_common+0xbc>
 8001a48:	f04f 30ff 	mov.w	r0, #4294967295
 8001a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a50:	3501      	adds	r5, #1
 8001a52:	e7c2      	b.n	80019da <_printf_common+0x46>
 8001a54:	18e1      	adds	r1, r4, r3
 8001a56:	1c5a      	adds	r2, r3, #1
 8001a58:	2030      	movs	r0, #48	; 0x30
 8001a5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001a5e:	4422      	add	r2, r4
 8001a60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001a64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001a68:	3302      	adds	r3, #2
 8001a6a:	e7c4      	b.n	80019f6 <_printf_common+0x62>
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	4622      	mov	r2, r4
 8001a70:	4639      	mov	r1, r7
 8001a72:	4630      	mov	r0, r6
 8001a74:	47c0      	blx	r8
 8001a76:	3001      	adds	r0, #1
 8001a78:	d0e6      	beq.n	8001a48 <_printf_common+0xb4>
 8001a7a:	f109 0901 	add.w	r9, r9, #1
 8001a7e:	e7d7      	b.n	8001a30 <_printf_common+0x9c>

08001a80 <_printf_i>:
 8001a80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a84:	4617      	mov	r7, r2
 8001a86:	7e0a      	ldrb	r2, [r1, #24]
 8001a88:	b085      	sub	sp, #20
 8001a8a:	2a6e      	cmp	r2, #110	; 0x6e
 8001a8c:	4698      	mov	r8, r3
 8001a8e:	4606      	mov	r6, r0
 8001a90:	460c      	mov	r4, r1
 8001a92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001a94:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8001a98:	f000 80bc 	beq.w	8001c14 <_printf_i+0x194>
 8001a9c:	d81a      	bhi.n	8001ad4 <_printf_i+0x54>
 8001a9e:	2a63      	cmp	r2, #99	; 0x63
 8001aa0:	d02e      	beq.n	8001b00 <_printf_i+0x80>
 8001aa2:	d80a      	bhi.n	8001aba <_printf_i+0x3a>
 8001aa4:	2a00      	cmp	r2, #0
 8001aa6:	f000 80c8 	beq.w	8001c3a <_printf_i+0x1ba>
 8001aaa:	2a58      	cmp	r2, #88	; 0x58
 8001aac:	f000 808a 	beq.w	8001bc4 <_printf_i+0x144>
 8001ab0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001ab4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8001ab8:	e02a      	b.n	8001b10 <_printf_i+0x90>
 8001aba:	2a64      	cmp	r2, #100	; 0x64
 8001abc:	d001      	beq.n	8001ac2 <_printf_i+0x42>
 8001abe:	2a69      	cmp	r2, #105	; 0x69
 8001ac0:	d1f6      	bne.n	8001ab0 <_printf_i+0x30>
 8001ac2:	6821      	ldr	r1, [r4, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001aca:	d023      	beq.n	8001b14 <_printf_i+0x94>
 8001acc:	1d11      	adds	r1, r2, #4
 8001ace:	6019      	str	r1, [r3, #0]
 8001ad0:	6813      	ldr	r3, [r2, #0]
 8001ad2:	e027      	b.n	8001b24 <_printf_i+0xa4>
 8001ad4:	2a73      	cmp	r2, #115	; 0x73
 8001ad6:	f000 80b4 	beq.w	8001c42 <_printf_i+0x1c2>
 8001ada:	d808      	bhi.n	8001aee <_printf_i+0x6e>
 8001adc:	2a6f      	cmp	r2, #111	; 0x6f
 8001ade:	d02a      	beq.n	8001b36 <_printf_i+0xb6>
 8001ae0:	2a70      	cmp	r2, #112	; 0x70
 8001ae2:	d1e5      	bne.n	8001ab0 <_printf_i+0x30>
 8001ae4:	680a      	ldr	r2, [r1, #0]
 8001ae6:	f042 0220 	orr.w	r2, r2, #32
 8001aea:	600a      	str	r2, [r1, #0]
 8001aec:	e003      	b.n	8001af6 <_printf_i+0x76>
 8001aee:	2a75      	cmp	r2, #117	; 0x75
 8001af0:	d021      	beq.n	8001b36 <_printf_i+0xb6>
 8001af2:	2a78      	cmp	r2, #120	; 0x78
 8001af4:	d1dc      	bne.n	8001ab0 <_printf_i+0x30>
 8001af6:	2278      	movs	r2, #120	; 0x78
 8001af8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8001afc:	496e      	ldr	r1, [pc, #440]	; (8001cb8 <_printf_i+0x238>)
 8001afe:	e064      	b.n	8001bca <_printf_i+0x14a>
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8001b06:	1d11      	adds	r1, r2, #4
 8001b08:	6019      	str	r1, [r3, #0]
 8001b0a:	6813      	ldr	r3, [r2, #0]
 8001b0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001b10:	2301      	movs	r3, #1
 8001b12:	e0a3      	b.n	8001c5c <_printf_i+0x1dc>
 8001b14:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001b18:	f102 0104 	add.w	r1, r2, #4
 8001b1c:	6019      	str	r1, [r3, #0]
 8001b1e:	d0d7      	beq.n	8001ad0 <_printf_i+0x50>
 8001b20:	f9b2 3000 	ldrsh.w	r3, [r2]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	da03      	bge.n	8001b30 <_printf_i+0xb0>
 8001b28:	222d      	movs	r2, #45	; 0x2d
 8001b2a:	425b      	negs	r3, r3
 8001b2c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001b30:	4962      	ldr	r1, [pc, #392]	; (8001cbc <_printf_i+0x23c>)
 8001b32:	220a      	movs	r2, #10
 8001b34:	e017      	b.n	8001b66 <_printf_i+0xe6>
 8001b36:	6820      	ldr	r0, [r4, #0]
 8001b38:	6819      	ldr	r1, [r3, #0]
 8001b3a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001b3e:	d003      	beq.n	8001b48 <_printf_i+0xc8>
 8001b40:	1d08      	adds	r0, r1, #4
 8001b42:	6018      	str	r0, [r3, #0]
 8001b44:	680b      	ldr	r3, [r1, #0]
 8001b46:	e006      	b.n	8001b56 <_printf_i+0xd6>
 8001b48:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001b4c:	f101 0004 	add.w	r0, r1, #4
 8001b50:	6018      	str	r0, [r3, #0]
 8001b52:	d0f7      	beq.n	8001b44 <_printf_i+0xc4>
 8001b54:	880b      	ldrh	r3, [r1, #0]
 8001b56:	4959      	ldr	r1, [pc, #356]	; (8001cbc <_printf_i+0x23c>)
 8001b58:	2a6f      	cmp	r2, #111	; 0x6f
 8001b5a:	bf14      	ite	ne
 8001b5c:	220a      	movne	r2, #10
 8001b5e:	2208      	moveq	r2, #8
 8001b60:	2000      	movs	r0, #0
 8001b62:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8001b66:	6865      	ldr	r5, [r4, #4]
 8001b68:	60a5      	str	r5, [r4, #8]
 8001b6a:	2d00      	cmp	r5, #0
 8001b6c:	f2c0 809c 	blt.w	8001ca8 <_printf_i+0x228>
 8001b70:	6820      	ldr	r0, [r4, #0]
 8001b72:	f020 0004 	bic.w	r0, r0, #4
 8001b76:	6020      	str	r0, [r4, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d13f      	bne.n	8001bfc <_printf_i+0x17c>
 8001b7c:	2d00      	cmp	r5, #0
 8001b7e:	f040 8095 	bne.w	8001cac <_printf_i+0x22c>
 8001b82:	4675      	mov	r5, lr
 8001b84:	2a08      	cmp	r2, #8
 8001b86:	d10b      	bne.n	8001ba0 <_printf_i+0x120>
 8001b88:	6823      	ldr	r3, [r4, #0]
 8001b8a:	07da      	lsls	r2, r3, #31
 8001b8c:	d508      	bpl.n	8001ba0 <_printf_i+0x120>
 8001b8e:	6923      	ldr	r3, [r4, #16]
 8001b90:	6862      	ldr	r2, [r4, #4]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	bfde      	ittt	le
 8001b96:	2330      	movle	r3, #48	; 0x30
 8001b98:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001b9c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001ba0:	ebae 0305 	sub.w	r3, lr, r5
 8001ba4:	6123      	str	r3, [r4, #16]
 8001ba6:	f8cd 8000 	str.w	r8, [sp]
 8001baa:	463b      	mov	r3, r7
 8001bac:	aa03      	add	r2, sp, #12
 8001bae:	4621      	mov	r1, r4
 8001bb0:	4630      	mov	r0, r6
 8001bb2:	f7ff feef 	bl	8001994 <_printf_common>
 8001bb6:	3001      	adds	r0, #1
 8001bb8:	d155      	bne.n	8001c66 <_printf_i+0x1e6>
 8001bba:	f04f 30ff 	mov.w	r0, #4294967295
 8001bbe:	b005      	add	sp, #20
 8001bc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001bc4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8001bc8:	493c      	ldr	r1, [pc, #240]	; (8001cbc <_printf_i+0x23c>)
 8001bca:	6822      	ldr	r2, [r4, #0]
 8001bcc:	6818      	ldr	r0, [r3, #0]
 8001bce:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001bd2:	f100 0504 	add.w	r5, r0, #4
 8001bd6:	601d      	str	r5, [r3, #0]
 8001bd8:	d001      	beq.n	8001bde <_printf_i+0x15e>
 8001bda:	6803      	ldr	r3, [r0, #0]
 8001bdc:	e002      	b.n	8001be4 <_printf_i+0x164>
 8001bde:	0655      	lsls	r5, r2, #25
 8001be0:	d5fb      	bpl.n	8001bda <_printf_i+0x15a>
 8001be2:	8803      	ldrh	r3, [r0, #0]
 8001be4:	07d0      	lsls	r0, r2, #31
 8001be6:	bf44      	itt	mi
 8001be8:	f042 0220 	orrmi.w	r2, r2, #32
 8001bec:	6022      	strmi	r2, [r4, #0]
 8001bee:	b91b      	cbnz	r3, 8001bf8 <_printf_i+0x178>
 8001bf0:	6822      	ldr	r2, [r4, #0]
 8001bf2:	f022 0220 	bic.w	r2, r2, #32
 8001bf6:	6022      	str	r2, [r4, #0]
 8001bf8:	2210      	movs	r2, #16
 8001bfa:	e7b1      	b.n	8001b60 <_printf_i+0xe0>
 8001bfc:	4675      	mov	r5, lr
 8001bfe:	fbb3 f0f2 	udiv	r0, r3, r2
 8001c02:	fb02 3310 	mls	r3, r2, r0, r3
 8001c06:	5ccb      	ldrb	r3, [r1, r3]
 8001c08:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2800      	cmp	r0, #0
 8001c10:	d1f5      	bne.n	8001bfe <_printf_i+0x17e>
 8001c12:	e7b7      	b.n	8001b84 <_printf_i+0x104>
 8001c14:	6808      	ldr	r0, [r1, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	6949      	ldr	r1, [r1, #20]
 8001c1a:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001c1e:	d004      	beq.n	8001c2a <_printf_i+0x1aa>
 8001c20:	1d10      	adds	r0, r2, #4
 8001c22:	6018      	str	r0, [r3, #0]
 8001c24:	6813      	ldr	r3, [r2, #0]
 8001c26:	6019      	str	r1, [r3, #0]
 8001c28:	e007      	b.n	8001c3a <_printf_i+0x1ba>
 8001c2a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001c2e:	f102 0004 	add.w	r0, r2, #4
 8001c32:	6018      	str	r0, [r3, #0]
 8001c34:	6813      	ldr	r3, [r2, #0]
 8001c36:	d0f6      	beq.n	8001c26 <_printf_i+0x1a6>
 8001c38:	8019      	strh	r1, [r3, #0]
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	6123      	str	r3, [r4, #16]
 8001c3e:	4675      	mov	r5, lr
 8001c40:	e7b1      	b.n	8001ba6 <_printf_i+0x126>
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	1d11      	adds	r1, r2, #4
 8001c46:	6019      	str	r1, [r3, #0]
 8001c48:	6815      	ldr	r5, [r2, #0]
 8001c4a:	6862      	ldr	r2, [r4, #4]
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	4628      	mov	r0, r5
 8001c50:	f7fe face 	bl	80001f0 <memchr>
 8001c54:	b108      	cbz	r0, 8001c5a <_printf_i+0x1da>
 8001c56:	1b40      	subs	r0, r0, r5
 8001c58:	6060      	str	r0, [r4, #4]
 8001c5a:	6863      	ldr	r3, [r4, #4]
 8001c5c:	6123      	str	r3, [r4, #16]
 8001c5e:	2300      	movs	r3, #0
 8001c60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001c64:	e79f      	b.n	8001ba6 <_printf_i+0x126>
 8001c66:	6923      	ldr	r3, [r4, #16]
 8001c68:	462a      	mov	r2, r5
 8001c6a:	4639      	mov	r1, r7
 8001c6c:	4630      	mov	r0, r6
 8001c6e:	47c0      	blx	r8
 8001c70:	3001      	adds	r0, #1
 8001c72:	d0a2      	beq.n	8001bba <_printf_i+0x13a>
 8001c74:	6823      	ldr	r3, [r4, #0]
 8001c76:	079b      	lsls	r3, r3, #30
 8001c78:	d507      	bpl.n	8001c8a <_printf_i+0x20a>
 8001c7a:	2500      	movs	r5, #0
 8001c7c:	f104 0919 	add.w	r9, r4, #25
 8001c80:	68e3      	ldr	r3, [r4, #12]
 8001c82:	9a03      	ldr	r2, [sp, #12]
 8001c84:	1a9b      	subs	r3, r3, r2
 8001c86:	429d      	cmp	r5, r3
 8001c88:	db05      	blt.n	8001c96 <_printf_i+0x216>
 8001c8a:	68e0      	ldr	r0, [r4, #12]
 8001c8c:	9b03      	ldr	r3, [sp, #12]
 8001c8e:	4298      	cmp	r0, r3
 8001c90:	bfb8      	it	lt
 8001c92:	4618      	movlt	r0, r3
 8001c94:	e793      	b.n	8001bbe <_printf_i+0x13e>
 8001c96:	2301      	movs	r3, #1
 8001c98:	464a      	mov	r2, r9
 8001c9a:	4639      	mov	r1, r7
 8001c9c:	4630      	mov	r0, r6
 8001c9e:	47c0      	blx	r8
 8001ca0:	3001      	adds	r0, #1
 8001ca2:	d08a      	beq.n	8001bba <_printf_i+0x13a>
 8001ca4:	3501      	adds	r5, #1
 8001ca6:	e7eb      	b.n	8001c80 <_printf_i+0x200>
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1a7      	bne.n	8001bfc <_printf_i+0x17c>
 8001cac:	780b      	ldrb	r3, [r1, #0]
 8001cae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001cb2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001cb6:	e765      	b.n	8001b84 <_printf_i+0x104>
 8001cb8:	0800229a 	.word	0x0800229a
 8001cbc:	08002289 	.word	0x08002289

08001cc0 <_sbrk_r>:
 8001cc0:	b538      	push	{r3, r4, r5, lr}
 8001cc2:	4c06      	ldr	r4, [pc, #24]	; (8001cdc <_sbrk_r+0x1c>)
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	4605      	mov	r5, r0
 8001cc8:	4608      	mov	r0, r1
 8001cca:	6023      	str	r3, [r4, #0]
 8001ccc:	f7ff fa3a 	bl	8001144 <_sbrk>
 8001cd0:	1c43      	adds	r3, r0, #1
 8001cd2:	d102      	bne.n	8001cda <_sbrk_r+0x1a>
 8001cd4:	6823      	ldr	r3, [r4, #0]
 8001cd6:	b103      	cbz	r3, 8001cda <_sbrk_r+0x1a>
 8001cd8:	602b      	str	r3, [r5, #0]
 8001cda:	bd38      	pop	{r3, r4, r5, pc}
 8001cdc:	200000b4 	.word	0x200000b4

08001ce0 <__sread>:
 8001ce0:	b510      	push	{r4, lr}
 8001ce2:	460c      	mov	r4, r1
 8001ce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ce8:	f000 fa4a 	bl	8002180 <_read_r>
 8001cec:	2800      	cmp	r0, #0
 8001cee:	bfab      	itete	ge
 8001cf0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001cf2:	89a3      	ldrhlt	r3, [r4, #12]
 8001cf4:	181b      	addge	r3, r3, r0
 8001cf6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001cfa:	bfac      	ite	ge
 8001cfc:	6563      	strge	r3, [r4, #84]	; 0x54
 8001cfe:	81a3      	strhlt	r3, [r4, #12]
 8001d00:	bd10      	pop	{r4, pc}

08001d02 <__swrite>:
 8001d02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d06:	461f      	mov	r7, r3
 8001d08:	898b      	ldrh	r3, [r1, #12]
 8001d0a:	05db      	lsls	r3, r3, #23
 8001d0c:	4605      	mov	r5, r0
 8001d0e:	460c      	mov	r4, r1
 8001d10:	4616      	mov	r6, r2
 8001d12:	d505      	bpl.n	8001d20 <__swrite+0x1e>
 8001d14:	2302      	movs	r3, #2
 8001d16:	2200      	movs	r2, #0
 8001d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d1c:	f000 f9b8 	bl	8002090 <_lseek_r>
 8001d20:	89a3      	ldrh	r3, [r4, #12]
 8001d22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001d26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d2a:	81a3      	strh	r3, [r4, #12]
 8001d2c:	4632      	mov	r2, r6
 8001d2e:	463b      	mov	r3, r7
 8001d30:	4628      	mov	r0, r5
 8001d32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001d36:	f000 b869 	b.w	8001e0c <_write_r>

08001d3a <__sseek>:
 8001d3a:	b510      	push	{r4, lr}
 8001d3c:	460c      	mov	r4, r1
 8001d3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d42:	f000 f9a5 	bl	8002090 <_lseek_r>
 8001d46:	1c43      	adds	r3, r0, #1
 8001d48:	89a3      	ldrh	r3, [r4, #12]
 8001d4a:	bf15      	itete	ne
 8001d4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8001d4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001d52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001d56:	81a3      	strheq	r3, [r4, #12]
 8001d58:	bf18      	it	ne
 8001d5a:	81a3      	strhne	r3, [r4, #12]
 8001d5c:	bd10      	pop	{r4, pc}

08001d5e <__sclose>:
 8001d5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d62:	f000 b8d3 	b.w	8001f0c <_close_r>
	...

08001d68 <__swbuf_r>:
 8001d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d6a:	460e      	mov	r6, r1
 8001d6c:	4614      	mov	r4, r2
 8001d6e:	4605      	mov	r5, r0
 8001d70:	b118      	cbz	r0, 8001d7a <__swbuf_r+0x12>
 8001d72:	6983      	ldr	r3, [r0, #24]
 8001d74:	b90b      	cbnz	r3, 8001d7a <__swbuf_r+0x12>
 8001d76:	f7ff fb8f 	bl	8001498 <__sinit>
 8001d7a:	4b21      	ldr	r3, [pc, #132]	; (8001e00 <__swbuf_r+0x98>)
 8001d7c:	429c      	cmp	r4, r3
 8001d7e:	d12a      	bne.n	8001dd6 <__swbuf_r+0x6e>
 8001d80:	686c      	ldr	r4, [r5, #4]
 8001d82:	69a3      	ldr	r3, [r4, #24]
 8001d84:	60a3      	str	r3, [r4, #8]
 8001d86:	89a3      	ldrh	r3, [r4, #12]
 8001d88:	071a      	lsls	r2, r3, #28
 8001d8a:	d52e      	bpl.n	8001dea <__swbuf_r+0x82>
 8001d8c:	6923      	ldr	r3, [r4, #16]
 8001d8e:	b363      	cbz	r3, 8001dea <__swbuf_r+0x82>
 8001d90:	6923      	ldr	r3, [r4, #16]
 8001d92:	6820      	ldr	r0, [r4, #0]
 8001d94:	1ac0      	subs	r0, r0, r3
 8001d96:	6963      	ldr	r3, [r4, #20]
 8001d98:	b2f6      	uxtb	r6, r6
 8001d9a:	4298      	cmp	r0, r3
 8001d9c:	4637      	mov	r7, r6
 8001d9e:	db04      	blt.n	8001daa <__swbuf_r+0x42>
 8001da0:	4621      	mov	r1, r4
 8001da2:	4628      	mov	r0, r5
 8001da4:	f000 f94a 	bl	800203c <_fflush_r>
 8001da8:	bb28      	cbnz	r0, 8001df6 <__swbuf_r+0x8e>
 8001daa:	68a3      	ldr	r3, [r4, #8]
 8001dac:	3b01      	subs	r3, #1
 8001dae:	60a3      	str	r3, [r4, #8]
 8001db0:	6823      	ldr	r3, [r4, #0]
 8001db2:	1c5a      	adds	r2, r3, #1
 8001db4:	6022      	str	r2, [r4, #0]
 8001db6:	701e      	strb	r6, [r3, #0]
 8001db8:	6963      	ldr	r3, [r4, #20]
 8001dba:	3001      	adds	r0, #1
 8001dbc:	4298      	cmp	r0, r3
 8001dbe:	d004      	beq.n	8001dca <__swbuf_r+0x62>
 8001dc0:	89a3      	ldrh	r3, [r4, #12]
 8001dc2:	07db      	lsls	r3, r3, #31
 8001dc4:	d519      	bpl.n	8001dfa <__swbuf_r+0x92>
 8001dc6:	2e0a      	cmp	r6, #10
 8001dc8:	d117      	bne.n	8001dfa <__swbuf_r+0x92>
 8001dca:	4621      	mov	r1, r4
 8001dcc:	4628      	mov	r0, r5
 8001dce:	f000 f935 	bl	800203c <_fflush_r>
 8001dd2:	b190      	cbz	r0, 8001dfa <__swbuf_r+0x92>
 8001dd4:	e00f      	b.n	8001df6 <__swbuf_r+0x8e>
 8001dd6:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <__swbuf_r+0x9c>)
 8001dd8:	429c      	cmp	r4, r3
 8001dda:	d101      	bne.n	8001de0 <__swbuf_r+0x78>
 8001ddc:	68ac      	ldr	r4, [r5, #8]
 8001dde:	e7d0      	b.n	8001d82 <__swbuf_r+0x1a>
 8001de0:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <__swbuf_r+0xa0>)
 8001de2:	429c      	cmp	r4, r3
 8001de4:	bf08      	it	eq
 8001de6:	68ec      	ldreq	r4, [r5, #12]
 8001de8:	e7cb      	b.n	8001d82 <__swbuf_r+0x1a>
 8001dea:	4621      	mov	r1, r4
 8001dec:	4628      	mov	r0, r5
 8001dee:	f000 f81f 	bl	8001e30 <__swsetup_r>
 8001df2:	2800      	cmp	r0, #0
 8001df4:	d0cc      	beq.n	8001d90 <__swbuf_r+0x28>
 8001df6:	f04f 37ff 	mov.w	r7, #4294967295
 8001dfa:	4638      	mov	r0, r7
 8001dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	08002234 	.word	0x08002234
 8001e04:	08002254 	.word	0x08002254
 8001e08:	08002214 	.word	0x08002214

08001e0c <_write_r>:
 8001e0c:	b538      	push	{r3, r4, r5, lr}
 8001e0e:	4c07      	ldr	r4, [pc, #28]	; (8001e2c <_write_r+0x20>)
 8001e10:	4605      	mov	r5, r0
 8001e12:	4608      	mov	r0, r1
 8001e14:	4611      	mov	r1, r2
 8001e16:	2200      	movs	r2, #0
 8001e18:	6022      	str	r2, [r4, #0]
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	f7ff f964 	bl	80010e8 <_write>
 8001e20:	1c43      	adds	r3, r0, #1
 8001e22:	d102      	bne.n	8001e2a <_write_r+0x1e>
 8001e24:	6823      	ldr	r3, [r4, #0]
 8001e26:	b103      	cbz	r3, 8001e2a <_write_r+0x1e>
 8001e28:	602b      	str	r3, [r5, #0]
 8001e2a:	bd38      	pop	{r3, r4, r5, pc}
 8001e2c:	200000b4 	.word	0x200000b4

08001e30 <__swsetup_r>:
 8001e30:	4b32      	ldr	r3, [pc, #200]	; (8001efc <__swsetup_r+0xcc>)
 8001e32:	b570      	push	{r4, r5, r6, lr}
 8001e34:	681d      	ldr	r5, [r3, #0]
 8001e36:	4606      	mov	r6, r0
 8001e38:	460c      	mov	r4, r1
 8001e3a:	b125      	cbz	r5, 8001e46 <__swsetup_r+0x16>
 8001e3c:	69ab      	ldr	r3, [r5, #24]
 8001e3e:	b913      	cbnz	r3, 8001e46 <__swsetup_r+0x16>
 8001e40:	4628      	mov	r0, r5
 8001e42:	f7ff fb29 	bl	8001498 <__sinit>
 8001e46:	4b2e      	ldr	r3, [pc, #184]	; (8001f00 <__swsetup_r+0xd0>)
 8001e48:	429c      	cmp	r4, r3
 8001e4a:	d10f      	bne.n	8001e6c <__swsetup_r+0x3c>
 8001e4c:	686c      	ldr	r4, [r5, #4]
 8001e4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	0715      	lsls	r5, r2, #28
 8001e56:	d42c      	bmi.n	8001eb2 <__swsetup_r+0x82>
 8001e58:	06d0      	lsls	r0, r2, #27
 8001e5a:	d411      	bmi.n	8001e80 <__swsetup_r+0x50>
 8001e5c:	2209      	movs	r2, #9
 8001e5e:	6032      	str	r2, [r6, #0]
 8001e60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e64:	81a3      	strh	r3, [r4, #12]
 8001e66:	f04f 30ff 	mov.w	r0, #4294967295
 8001e6a:	bd70      	pop	{r4, r5, r6, pc}
 8001e6c:	4b25      	ldr	r3, [pc, #148]	; (8001f04 <__swsetup_r+0xd4>)
 8001e6e:	429c      	cmp	r4, r3
 8001e70:	d101      	bne.n	8001e76 <__swsetup_r+0x46>
 8001e72:	68ac      	ldr	r4, [r5, #8]
 8001e74:	e7eb      	b.n	8001e4e <__swsetup_r+0x1e>
 8001e76:	4b24      	ldr	r3, [pc, #144]	; (8001f08 <__swsetup_r+0xd8>)
 8001e78:	429c      	cmp	r4, r3
 8001e7a:	bf08      	it	eq
 8001e7c:	68ec      	ldreq	r4, [r5, #12]
 8001e7e:	e7e6      	b.n	8001e4e <__swsetup_r+0x1e>
 8001e80:	0751      	lsls	r1, r2, #29
 8001e82:	d512      	bpl.n	8001eaa <__swsetup_r+0x7a>
 8001e84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001e86:	b141      	cbz	r1, 8001e9a <__swsetup_r+0x6a>
 8001e88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001e8c:	4299      	cmp	r1, r3
 8001e8e:	d002      	beq.n	8001e96 <__swsetup_r+0x66>
 8001e90:	4630      	mov	r0, r6
 8001e92:	f7ff fb93 	bl	80015bc <_free_r>
 8001e96:	2300      	movs	r3, #0
 8001e98:	6363      	str	r3, [r4, #52]	; 0x34
 8001e9a:	89a3      	ldrh	r3, [r4, #12]
 8001e9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001ea0:	81a3      	strh	r3, [r4, #12]
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	6063      	str	r3, [r4, #4]
 8001ea6:	6923      	ldr	r3, [r4, #16]
 8001ea8:	6023      	str	r3, [r4, #0]
 8001eaa:	89a3      	ldrh	r3, [r4, #12]
 8001eac:	f043 0308 	orr.w	r3, r3, #8
 8001eb0:	81a3      	strh	r3, [r4, #12]
 8001eb2:	6923      	ldr	r3, [r4, #16]
 8001eb4:	b94b      	cbnz	r3, 8001eca <__swsetup_r+0x9a>
 8001eb6:	89a3      	ldrh	r3, [r4, #12]
 8001eb8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001ebc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ec0:	d003      	beq.n	8001eca <__swsetup_r+0x9a>
 8001ec2:	4621      	mov	r1, r4
 8001ec4:	4630      	mov	r0, r6
 8001ec6:	f000 f919 	bl	80020fc <__smakebuf_r>
 8001eca:	89a2      	ldrh	r2, [r4, #12]
 8001ecc:	f012 0301 	ands.w	r3, r2, #1
 8001ed0:	d00c      	beq.n	8001eec <__swsetup_r+0xbc>
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60a3      	str	r3, [r4, #8]
 8001ed6:	6963      	ldr	r3, [r4, #20]
 8001ed8:	425b      	negs	r3, r3
 8001eda:	61a3      	str	r3, [r4, #24]
 8001edc:	6923      	ldr	r3, [r4, #16]
 8001ede:	b953      	cbnz	r3, 8001ef6 <__swsetup_r+0xc6>
 8001ee0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ee4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001ee8:	d1ba      	bne.n	8001e60 <__swsetup_r+0x30>
 8001eea:	bd70      	pop	{r4, r5, r6, pc}
 8001eec:	0792      	lsls	r2, r2, #30
 8001eee:	bf58      	it	pl
 8001ef0:	6963      	ldrpl	r3, [r4, #20]
 8001ef2:	60a3      	str	r3, [r4, #8]
 8001ef4:	e7f2      	b.n	8001edc <__swsetup_r+0xac>
 8001ef6:	2000      	movs	r0, #0
 8001ef8:	e7f7      	b.n	8001eea <__swsetup_r+0xba>
 8001efa:	bf00      	nop
 8001efc:	2000001c 	.word	0x2000001c
 8001f00:	08002234 	.word	0x08002234
 8001f04:	08002254 	.word	0x08002254
 8001f08:	08002214 	.word	0x08002214

08001f0c <_close_r>:
 8001f0c:	b538      	push	{r3, r4, r5, lr}
 8001f0e:	4c06      	ldr	r4, [pc, #24]	; (8001f28 <_close_r+0x1c>)
 8001f10:	2300      	movs	r3, #0
 8001f12:	4605      	mov	r5, r0
 8001f14:	4608      	mov	r0, r1
 8001f16:	6023      	str	r3, [r4, #0]
 8001f18:	f7ff f934 	bl	8001184 <_close>
 8001f1c:	1c43      	adds	r3, r0, #1
 8001f1e:	d102      	bne.n	8001f26 <_close_r+0x1a>
 8001f20:	6823      	ldr	r3, [r4, #0]
 8001f22:	b103      	cbz	r3, 8001f26 <_close_r+0x1a>
 8001f24:	602b      	str	r3, [r5, #0]
 8001f26:	bd38      	pop	{r3, r4, r5, pc}
 8001f28:	200000b4 	.word	0x200000b4

08001f2c <__sflush_r>:
 8001f2c:	898a      	ldrh	r2, [r1, #12]
 8001f2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f32:	4605      	mov	r5, r0
 8001f34:	0710      	lsls	r0, r2, #28
 8001f36:	460c      	mov	r4, r1
 8001f38:	d45a      	bmi.n	8001ff0 <__sflush_r+0xc4>
 8001f3a:	684b      	ldr	r3, [r1, #4]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	dc05      	bgt.n	8001f4c <__sflush_r+0x20>
 8001f40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	dc02      	bgt.n	8001f4c <__sflush_r+0x20>
 8001f46:	2000      	movs	r0, #0
 8001f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001f4e:	2e00      	cmp	r6, #0
 8001f50:	d0f9      	beq.n	8001f46 <__sflush_r+0x1a>
 8001f52:	2300      	movs	r3, #0
 8001f54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001f58:	682f      	ldr	r7, [r5, #0]
 8001f5a:	602b      	str	r3, [r5, #0]
 8001f5c:	d033      	beq.n	8001fc6 <__sflush_r+0x9a>
 8001f5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001f60:	89a3      	ldrh	r3, [r4, #12]
 8001f62:	075a      	lsls	r2, r3, #29
 8001f64:	d505      	bpl.n	8001f72 <__sflush_r+0x46>
 8001f66:	6863      	ldr	r3, [r4, #4]
 8001f68:	1ac0      	subs	r0, r0, r3
 8001f6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001f6c:	b10b      	cbz	r3, 8001f72 <__sflush_r+0x46>
 8001f6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f70:	1ac0      	subs	r0, r0, r3
 8001f72:	2300      	movs	r3, #0
 8001f74:	4602      	mov	r2, r0
 8001f76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001f78:	6a21      	ldr	r1, [r4, #32]
 8001f7a:	4628      	mov	r0, r5
 8001f7c:	47b0      	blx	r6
 8001f7e:	1c43      	adds	r3, r0, #1
 8001f80:	89a3      	ldrh	r3, [r4, #12]
 8001f82:	d106      	bne.n	8001f92 <__sflush_r+0x66>
 8001f84:	6829      	ldr	r1, [r5, #0]
 8001f86:	291d      	cmp	r1, #29
 8001f88:	d84b      	bhi.n	8002022 <__sflush_r+0xf6>
 8001f8a:	4a2b      	ldr	r2, [pc, #172]	; (8002038 <__sflush_r+0x10c>)
 8001f8c:	40ca      	lsrs	r2, r1
 8001f8e:	07d6      	lsls	r6, r2, #31
 8001f90:	d547      	bpl.n	8002022 <__sflush_r+0xf6>
 8001f92:	2200      	movs	r2, #0
 8001f94:	6062      	str	r2, [r4, #4]
 8001f96:	04d9      	lsls	r1, r3, #19
 8001f98:	6922      	ldr	r2, [r4, #16]
 8001f9a:	6022      	str	r2, [r4, #0]
 8001f9c:	d504      	bpl.n	8001fa8 <__sflush_r+0x7c>
 8001f9e:	1c42      	adds	r2, r0, #1
 8001fa0:	d101      	bne.n	8001fa6 <__sflush_r+0x7a>
 8001fa2:	682b      	ldr	r3, [r5, #0]
 8001fa4:	b903      	cbnz	r3, 8001fa8 <__sflush_r+0x7c>
 8001fa6:	6560      	str	r0, [r4, #84]	; 0x54
 8001fa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001faa:	602f      	str	r7, [r5, #0]
 8001fac:	2900      	cmp	r1, #0
 8001fae:	d0ca      	beq.n	8001f46 <__sflush_r+0x1a>
 8001fb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001fb4:	4299      	cmp	r1, r3
 8001fb6:	d002      	beq.n	8001fbe <__sflush_r+0x92>
 8001fb8:	4628      	mov	r0, r5
 8001fba:	f7ff faff 	bl	80015bc <_free_r>
 8001fbe:	2000      	movs	r0, #0
 8001fc0:	6360      	str	r0, [r4, #52]	; 0x34
 8001fc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001fc6:	6a21      	ldr	r1, [r4, #32]
 8001fc8:	2301      	movs	r3, #1
 8001fca:	4628      	mov	r0, r5
 8001fcc:	47b0      	blx	r6
 8001fce:	1c41      	adds	r1, r0, #1
 8001fd0:	d1c6      	bne.n	8001f60 <__sflush_r+0x34>
 8001fd2:	682b      	ldr	r3, [r5, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d0c3      	beq.n	8001f60 <__sflush_r+0x34>
 8001fd8:	2b1d      	cmp	r3, #29
 8001fda:	d001      	beq.n	8001fe0 <__sflush_r+0xb4>
 8001fdc:	2b16      	cmp	r3, #22
 8001fde:	d101      	bne.n	8001fe4 <__sflush_r+0xb8>
 8001fe0:	602f      	str	r7, [r5, #0]
 8001fe2:	e7b0      	b.n	8001f46 <__sflush_r+0x1a>
 8001fe4:	89a3      	ldrh	r3, [r4, #12]
 8001fe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fea:	81a3      	strh	r3, [r4, #12]
 8001fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ff0:	690f      	ldr	r7, [r1, #16]
 8001ff2:	2f00      	cmp	r7, #0
 8001ff4:	d0a7      	beq.n	8001f46 <__sflush_r+0x1a>
 8001ff6:	0793      	lsls	r3, r2, #30
 8001ff8:	680e      	ldr	r6, [r1, #0]
 8001ffa:	bf08      	it	eq
 8001ffc:	694b      	ldreq	r3, [r1, #20]
 8001ffe:	600f      	str	r7, [r1, #0]
 8002000:	bf18      	it	ne
 8002002:	2300      	movne	r3, #0
 8002004:	eba6 0807 	sub.w	r8, r6, r7
 8002008:	608b      	str	r3, [r1, #8]
 800200a:	f1b8 0f00 	cmp.w	r8, #0
 800200e:	dd9a      	ble.n	8001f46 <__sflush_r+0x1a>
 8002010:	4643      	mov	r3, r8
 8002012:	463a      	mov	r2, r7
 8002014:	6a21      	ldr	r1, [r4, #32]
 8002016:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002018:	4628      	mov	r0, r5
 800201a:	47b0      	blx	r6
 800201c:	2800      	cmp	r0, #0
 800201e:	dc07      	bgt.n	8002030 <__sflush_r+0x104>
 8002020:	89a3      	ldrh	r3, [r4, #12]
 8002022:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002026:	81a3      	strh	r3, [r4, #12]
 8002028:	f04f 30ff 	mov.w	r0, #4294967295
 800202c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002030:	4407      	add	r7, r0
 8002032:	eba8 0800 	sub.w	r8, r8, r0
 8002036:	e7e8      	b.n	800200a <__sflush_r+0xde>
 8002038:	20400001 	.word	0x20400001

0800203c <_fflush_r>:
 800203c:	b538      	push	{r3, r4, r5, lr}
 800203e:	690b      	ldr	r3, [r1, #16]
 8002040:	4605      	mov	r5, r0
 8002042:	460c      	mov	r4, r1
 8002044:	b1db      	cbz	r3, 800207e <_fflush_r+0x42>
 8002046:	b118      	cbz	r0, 8002050 <_fflush_r+0x14>
 8002048:	6983      	ldr	r3, [r0, #24]
 800204a:	b90b      	cbnz	r3, 8002050 <_fflush_r+0x14>
 800204c:	f7ff fa24 	bl	8001498 <__sinit>
 8002050:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <_fflush_r+0x48>)
 8002052:	429c      	cmp	r4, r3
 8002054:	d109      	bne.n	800206a <_fflush_r+0x2e>
 8002056:	686c      	ldr	r4, [r5, #4]
 8002058:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800205c:	b17b      	cbz	r3, 800207e <_fflush_r+0x42>
 800205e:	4621      	mov	r1, r4
 8002060:	4628      	mov	r0, r5
 8002062:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002066:	f7ff bf61 	b.w	8001f2c <__sflush_r>
 800206a:	4b07      	ldr	r3, [pc, #28]	; (8002088 <_fflush_r+0x4c>)
 800206c:	429c      	cmp	r4, r3
 800206e:	d101      	bne.n	8002074 <_fflush_r+0x38>
 8002070:	68ac      	ldr	r4, [r5, #8]
 8002072:	e7f1      	b.n	8002058 <_fflush_r+0x1c>
 8002074:	4b05      	ldr	r3, [pc, #20]	; (800208c <_fflush_r+0x50>)
 8002076:	429c      	cmp	r4, r3
 8002078:	bf08      	it	eq
 800207a:	68ec      	ldreq	r4, [r5, #12]
 800207c:	e7ec      	b.n	8002058 <_fflush_r+0x1c>
 800207e:	2000      	movs	r0, #0
 8002080:	bd38      	pop	{r3, r4, r5, pc}
 8002082:	bf00      	nop
 8002084:	08002234 	.word	0x08002234
 8002088:	08002254 	.word	0x08002254
 800208c:	08002214 	.word	0x08002214

08002090 <_lseek_r>:
 8002090:	b538      	push	{r3, r4, r5, lr}
 8002092:	4c07      	ldr	r4, [pc, #28]	; (80020b0 <_lseek_r+0x20>)
 8002094:	4605      	mov	r5, r0
 8002096:	4608      	mov	r0, r1
 8002098:	4611      	mov	r1, r2
 800209a:	2200      	movs	r2, #0
 800209c:	6022      	str	r2, [r4, #0]
 800209e:	461a      	mov	r2, r3
 80020a0:	f7ff f8a4 	bl	80011ec <_lseek>
 80020a4:	1c43      	adds	r3, r0, #1
 80020a6:	d102      	bne.n	80020ae <_lseek_r+0x1e>
 80020a8:	6823      	ldr	r3, [r4, #0]
 80020aa:	b103      	cbz	r3, 80020ae <_lseek_r+0x1e>
 80020ac:	602b      	str	r3, [r5, #0]
 80020ae:	bd38      	pop	{r3, r4, r5, pc}
 80020b0:	200000b4 	.word	0x200000b4

080020b4 <__swhatbuf_r>:
 80020b4:	b570      	push	{r4, r5, r6, lr}
 80020b6:	460e      	mov	r6, r1
 80020b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020bc:	2900      	cmp	r1, #0
 80020be:	b090      	sub	sp, #64	; 0x40
 80020c0:	4614      	mov	r4, r2
 80020c2:	461d      	mov	r5, r3
 80020c4:	da07      	bge.n	80020d6 <__swhatbuf_r+0x22>
 80020c6:	2300      	movs	r3, #0
 80020c8:	602b      	str	r3, [r5, #0]
 80020ca:	89b3      	ldrh	r3, [r6, #12]
 80020cc:	061a      	lsls	r2, r3, #24
 80020ce:	d410      	bmi.n	80020f2 <__swhatbuf_r+0x3e>
 80020d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020d4:	e00e      	b.n	80020f4 <__swhatbuf_r+0x40>
 80020d6:	aa01      	add	r2, sp, #4
 80020d8:	f000 f864 	bl	80021a4 <_fstat_r>
 80020dc:	2800      	cmp	r0, #0
 80020de:	dbf2      	blt.n	80020c6 <__swhatbuf_r+0x12>
 80020e0:	9a02      	ldr	r2, [sp, #8]
 80020e2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80020e6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80020ea:	425a      	negs	r2, r3
 80020ec:	415a      	adcs	r2, r3
 80020ee:	602a      	str	r2, [r5, #0]
 80020f0:	e7ee      	b.n	80020d0 <__swhatbuf_r+0x1c>
 80020f2:	2340      	movs	r3, #64	; 0x40
 80020f4:	2000      	movs	r0, #0
 80020f6:	6023      	str	r3, [r4, #0]
 80020f8:	b010      	add	sp, #64	; 0x40
 80020fa:	bd70      	pop	{r4, r5, r6, pc}

080020fc <__smakebuf_r>:
 80020fc:	898b      	ldrh	r3, [r1, #12]
 80020fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002100:	079d      	lsls	r5, r3, #30
 8002102:	4606      	mov	r6, r0
 8002104:	460c      	mov	r4, r1
 8002106:	d507      	bpl.n	8002118 <__smakebuf_r+0x1c>
 8002108:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800210c:	6023      	str	r3, [r4, #0]
 800210e:	6123      	str	r3, [r4, #16]
 8002110:	2301      	movs	r3, #1
 8002112:	6163      	str	r3, [r4, #20]
 8002114:	b002      	add	sp, #8
 8002116:	bd70      	pop	{r4, r5, r6, pc}
 8002118:	ab01      	add	r3, sp, #4
 800211a:	466a      	mov	r2, sp
 800211c:	f7ff ffca 	bl	80020b4 <__swhatbuf_r>
 8002120:	9900      	ldr	r1, [sp, #0]
 8002122:	4605      	mov	r5, r0
 8002124:	4630      	mov	r0, r6
 8002126:	f7ff fa97 	bl	8001658 <_malloc_r>
 800212a:	b948      	cbnz	r0, 8002140 <__smakebuf_r+0x44>
 800212c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002130:	059a      	lsls	r2, r3, #22
 8002132:	d4ef      	bmi.n	8002114 <__smakebuf_r+0x18>
 8002134:	f023 0303 	bic.w	r3, r3, #3
 8002138:	f043 0302 	orr.w	r3, r3, #2
 800213c:	81a3      	strh	r3, [r4, #12]
 800213e:	e7e3      	b.n	8002108 <__smakebuf_r+0xc>
 8002140:	4b0d      	ldr	r3, [pc, #52]	; (8002178 <__smakebuf_r+0x7c>)
 8002142:	62b3      	str	r3, [r6, #40]	; 0x28
 8002144:	89a3      	ldrh	r3, [r4, #12]
 8002146:	6020      	str	r0, [r4, #0]
 8002148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800214c:	81a3      	strh	r3, [r4, #12]
 800214e:	9b00      	ldr	r3, [sp, #0]
 8002150:	6163      	str	r3, [r4, #20]
 8002152:	9b01      	ldr	r3, [sp, #4]
 8002154:	6120      	str	r0, [r4, #16]
 8002156:	b15b      	cbz	r3, 8002170 <__smakebuf_r+0x74>
 8002158:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800215c:	4630      	mov	r0, r6
 800215e:	f000 f833 	bl	80021c8 <_isatty_r>
 8002162:	b128      	cbz	r0, 8002170 <__smakebuf_r+0x74>
 8002164:	89a3      	ldrh	r3, [r4, #12]
 8002166:	f023 0303 	bic.w	r3, r3, #3
 800216a:	f043 0301 	orr.w	r3, r3, #1
 800216e:	81a3      	strh	r3, [r4, #12]
 8002170:	89a3      	ldrh	r3, [r4, #12]
 8002172:	431d      	orrs	r5, r3
 8002174:	81a5      	strh	r5, [r4, #12]
 8002176:	e7cd      	b.n	8002114 <__smakebuf_r+0x18>
 8002178:	08001419 	.word	0x08001419

0800217c <__malloc_lock>:
 800217c:	4770      	bx	lr

0800217e <__malloc_unlock>:
 800217e:	4770      	bx	lr

08002180 <_read_r>:
 8002180:	b538      	push	{r3, r4, r5, lr}
 8002182:	4c07      	ldr	r4, [pc, #28]	; (80021a0 <_read_r+0x20>)
 8002184:	4605      	mov	r5, r0
 8002186:	4608      	mov	r0, r1
 8002188:	4611      	mov	r1, r2
 800218a:	2200      	movs	r2, #0
 800218c:	6022      	str	r2, [r4, #0]
 800218e:	461a      	mov	r2, r3
 8002190:	f7ff f840 	bl	8001214 <_read>
 8002194:	1c43      	adds	r3, r0, #1
 8002196:	d102      	bne.n	800219e <_read_r+0x1e>
 8002198:	6823      	ldr	r3, [r4, #0]
 800219a:	b103      	cbz	r3, 800219e <_read_r+0x1e>
 800219c:	602b      	str	r3, [r5, #0]
 800219e:	bd38      	pop	{r3, r4, r5, pc}
 80021a0:	200000b4 	.word	0x200000b4

080021a4 <_fstat_r>:
 80021a4:	b538      	push	{r3, r4, r5, lr}
 80021a6:	4c07      	ldr	r4, [pc, #28]	; (80021c4 <_fstat_r+0x20>)
 80021a8:	2300      	movs	r3, #0
 80021aa:	4605      	mov	r5, r0
 80021ac:	4608      	mov	r0, r1
 80021ae:	4611      	mov	r1, r2
 80021b0:	6023      	str	r3, [r4, #0]
 80021b2:	f7fe fff9 	bl	80011a8 <_fstat>
 80021b6:	1c43      	adds	r3, r0, #1
 80021b8:	d102      	bne.n	80021c0 <_fstat_r+0x1c>
 80021ba:	6823      	ldr	r3, [r4, #0]
 80021bc:	b103      	cbz	r3, 80021c0 <_fstat_r+0x1c>
 80021be:	602b      	str	r3, [r5, #0]
 80021c0:	bd38      	pop	{r3, r4, r5, pc}
 80021c2:	bf00      	nop
 80021c4:	200000b4 	.word	0x200000b4

080021c8 <_isatty_r>:
 80021c8:	b538      	push	{r3, r4, r5, lr}
 80021ca:	4c06      	ldr	r4, [pc, #24]	; (80021e4 <_isatty_r+0x1c>)
 80021cc:	2300      	movs	r3, #0
 80021ce:	4605      	mov	r5, r0
 80021d0:	4608      	mov	r0, r1
 80021d2:	6023      	str	r3, [r4, #0]
 80021d4:	f7fe fffa 	bl	80011cc <_isatty>
 80021d8:	1c43      	adds	r3, r0, #1
 80021da:	d102      	bne.n	80021e2 <_isatty_r+0x1a>
 80021dc:	6823      	ldr	r3, [r4, #0]
 80021de:	b103      	cbz	r3, 80021e2 <_isatty_r+0x1a>
 80021e0:	602b      	str	r3, [r5, #0]
 80021e2:	bd38      	pop	{r3, r4, r5, pc}
 80021e4:	200000b4 	.word	0x200000b4

080021e8 <_init>:
 80021e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ea:	bf00      	nop
 80021ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021ee:	bc08      	pop	{r3}
 80021f0:	469e      	mov	lr, r3
 80021f2:	4770      	bx	lr

080021f4 <_fini>:
 80021f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021f6:	bf00      	nop
 80021f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021fa:	bc08      	pop	{r3}
 80021fc:	469e      	mov	lr, r3
 80021fe:	4770      	bx	lr
