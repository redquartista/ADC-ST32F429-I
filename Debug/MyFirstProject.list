
MyFirstProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021cc  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001c20c  08002378  08002378  00012378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0801e584  0801e584  0002e584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0801e588  0801e588  0002e588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000024  20000000  0801e58c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00030024  2**0
                  CONTENTS
  7 .bss          00000030  20000024  20000024  00030024  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000054  20000054  00030024  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00030024  2**0
                  CONTENTS, READONLY
 10 .debug_info   000099e0  00000000  00000000  00030054  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001739  00000000  00000000  00039a34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000bb0  00000000  00000000  0003b170  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ac8  00000000  00000000  0003bd20  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000426a  00000000  00000000  0003c7e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004137  00000000  00000000  00040a52  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00044b89  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003268  00000000  00000000  00044c08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000024 	.word	0x20000024
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002360 	.word	0x08002360

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000028 	.word	0x20000028
 80001e8:	08002360 	.word	0x08002360

080001ec <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b085      	sub	sp, #20
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
 80001f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 80001f6:	2300      	movs	r3, #0
 80001f8:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 80001fa:	2300      	movs	r3, #0
 80001fc:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	685b      	ldr	r3, [r3, #4]
 8000202:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800020a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800020e:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8000210:	683b      	ldr	r3, [r7, #0]
 8000212:	791b      	ldrb	r3, [r3, #4]
 8000214:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 8000216:	683b      	ldr	r3, [r7, #0]
 8000218:	681b      	ldr	r3, [r3, #0]
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 800021a:	4313      	orrs	r3, r2
 800021c:	68fa      	ldr	r2, [r7, #12]
 800021e:	4313      	orrs	r3, r2
 8000220:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	68fa      	ldr	r2, [r7, #12]
 8000226:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	689b      	ldr	r3, [r3, #8]
 800022c:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 800022e:	68fa      	ldr	r2, [r7, #12]
 8000230:	4b18      	ldr	r3, [pc, #96]	; (8000294 <ADC_Init+0xa8>)
 8000232:	4013      	ands	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	68db      	ldr	r3, [r3, #12]
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 800023e:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8000240:	683b      	ldr	r3, [r7, #0]
 8000242:	689b      	ldr	r3, [r3, #8]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000244:	431a      	orrs	r2, r3
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8000246:	683b      	ldr	r3, [r7, #0]
 8000248:	795b      	ldrb	r3, [r3, #5]
 800024a:	005b      	lsls	r3, r3, #1
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 800024c:	4313      	orrs	r3, r2
 800024e:	68fa      	ldr	r2, [r7, #12]
 8000250:	4313      	orrs	r3, r2
 8000252:	60fb      	str	r3, [r7, #12]
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	68fa      	ldr	r2, [r7, #12]
 8000258:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800025e:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000266:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8000268:	683b      	ldr	r3, [r7, #0]
 800026a:	7d1b      	ldrb	r3, [r3, #20]
 800026c:	3b01      	subs	r3, #1
 800026e:	b2da      	uxtb	r2, r3
 8000270:	7afb      	ldrb	r3, [r7, #11]
 8000272:	4313      	orrs	r3, r2
 8000274:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8000276:	7afb      	ldrb	r3, [r7, #11]
 8000278:	051b      	lsls	r3, r3, #20
 800027a:	68fa      	ldr	r2, [r7, #12]
 800027c:	4313      	orrs	r3, r2
 800027e:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	68fa      	ldr	r2, [r7, #12]
 8000284:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000286:	bf00      	nop
 8000288:	3714      	adds	r7, #20
 800028a:	46bd      	mov	sp, r7
 800028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop
 8000294:	c0fff7fd 	.word	0xc0fff7fd

08000298 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8000298:	b480      	push	{r7}
 800029a:	b085      	sub	sp, #20
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 80002a0:	2300      	movs	r3, #0
 80002a2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 80002a4:	4b0e      	ldr	r3, [pc, #56]	; (80002e0 <ADC_CommonInit+0x48>)
 80002a6:	685b      	ldr	r3, [r3, #4]
 80002a8:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 80002aa:	68fa      	ldr	r2, [r7, #12]
 80002ac:	4b0d      	ldr	r3, [pc, #52]	; (80002e4 <ADC_CommonInit+0x4c>)
 80002ae:	4013      	ands	r3, r2
 80002b0:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	685b      	ldr	r3, [r3, #4]
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 80002ba:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	689b      	ldr	r3, [r3, #8]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 80002c0:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	68db      	ldr	r3, [r3, #12]
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 80002c6:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 80002c8:	68fa      	ldr	r2, [r7, #12]
 80002ca:	4313      	orrs	r3, r2
 80002cc:	60fb      	str	r3, [r7, #12]
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 80002ce:	4a04      	ldr	r2, [pc, #16]	; (80002e0 <ADC_CommonInit+0x48>)
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	6053      	str	r3, [r2, #4]
}
 80002d4:	bf00      	nop
 80002d6:	3714      	adds	r7, #20
 80002d8:	46bd      	mov	sp, r7
 80002da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002de:	4770      	bx	lr
 80002e0:	40012300 	.word	0x40012300
 80002e4:	fffc30e0 	.word	0xfffc30e0

080002e8 <ADC_CommonStructInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	2200      	movs	r2, #0
 80002f4:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_Prescaler member */
  ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	2200      	movs	r2, #0
 80002fa:	605a      	str	r2, [r3, #4]

  /* Initialize the ADC_DMAAccessMode member */
  ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	2200      	movs	r2, #0
 8000300:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_TwoSamplingDelay member */
  ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	2200      	movs	r2, #0
 8000306:	60da      	str	r2, [r3, #12]
}
 8000308:	bf00      	nop
 800030a:	370c      	adds	r7, #12
 800030c:	46bd      	mov	sp, r7
 800030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000312:	4770      	bx	lr

08000314 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000314:	b480      	push	{r7}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
 800031c:	460b      	mov	r3, r1
 800031e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000320:	78fb      	ldrb	r3, [r7, #3]
 8000322:	2b00      	cmp	r3, #0
 8000324:	d006      	beq.n	8000334 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	689b      	ldr	r3, [r3, #8]
 800032a:	f043 0201 	orr.w	r2, r3, #1
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 8000332:	e005      	b.n	8000340 <ADC_Cmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	f023 0201 	bic.w	r2, r3, #1
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	609a      	str	r2, [r3, #8]
}
 8000340:	bf00      	nop
 8000342:	370c      	adds	r7, #12
 8000344:	46bd      	mov	sp, r7
 8000346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034a:	4770      	bx	lr

0800034c <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 800034c:	b480      	push	{r7}
 800034e:	b085      	sub	sp, #20
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
 8000354:	4608      	mov	r0, r1
 8000356:	4611      	mov	r1, r2
 8000358:	461a      	mov	r2, r3
 800035a:	4603      	mov	r3, r0
 800035c:	70fb      	strb	r3, [r7, #3]
 800035e:	460b      	mov	r3, r1
 8000360:	70bb      	strb	r3, [r7, #2]
 8000362:	4613      	mov	r3, r2
 8000364:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000366:	2300      	movs	r3, #0
 8000368:	60fb      	str	r3, [r7, #12]
 800036a:	2300      	movs	r3, #0
 800036c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 800036e:	78fb      	ldrb	r3, [r7, #3]
 8000370:	2b09      	cmp	r3, #9
 8000372:	d923      	bls.n	80003bc <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	68db      	ldr	r3, [r3, #12]
 8000378:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 800037a:	78fb      	ldrb	r3, [r7, #3]
 800037c:	f1a3 020a 	sub.w	r2, r3, #10
 8000380:	4613      	mov	r3, r2
 8000382:	005b      	lsls	r3, r3, #1
 8000384:	4413      	add	r3, r2
 8000386:	2207      	movs	r2, #7
 8000388:	fa02 f303 	lsl.w	r3, r2, r3
 800038c:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800038e:	68bb      	ldr	r3, [r7, #8]
 8000390:	43db      	mvns	r3, r3
 8000392:	68fa      	ldr	r2, [r7, #12]
 8000394:	4013      	ands	r3, r2
 8000396:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000398:	7879      	ldrb	r1, [r7, #1]
 800039a:	78fb      	ldrb	r3, [r7, #3]
 800039c:	f1a3 020a 	sub.w	r2, r3, #10
 80003a0:	4613      	mov	r3, r2
 80003a2:	005b      	lsls	r3, r3, #1
 80003a4:	4413      	add	r3, r2
 80003a6:	fa01 f303 	lsl.w	r3, r1, r3
 80003aa:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80003ac:	68fa      	ldr	r2, [r7, #12]
 80003ae:	68bb      	ldr	r3, [r7, #8]
 80003b0:	4313      	orrs	r3, r2
 80003b2:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	68fa      	ldr	r2, [r7, #12]
 80003b8:	60da      	str	r2, [r3, #12]
 80003ba:	e01e      	b.n	80003fa <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	691b      	ldr	r3, [r3, #16]
 80003c0:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 80003c2:	78fa      	ldrb	r2, [r7, #3]
 80003c4:	4613      	mov	r3, r2
 80003c6:	005b      	lsls	r3, r3, #1
 80003c8:	4413      	add	r3, r2
 80003ca:	2207      	movs	r2, #7
 80003cc:	fa02 f303 	lsl.w	r3, r2, r3
 80003d0:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80003d2:	68bb      	ldr	r3, [r7, #8]
 80003d4:	43db      	mvns	r3, r3
 80003d6:	68fa      	ldr	r2, [r7, #12]
 80003d8:	4013      	ands	r3, r2
 80003da:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 80003dc:	7879      	ldrb	r1, [r7, #1]
 80003de:	78fa      	ldrb	r2, [r7, #3]
 80003e0:	4613      	mov	r3, r2
 80003e2:	005b      	lsls	r3, r3, #1
 80003e4:	4413      	add	r3, r2
 80003e6:	fa01 f303 	lsl.w	r3, r1, r3
 80003ea:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80003ec:	68fa      	ldr	r2, [r7, #12]
 80003ee:	68bb      	ldr	r3, [r7, #8]
 80003f0:	4313      	orrs	r3, r2
 80003f2:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	68fa      	ldr	r2, [r7, #12]
 80003f8:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 80003fa:	78bb      	ldrb	r3, [r7, #2]
 80003fc:	2b06      	cmp	r3, #6
 80003fe:	d821      	bhi.n	8000444 <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000404:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 8000406:	78bb      	ldrb	r3, [r7, #2]
 8000408:	1e5a      	subs	r2, r3, #1
 800040a:	4613      	mov	r3, r2
 800040c:	009b      	lsls	r3, r3, #2
 800040e:	4413      	add	r3, r2
 8000410:	221f      	movs	r2, #31
 8000412:	fa02 f303 	lsl.w	r3, r2, r3
 8000416:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000418:	68bb      	ldr	r3, [r7, #8]
 800041a:	43db      	mvns	r3, r3
 800041c:	68fa      	ldr	r2, [r7, #12]
 800041e:	4013      	ands	r3, r2
 8000420:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8000422:	78f9      	ldrb	r1, [r7, #3]
 8000424:	78bb      	ldrb	r3, [r7, #2]
 8000426:	1e5a      	subs	r2, r3, #1
 8000428:	4613      	mov	r3, r2
 800042a:	009b      	lsls	r3, r3, #2
 800042c:	4413      	add	r3, r2
 800042e:	fa01 f303 	lsl.w	r3, r1, r3
 8000432:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000434:	68fa      	ldr	r2, [r7, #12]
 8000436:	68bb      	ldr	r3, [r7, #8]
 8000438:	4313      	orrs	r3, r2
 800043a:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	68fa      	ldr	r2, [r7, #12]
 8000440:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000442:	e047      	b.n	80004d4 <ADC_RegularChannelConfig+0x188>
  else if (Rank < 13)
 8000444:	78bb      	ldrb	r3, [r7, #2]
 8000446:	2b0c      	cmp	r3, #12
 8000448:	d821      	bhi.n	800048e <ADC_RegularChannelConfig+0x142>
    tmpreg1 = ADCx->SQR2;
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800044e:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8000450:	78bb      	ldrb	r3, [r7, #2]
 8000452:	1fda      	subs	r2, r3, #7
 8000454:	4613      	mov	r3, r2
 8000456:	009b      	lsls	r3, r3, #2
 8000458:	4413      	add	r3, r2
 800045a:	221f      	movs	r2, #31
 800045c:	fa02 f303 	lsl.w	r3, r2, r3
 8000460:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 8000462:	68bb      	ldr	r3, [r7, #8]
 8000464:	43db      	mvns	r3, r3
 8000466:	68fa      	ldr	r2, [r7, #12]
 8000468:	4013      	ands	r3, r2
 800046a:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 800046c:	78f9      	ldrb	r1, [r7, #3]
 800046e:	78bb      	ldrb	r3, [r7, #2]
 8000470:	1fda      	subs	r2, r3, #7
 8000472:	4613      	mov	r3, r2
 8000474:	009b      	lsls	r3, r3, #2
 8000476:	4413      	add	r3, r2
 8000478:	fa01 f303 	lsl.w	r3, r1, r3
 800047c:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 800047e:	68fa      	ldr	r2, [r7, #12]
 8000480:	68bb      	ldr	r3, [r7, #8]
 8000482:	4313      	orrs	r3, r2
 8000484:	60fb      	str	r3, [r7, #12]
    ADCx->SQR2 = tmpreg1;
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	68fa      	ldr	r2, [r7, #12]
 800048a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800048c:	e022      	b.n	80004d4 <ADC_RegularChannelConfig+0x188>
    tmpreg1 = ADCx->SQR1;
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000492:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8000494:	78bb      	ldrb	r3, [r7, #2]
 8000496:	f1a3 020d 	sub.w	r2, r3, #13
 800049a:	4613      	mov	r3, r2
 800049c:	009b      	lsls	r3, r3, #2
 800049e:	4413      	add	r3, r2
 80004a0:	221f      	movs	r2, #31
 80004a2:	fa02 f303 	lsl.w	r3, r2, r3
 80004a6:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 80004a8:	68bb      	ldr	r3, [r7, #8]
 80004aa:	43db      	mvns	r3, r3
 80004ac:	68fa      	ldr	r2, [r7, #12]
 80004ae:	4013      	ands	r3, r2
 80004b0:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 80004b2:	78f9      	ldrb	r1, [r7, #3]
 80004b4:	78bb      	ldrb	r3, [r7, #2]
 80004b6:	f1a3 020d 	sub.w	r2, r3, #13
 80004ba:	4613      	mov	r3, r2
 80004bc:	009b      	lsls	r3, r3, #2
 80004be:	4413      	add	r3, r2
 80004c0:	fa01 f303 	lsl.w	r3, r1, r3
 80004c4:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 80004c6:	68fa      	ldr	r2, [r7, #12]
 80004c8:	68bb      	ldr	r3, [r7, #8]
 80004ca:	4313      	orrs	r3, r2
 80004cc:	60fb      	str	r3, [r7, #12]
    ADCx->SQR1 = tmpreg1;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	68fa      	ldr	r2, [r7, #12]
 80004d2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80004d4:	bf00      	nop
 80004d6:	3714      	adds	r7, #20
 80004d8:	46bd      	mov	sp, r7
 80004da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004de:	4770      	bx	lr

080004e0 <ADC_DiscModeCmd>:
  *         regular group channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
 80004e8:	460b      	mov	r3, r1
 80004ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80004ec:	78fb      	ldrb	r3, [r7, #3]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d006      	beq.n	8000500 <ADC_DiscModeCmd+0x20>
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	685b      	ldr	r3, [r3, #4]
 80004f6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
  }
}
 80004fe:	e005      	b.n	800050c <ADC_DiscModeCmd+0x2c>
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	685b      	ldr	r3, [r3, #4]
 8000504:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	605a      	str	r2, [r3, #4]
}
 800050c:	bf00      	nop
 800050e:	370c      	adds	r7, #12
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr

08000518 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	460b      	mov	r3, r1
 8000522:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000524:	78fb      	ldrb	r3, [r7, #3]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d006      	beq.n	8000538 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	f043 0201 	orr.w	r2, r3, #1
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8000536:	e005      	b.n	8000544 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f023 0201 	bic.w	r2, r3, #1
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	601a      	str	r2, [r3, #0]
}
 8000544:	bf00      	nop
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr

08000550 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000550:	b480      	push	{r7}
 8000552:	b087      	sub	sp, #28
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
 8000558:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800055a:	2300      	movs	r3, #0
 800055c:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 800055e:	2300      	movs	r3, #0
 8000560:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4a15      	ldr	r2, [pc, #84]	; (80005bc <DMA_GetFlagStatus+0x6c>)
 8000566:	4293      	cmp	r3, r2
 8000568:	d802      	bhi.n	8000570 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800056a:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <DMA_GetFlagStatus+0x70>)
 800056c:	613b      	str	r3, [r7, #16]
 800056e:	e001      	b.n	8000574 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000570:	4b14      	ldr	r3, [pc, #80]	; (80005c4 <DMA_GetFlagStatus+0x74>)
 8000572:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800057a:	2b00      	cmp	r3, #0
 800057c:	d003      	beq.n	8000586 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 800057e:	693b      	ldr	r3, [r7, #16]
 8000580:	685b      	ldr	r3, [r3, #4]
 8000582:	60fb      	str	r3, [r7, #12]
 8000584:	e002      	b.n	800058c <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8000586:	693b      	ldr	r3, [r7, #16]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000592:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000596:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8000598:	68fa      	ldr	r2, [r7, #12]
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	4013      	ands	r3, r2
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d002      	beq.n	80005a8 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 80005a2:	2301      	movs	r3, #1
 80005a4:	75fb      	strb	r3, [r7, #23]
 80005a6:	e001      	b.n	80005ac <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 80005a8:	2300      	movs	r3, #0
 80005aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 80005ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	371c      	adds	r7, #28
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	4002640f 	.word	0x4002640f
 80005c0:	40026000 	.word	0x40026000
 80005c4:	40026400 	.word	0x40026400

080005c8 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4a10      	ldr	r2, [pc, #64]	; (8000618 <DMA_ClearFlag+0x50>)
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d802      	bhi.n	80005e0 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80005da:	4b10      	ldr	r3, [pc, #64]	; (800061c <DMA_ClearFlag+0x54>)
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	e001      	b.n	80005e4 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80005e0:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <DMA_ClearFlag+0x58>)
 80005e2:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d007      	beq.n	80005fe <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80005f4:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80005f8:	68fa      	ldr	r2, [r7, #12]
 80005fa:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 80005fc:	e006      	b.n	800060c <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000604:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000608:	68fa      	ldr	r2, [r7, #12]
 800060a:	6093      	str	r3, [r2, #8]
}
 800060c:	bf00      	nop
 800060e:	3714      	adds	r7, #20
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr
 8000618:	4002640f 	.word	0x4002640f
 800061c:	40026000 	.word	0x40026000
 8000620:	40026400 	.word	0x40026400

08000624 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000624:	b480      	push	{r7}
 8000626:	b087      	sub	sp, #28
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800062e:	2300      	movs	r3, #0
 8000630:	617b      	str	r3, [r7, #20]
 8000632:	2300      	movs	r3, #0
 8000634:	613b      	str	r3, [r7, #16]
 8000636:	2300      	movs	r3, #0
 8000638:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800063a:	2300      	movs	r3, #0
 800063c:	617b      	str	r3, [r7, #20]
 800063e:	e076      	b.n	800072e <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000640:	2201      	movs	r2, #1
 8000642:	697b      	ldr	r3, [r7, #20]
 8000644:	fa02 f303 	lsl.w	r3, r2, r3
 8000648:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	693b      	ldr	r3, [r7, #16]
 8000650:	4013      	ands	r3, r2
 8000652:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000654:	68fa      	ldr	r2, [r7, #12]
 8000656:	693b      	ldr	r3, [r7, #16]
 8000658:	429a      	cmp	r2, r3
 800065a:	d165      	bne.n	8000728 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	005b      	lsls	r3, r3, #1
 8000664:	2103      	movs	r1, #3
 8000666:	fa01 f303 	lsl.w	r3, r1, r3
 800066a:	43db      	mvns	r3, r3
 800066c:	401a      	ands	r2, r3
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681a      	ldr	r2, [r3, #0]
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	791b      	ldrb	r3, [r3, #4]
 800067a:	4619      	mov	r1, r3
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	005b      	lsls	r3, r3, #1
 8000680:	fa01 f303 	lsl.w	r3, r1, r3
 8000684:	431a      	orrs	r2, r3
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	791b      	ldrb	r3, [r3, #4]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d003      	beq.n	800069a <GPIO_Init+0x76>
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	791b      	ldrb	r3, [r3, #4]
 8000696:	2b02      	cmp	r3, #2
 8000698:	d12e      	bne.n	80006f8 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	689a      	ldr	r2, [r3, #8]
 800069e:	697b      	ldr	r3, [r7, #20]
 80006a0:	005b      	lsls	r3, r3, #1
 80006a2:	2103      	movs	r1, #3
 80006a4:	fa01 f303 	lsl.w	r3, r1, r3
 80006a8:	43db      	mvns	r3, r3
 80006aa:	401a      	ands	r2, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	689a      	ldr	r2, [r3, #8]
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	795b      	ldrb	r3, [r3, #5]
 80006b8:	4619      	mov	r1, r3
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	005b      	lsls	r3, r3, #1
 80006be:	fa01 f303 	lsl.w	r3, r1, r3
 80006c2:	431a      	orrs	r2, r3
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	685a      	ldr	r2, [r3, #4]
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	b29b      	uxth	r3, r3
 80006d0:	4619      	mov	r1, r3
 80006d2:	2301      	movs	r3, #1
 80006d4:	408b      	lsls	r3, r1
 80006d6:	43db      	mvns	r3, r3
 80006d8:	401a      	ands	r2, r3
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	685b      	ldr	r3, [r3, #4]
 80006e2:	683a      	ldr	r2, [r7, #0]
 80006e4:	7992      	ldrb	r2, [r2, #6]
 80006e6:	4611      	mov	r1, r2
 80006e8:	697a      	ldr	r2, [r7, #20]
 80006ea:	b292      	uxth	r2, r2
 80006ec:	fa01 f202 	lsl.w	r2, r1, r2
 80006f0:	b292      	uxth	r2, r2
 80006f2:	431a      	orrs	r2, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	68da      	ldr	r2, [r3, #12]
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	b29b      	uxth	r3, r3
 8000700:	005b      	lsls	r3, r3, #1
 8000702:	2103      	movs	r1, #3
 8000704:	fa01 f303 	lsl.w	r3, r1, r3
 8000708:	43db      	mvns	r3, r3
 800070a:	401a      	ands	r2, r3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	68da      	ldr	r2, [r3, #12]
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	79db      	ldrb	r3, [r3, #7]
 8000718:	4619      	mov	r1, r3
 800071a:	697b      	ldr	r3, [r7, #20]
 800071c:	005b      	lsls	r3, r3, #1
 800071e:	fa01 f303 	lsl.w	r3, r1, r3
 8000722:	431a      	orrs	r2, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	3301      	adds	r3, #1
 800072c:	617b      	str	r3, [r7, #20]
 800072e:	697b      	ldr	r3, [r7, #20]
 8000730:	2b0f      	cmp	r3, #15
 8000732:	d985      	bls.n	8000640 <GPIO_Init+0x1c>
    }
  }
}
 8000734:	bf00      	nop
 8000736:	371c      	adds	r7, #28
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	460b      	mov	r3, r1
 800074a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	887a      	ldrh	r2, [r7, #2]
 8000750:	831a      	strh	r2, [r3, #24]
}
 8000752:	bf00      	nop
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr

0800075e <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800075e:	b480      	push	{r7}
 8000760:	b083      	sub	sp, #12
 8000762:	af00      	add	r7, sp, #0
 8000764:	6078      	str	r0, [r7, #4]
 8000766:	460b      	mov	r3, r1
 8000768:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	887a      	ldrh	r2, [r7, #2]
 800076e:	835a      	strh	r2, [r3, #26]
}
 8000770:	bf00      	nop
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr

0800077c <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	460b      	mov	r3, r1
 8000786:	807b      	strh	r3, [r7, #2]
 8000788:	4613      	mov	r3, r2
 800078a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 800078c:	787b      	ldrb	r3, [r7, #1]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d003      	beq.n	800079a <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	887a      	ldrh	r2, [r7, #2]
 8000796:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 8000798:	e002      	b.n	80007a0 <GPIO_WriteBit+0x24>
    GPIOx->BSRRH = GPIO_Pin ;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	887a      	ldrh	r2, [r7, #2]
 800079e:	835a      	strh	r2, [r3, #26]
}
 80007a0:	bf00      	nop
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b085      	sub	sp, #20
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	460b      	mov	r3, r1
 80007b6:	807b      	strh	r3, [r7, #2]
 80007b8:	4613      	mov	r3, r2
 80007ba:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80007bc:	2300      	movs	r3, #0
 80007be:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80007c0:	2300      	movs	r3, #0
 80007c2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80007c4:	787a      	ldrb	r2, [r7, #1]
 80007c6:	887b      	ldrh	r3, [r7, #2]
 80007c8:	f003 0307 	and.w	r3, r3, #7
 80007cc:	009b      	lsls	r3, r3, #2
 80007ce:	fa02 f303 	lsl.w	r3, r2, r3
 80007d2:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80007d4:	887b      	ldrh	r3, [r7, #2]
 80007d6:	08db      	lsrs	r3, r3, #3
 80007d8:	b29b      	uxth	r3, r3
 80007da:	4618      	mov	r0, r3
 80007dc:	887b      	ldrh	r3, [r7, #2]
 80007de:	08db      	lsrs	r3, r3, #3
 80007e0:	b29b      	uxth	r3, r3
 80007e2:	461a      	mov	r2, r3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	3208      	adds	r2, #8
 80007e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80007ec:	887b      	ldrh	r3, [r7, #2]
 80007ee:	f003 0307 	and.w	r3, r3, #7
 80007f2:	009b      	lsls	r3, r3, #2
 80007f4:	210f      	movs	r1, #15
 80007f6:	fa01 f303 	lsl.w	r3, r1, r3
 80007fa:	43db      	mvns	r3, r3
 80007fc:	ea02 0103 	and.w	r1, r2, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	f100 0208 	add.w	r2, r0, #8
 8000806:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800080a:	887b      	ldrh	r3, [r7, #2]
 800080c:	08db      	lsrs	r3, r3, #3
 800080e:	b29b      	uxth	r3, r3
 8000810:	461a      	mov	r2, r3
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	3208      	adds	r2, #8
 8000816:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	4313      	orrs	r3, r2
 800081e:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000820:	887b      	ldrh	r3, [r7, #2]
 8000822:	08db      	lsrs	r3, r3, #3
 8000824:	b29b      	uxth	r3, r3
 8000826:	461a      	mov	r2, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	3208      	adds	r2, #8
 800082c:	68b9      	ldr	r1, [r7, #8]
 800082e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000832:	bf00      	nop
 8000834:	3714      	adds	r7, #20
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr

0800083e <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800083e:	b480      	push	{r7}
 8000840:	b083      	sub	sp, #12
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
 8000846:	460b      	mov	r3, r1
 8000848:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800084a:	78fb      	ldrb	r3, [r7, #3]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d008      	beq.n	8000862 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	881b      	ldrh	r3, [r3, #0]
 8000854:	b29b      	uxth	r3, r3
 8000856:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800085a:	b29a      	uxth	r2, r3
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
  }
}
 8000860:	e007      	b.n	8000872 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	881b      	ldrh	r3, [r3, #0]
 8000866:	b29b      	uxth	r3, r3
 8000868:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800086c:	b29a      	uxth	r2, r3
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	801a      	strh	r2, [r3, #0]
}
 8000872:	bf00      	nop
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr

0800087e <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 800087e:	b480      	push	{r7}
 8000880:	b087      	sub	sp, #28
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
 8000886:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000888:	2300      	movs	r3, #0
 800088a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	613b      	str	r3, [r7, #16]
 8000890:	2300      	movs	r3, #0
 8000892:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	0f1b      	lsrs	r3, r3, #28
 800089c:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80008a4:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 80008a6:	693b      	ldr	r3, [r7, #16]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d003      	beq.n	80008b4 <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	3314      	adds	r3, #20
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	e005      	b.n	80008c0 <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	0c1b      	lsrs	r3, r3, #16
 80008b8:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	3318      	adds	r3, #24
 80008be:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	4013      	ands	r3, r2
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d002      	beq.n	80008d2 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 80008cc:	2301      	movs	r3, #1
 80008ce:	75fb      	strb	r3, [r7, #23]
 80008d0:	e001      	b.n	80008d6 <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 80008d2:	2300      	movs	r3, #0
 80008d4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 80008d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	371c      	adds	r7, #28
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr

080008e4 <LTDC_Init>:
  *         the configuration information for the specified LTDC peripheral.
  * @retval None
  */

void LTDC_Init(LTDC_InitTypeDef* LTDC_InitStruct)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b089      	sub	sp, #36	; 0x24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  uint32_t horizontalsync = 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	61fb      	str	r3, [r7, #28]
  uint32_t accumulatedHBP = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61bb      	str	r3, [r7, #24]
  uint32_t accumulatedactiveW = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]
  uint32_t totalwidth = 0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	613b      	str	r3, [r7, #16]
  uint32_t backgreen = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	60fb      	str	r3, [r7, #12]
  uint32_t backred = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LTDC_BackBlueValue(LTDC_InitStruct->LTDC_BackgroundBlueValue));
  assert_param(IS_LTDC_BackGreenValue(LTDC_InitStruct->LTDC_BackgroundGreenValue));
  assert_param(IS_LTDC_BackRedValue(LTDC_InitStruct->LTDC_BackgroundRedValue));

  /* Sets Synchronization size */
  LTDC->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8000904:	4940      	ldr	r1, [pc, #256]	; (8000a08 <LTDC_Init+0x124>)
 8000906:	4b40      	ldr	r3, [pc, #256]	; (8000a08 <LTDC_Init+0x124>)
 8000908:	689a      	ldr	r2, [r3, #8]
 800090a:	4b40      	ldr	r3, [pc, #256]	; (8000a0c <LTDC_Init+0x128>)
 800090c:	4013      	ands	r3, r2
 800090e:	608b      	str	r3, [r1, #8]
  horizontalsync = (LTDC_InitStruct->LTDC_HorizontalSync << 16);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	691b      	ldr	r3, [r3, #16]
 8000914:	041b      	lsls	r3, r3, #16
 8000916:	61fb      	str	r3, [r7, #28]
  LTDC->SSCR |= (horizontalsync | LTDC_InitStruct->LTDC_VerticalSync);
 8000918:	483b      	ldr	r0, [pc, #236]	; (8000a08 <LTDC_Init+0x124>)
 800091a:	4b3b      	ldr	r3, [pc, #236]	; (8000a08 <LTDC_Init+0x124>)
 800091c:	689a      	ldr	r2, [r3, #8]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	6959      	ldr	r1, [r3, #20]
 8000922:	69fb      	ldr	r3, [r7, #28]
 8000924:	430b      	orrs	r3, r1
 8000926:	4313      	orrs	r3, r2
 8000928:	6083      	str	r3, [r0, #8]

  /* Sets Accumulated Back porch */
  LTDC->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800092a:	4937      	ldr	r1, [pc, #220]	; (8000a08 <LTDC_Init+0x124>)
 800092c:	4b36      	ldr	r3, [pc, #216]	; (8000a08 <LTDC_Init+0x124>)
 800092e:	68da      	ldr	r2, [r3, #12]
 8000930:	4b36      	ldr	r3, [pc, #216]	; (8000a0c <LTDC_Init+0x128>)
 8000932:	4013      	ands	r3, r2
 8000934:	60cb      	str	r3, [r1, #12]
  accumulatedHBP = (LTDC_InitStruct->LTDC_AccumulatedHBP << 16);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	699b      	ldr	r3, [r3, #24]
 800093a:	041b      	lsls	r3, r3, #16
 800093c:	61bb      	str	r3, [r7, #24]
  LTDC->BPCR |= (accumulatedHBP | LTDC_InitStruct->LTDC_AccumulatedVBP);
 800093e:	4832      	ldr	r0, [pc, #200]	; (8000a08 <LTDC_Init+0x124>)
 8000940:	4b31      	ldr	r3, [pc, #196]	; (8000a08 <LTDC_Init+0x124>)
 8000942:	68da      	ldr	r2, [r3, #12]
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	69d9      	ldr	r1, [r3, #28]
 8000948:	69bb      	ldr	r3, [r7, #24]
 800094a:	430b      	orrs	r3, r1
 800094c:	4313      	orrs	r3, r2
 800094e:	60c3      	str	r3, [r0, #12]

  /* Sets Accumulated Active Width */
  LTDC->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8000950:	492d      	ldr	r1, [pc, #180]	; (8000a08 <LTDC_Init+0x124>)
 8000952:	4b2d      	ldr	r3, [pc, #180]	; (8000a08 <LTDC_Init+0x124>)
 8000954:	691a      	ldr	r2, [r3, #16]
 8000956:	4b2d      	ldr	r3, [pc, #180]	; (8000a0c <LTDC_Init+0x128>)
 8000958:	4013      	ands	r3, r2
 800095a:	610b      	str	r3, [r1, #16]
  accumulatedactiveW = (LTDC_InitStruct->LTDC_AccumulatedActiveW << 16);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	6a1b      	ldr	r3, [r3, #32]
 8000960:	041b      	lsls	r3, r3, #16
 8000962:	617b      	str	r3, [r7, #20]
  LTDC->AWCR |= (accumulatedactiveW | LTDC_InitStruct->LTDC_AccumulatedActiveH);
 8000964:	4828      	ldr	r0, [pc, #160]	; (8000a08 <LTDC_Init+0x124>)
 8000966:	4b28      	ldr	r3, [pc, #160]	; (8000a08 <LTDC_Init+0x124>)
 8000968:	691a      	ldr	r2, [r3, #16]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	430b      	orrs	r3, r1
 8000972:	4313      	orrs	r3, r2
 8000974:	6103      	str	r3, [r0, #16]

  /* Sets Total Width */
  LTDC->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8000976:	4924      	ldr	r1, [pc, #144]	; (8000a08 <LTDC_Init+0x124>)
 8000978:	4b23      	ldr	r3, [pc, #140]	; (8000a08 <LTDC_Init+0x124>)
 800097a:	695a      	ldr	r2, [r3, #20]
 800097c:	4b23      	ldr	r3, [pc, #140]	; (8000a0c <LTDC_Init+0x128>)
 800097e:	4013      	ands	r3, r2
 8000980:	614b      	str	r3, [r1, #20]
  totalwidth = (LTDC_InitStruct->LTDC_TotalWidth << 16);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000986:	041b      	lsls	r3, r3, #16
 8000988:	613b      	str	r3, [r7, #16]
  LTDC->TWCR |= (totalwidth | LTDC_InitStruct->LTDC_TotalHeigh);
 800098a:	481f      	ldr	r0, [pc, #124]	; (8000a08 <LTDC_Init+0x124>)
 800098c:	4b1e      	ldr	r3, [pc, #120]	; (8000a08 <LTDC_Init+0x124>)
 800098e:	695a      	ldr	r2, [r3, #20]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000994:	693b      	ldr	r3, [r7, #16]
 8000996:	430b      	orrs	r3, r1
 8000998:	4313      	orrs	r3, r2
 800099a:	6143      	str	r3, [r0, #20]

  LTDC->GCR &= (uint32_t)GCR_MASK;
 800099c:	491a      	ldr	r1, [pc, #104]	; (8000a08 <LTDC_Init+0x124>)
 800099e:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <LTDC_Init+0x124>)
 80009a0:	699a      	ldr	r2, [r3, #24]
 80009a2:	4b1b      	ldr	r3, [pc, #108]	; (8000a10 <LTDC_Init+0x12c>)
 80009a4:	4013      	ands	r3, r2
 80009a6:	618b      	str	r3, [r1, #24]
  LTDC->GCR |=  (uint32_t)(LTDC_InitStruct->LTDC_HSPolarity | LTDC_InitStruct->LTDC_VSPolarity | \
 80009a8:	4817      	ldr	r0, [pc, #92]	; (8000a08 <LTDC_Init+0x124>)
 80009aa:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <LTDC_Init+0x124>)
 80009ac:	699a      	ldr	r2, [r3, #24]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6819      	ldr	r1, [r3, #0]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	4319      	orrs	r1, r3
                           LTDC_InitStruct->LTDC_DEPolarity | LTDC_InitStruct->LTDC_PCPolarity);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	689b      	ldr	r3, [r3, #8]
  LTDC->GCR |=  (uint32_t)(LTDC_InitStruct->LTDC_HSPolarity | LTDC_InitStruct->LTDC_VSPolarity | \
 80009bc:	4319      	orrs	r1, r3
                           LTDC_InitStruct->LTDC_DEPolarity | LTDC_InitStruct->LTDC_PCPolarity);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	68db      	ldr	r3, [r3, #12]
 80009c2:	430b      	orrs	r3, r1
  LTDC->GCR |=  (uint32_t)(LTDC_InitStruct->LTDC_HSPolarity | LTDC_InitStruct->LTDC_VSPolarity | \
 80009c4:	4313      	orrs	r3, r2
 80009c6:	6183      	str	r3, [r0, #24]

  /* sets the background color value */
  backgreen = (LTDC_InitStruct->LTDC_BackgroundGreenValue << 8);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009cc:	021b      	lsls	r3, r3, #8
 80009ce:	60fb      	str	r3, [r7, #12]
  backred = (LTDC_InitStruct->LTDC_BackgroundRedValue << 16);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d4:	041b      	lsls	r3, r3, #16
 80009d6:	60bb      	str	r3, [r7, #8]

  LTDC->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80009d8:	4a0b      	ldr	r2, [pc, #44]	; (8000a08 <LTDC_Init+0x124>)
 80009da:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <LTDC_Init+0x124>)
 80009dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009de:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80009e2:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC->BCCR |= (backred | backgreen | LTDC_InitStruct->LTDC_BackgroundBlueValue);
 80009e4:	4808      	ldr	r0, [pc, #32]	; (8000a08 <LTDC_Init+0x124>)
 80009e6:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <LTDC_Init+0x124>)
 80009e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009ea:	68b9      	ldr	r1, [r7, #8]
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	4319      	orrs	r1, r3
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009f4:	430b      	orrs	r3, r1
 80009f6:	4313      	orrs	r3, r2
 80009f8:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 80009fa:	bf00      	nop
 80009fc:	3724      	adds	r7, #36	; 0x24
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	40016800 	.word	0x40016800
 8000a0c:	f000f800 	.word	0xf000f800
 8000a10:	0ffe888f 	.word	0x0ffe888f

08000a14 <LTDC_Cmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void LTDC_Cmd(FunctionalState NewState)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d006      	beq.n	8000a32 <LTDC_Cmd+0x1e>
  {
    /* Enable LTDC by setting LTDCEN bit */
    LTDC->GCR |= (uint32_t)LTDC_GCR_LTDCEN;
 8000a24:	4a09      	ldr	r2, [pc, #36]	; (8000a4c <LTDC_Cmd+0x38>)
 8000a26:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <LTDC_Cmd+0x38>)
 8000a28:	699b      	ldr	r3, [r3, #24]
 8000a2a:	f043 0301 	orr.w	r3, r3, #1
 8000a2e:	6193      	str	r3, [r2, #24]
  else
  {
    /* Disable LTDC by clearing LTDCEN bit */
    LTDC->GCR &= ~(uint32_t)LTDC_GCR_LTDCEN;
  }
}
 8000a30:	e005      	b.n	8000a3e <LTDC_Cmd+0x2a>
    LTDC->GCR &= ~(uint32_t)LTDC_GCR_LTDCEN;
 8000a32:	4a06      	ldr	r2, [pc, #24]	; (8000a4c <LTDC_Cmd+0x38>)
 8000a34:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <LTDC_Cmd+0x38>)
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	f023 0301 	bic.w	r3, r3, #1
 8000a3c:	6193      	str	r3, [r2, #24]
}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	40016800 	.word	0x40016800

08000a50 <LTDC_DitherCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void LTDC_DitherCmd(FunctionalState NewState)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d006      	beq.n	8000a6e <LTDC_DitherCmd+0x1e>
  {
    /* Enable Dither by setting DTEN bit */
    LTDC->GCR |= (uint32_t)LTDC_GCR_DTEN;
 8000a60:	4a09      	ldr	r2, [pc, #36]	; (8000a88 <LTDC_DitherCmd+0x38>)
 8000a62:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <LTDC_DitherCmd+0x38>)
 8000a64:	699b      	ldr	r3, [r3, #24]
 8000a66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a6a:	6193      	str	r3, [r2, #24]
  else
  {
    /* Disable Dither by clearing DTEN bit */
    LTDC->GCR &= ~(uint32_t)LTDC_GCR_DTEN;
  }
}
 8000a6c:	e005      	b.n	8000a7a <LTDC_DitherCmd+0x2a>
    LTDC->GCR &= ~(uint32_t)LTDC_GCR_DTEN;
 8000a6e:	4a06      	ldr	r2, [pc, #24]	; (8000a88 <LTDC_DitherCmd+0x38>)
 8000a70:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <LTDC_DitherCmd+0x38>)
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a78:	6193      	str	r3, [r2, #24]
}
 8000a7a:	bf00      	nop
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	40016800 	.word	0x40016800

08000a8c <LTDC_ReloadConfig>:
  *     @arg LTDC_VBReload: Immediate reload.  
  * @retval None
  */

void LTDC_ReloadConfig(uint32_t LTDC_Reload)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_RELOAD(LTDC_Reload));

  /* Sets the Reload type */
  LTDC->SRCR = (uint32_t)LTDC_Reload;
 8000a94:	4a04      	ldr	r2, [pc, #16]	; (8000aa8 <LTDC_ReloadConfig+0x1c>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000a9a:	bf00      	nop
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	40016800 	.word	0x40016800

08000aac <LTDC_LayerInit>:
  *         the configuration information for the specified LTDC peripheral.
  * @retval None
  */

void LTDC_LayerInit(LTDC_Layer_TypeDef* LTDC_Layerx, LTDC_Layer_InitTypeDef* LTDC_Layer_InitStruct)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b089      	sub	sp, #36	; 0x24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	6039      	str	r1, [r7, #0]

  uint32_t whsppos = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61fb      	str	r3, [r7, #28]
  uint32_t wvsppos = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	61bb      	str	r3, [r7, #24]
  uint32_t dcgreen = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	617b      	str	r3, [r7, #20]
  uint32_t dcred = 0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	613b      	str	r3, [r7, #16]
  uint32_t dcalpha = 0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60fb      	str	r3, [r7, #12]
  uint32_t cfbp = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LTDC_CFBP(LTDC_Layer_InitStruct->LTDC_CFBPitch));
  assert_param(IS_LTDC_CFBLL(LTDC_Layer_InitStruct->LTDC_CFBLineLength));
  assert_param(IS_LTDC_CFBLNBR(LTDC_Layer_InitStruct->LTDC_CFBLineNumber));

  /* Configures the horizontal start and stop position */
  whsppos = LTDC_Layer_InitStruct->LTDC_HorizontalStop << 16;
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	041b      	lsls	r3, r3, #16
 8000ad4:	61fb      	str	r3, [r7, #28]
  LTDC_Layerx->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	605a      	str	r2, [r3, #4]
  LTDC_Layerx->WHPCR = (LTDC_Layer_InitStruct->LTDC_HorizontalStart | whsppos);
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	431a      	orrs	r2, r3
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	605a      	str	r2, [r3, #4]

  /* Configures the vertical start and stop position */
  wvsppos = LTDC_Layer_InitStruct->LTDC_VerticalStop << 16;
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	68db      	ldr	r3, [r3, #12]
 8000af2:	041b      	lsls	r3, r3, #16
 8000af4:	61bb      	str	r3, [r7, #24]
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	689b      	ldr	r3, [r3, #8]
 8000afa:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	609a      	str	r2, [r3, #8]
  LTDC_Layerx->WVPCR  = (LTDC_Layer_InitStruct->LTDC_VerticalStart | wvsppos);
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	689a      	ldr	r2, [r3, #8]
 8000b06:	69bb      	ldr	r3, [r7, #24]
 8000b08:	431a      	orrs	r2, r3
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	609a      	str	r2, [r3, #8]

  /* Specifies the pixel format */
  LTDC_Layerx->PFCR &= ~(LTDC_LxPFCR_PF);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	691b      	ldr	r3, [r3, #16]
 8000b12:	f023 0207 	bic.w	r2, r3, #7
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	611a      	str	r2, [r3, #16]
  LTDC_Layerx->PFCR = (LTDC_Layer_InitStruct->LTDC_PixelFormat);
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	691a      	ldr	r2, [r3, #16]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	611a      	str	r2, [r3, #16]

  /* Configures the default color values */
  dcgreen = (LTDC_Layer_InitStruct->LTDC_DefaultColorGreen << 8);
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	69db      	ldr	r3, [r3, #28]
 8000b26:	021b      	lsls	r3, r3, #8
 8000b28:	617b      	str	r3, [r7, #20]
  dcred = (LTDC_Layer_InitStruct->LTDC_DefaultColorRed << 16);
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	6a1b      	ldr	r3, [r3, #32]
 8000b2e:	041b      	lsls	r3, r3, #16
 8000b30:	613b      	str	r3, [r7, #16]
  dcalpha = (LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha << 24);
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b36:	061b      	lsls	r3, r3, #24
 8000b38:	60fb      	str	r3, [r7, #12]
  LTDC_Layerx->DCCR &=  ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	699b      	ldr	r3, [r3, #24]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2200      	movs	r2, #0
 8000b42:	619a      	str	r2, [r3, #24]
  LTDC_Layerx->DCCR = (LTDC_Layer_InitStruct->LTDC_DefaultColorBlue | dcgreen | \
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	699a      	ldr	r2, [r3, #24]
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	431a      	orrs	r2, r3
 8000b4c:	693b      	ldr	r3, [r7, #16]
 8000b4e:	431a      	orrs	r2, r3
                        dcred | dcalpha);
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	431a      	orrs	r2, r3
  LTDC_Layerx->DCCR = (LTDC_Layer_InitStruct->LTDC_DefaultColorBlue | dcgreen | \
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	619a      	str	r2, [r3, #24]

  /* Specifies the constant alpha value */      
  LTDC_Layerx->CACR &= ~(LTDC_LxCACR_CONSTA);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	695b      	ldr	r3, [r3, #20]
 8000b5c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	615a      	str	r2, [r3, #20]
  LTDC_Layerx->CACR = (LTDC_Layer_InitStruct->LTDC_ConstantAlpha);
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	695a      	ldr	r2, [r3, #20]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	615a      	str	r2, [r3, #20]

  /* Specifies the blending factors */
  LTDC_Layerx->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	69db      	ldr	r3, [r3, #28]
 8000b70:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b74:	f023 0307 	bic.w	r3, r3, #7
 8000b78:	687a      	ldr	r2, [r7, #4]
 8000b7a:	61d3      	str	r3, [r2, #28]
  LTDC_Layerx->BFCR = (LTDC_Layer_InitStruct->LTDC_BlendingFactor_1 | LTDC_Layer_InitStruct->LTDC_BlendingFactor_2);
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b84:	431a      	orrs	r2, r3
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	61da      	str	r2, [r3, #28]

  /* Configures the color frame buffer start address */
  LTDC_Layerx->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2200      	movs	r2, #0
 8000b92:	629a      	str	r2, [r3, #40]	; 0x28
  LTDC_Layerx->CFBAR = (LTDC_Layer_InitStruct->LTDC_CFBStartAdress);
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Configures the color frame buffer pitch in byte */
  cfbp = (LTDC_Layer_InitStruct->LTDC_CFBPitch << 16);
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ba0:	041b      	lsls	r3, r3, #16
 8000ba2:	60bb      	str	r3, [r7, #8]
  LTDC_Layerx->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ba8:	f003 22e0 	and.w	r2, r3, #3758153728	; 0xe000e000
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	62da      	str	r2, [r3, #44]	; 0x2c
  LTDC_Layerx->CFBLR  = (LTDC_Layer_InitStruct->LTDC_CFBLineLength | cfbp);
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	431a      	orrs	r2, r3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Configures the frame buffer line number */
  LTDC_Layerx->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000bc4:	f023 0307 	bic.w	r3, r3, #7
 8000bc8:	687a      	ldr	r2, [r7, #4]
 8000bca:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_Layerx->CFBLNR  = (LTDC_Layer_InitStruct->LTDC_CFBLineNumber);
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	631a      	str	r2, [r3, #48]	; 0x30

}
 8000bd4:	bf00      	nop
 8000bd6:	3724      	adds	r7, #36	; 0x24
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <LTDC_LayerCmd>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */

void LTDC_LayerCmd(LTDC_Layer_TypeDef* LTDC_Layerx, FunctionalState NewState)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	460b      	mov	r3, r1
 8000bea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000bec:	78fb      	ldrb	r3, [r7, #3]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d006      	beq.n	8000c00 <LTDC_LayerCmd+0x20>
  {
    /* Enable LTDC_Layer by setting LEN bit */
    LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_LEN;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f043 0201 	orr.w	r2, r3, #1
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable LTDC_Layer by clearing LEN bit */
    LTDC_Layerx->CR &= ~(uint32_t)LTDC_LxCR_LEN;
  }
}
 8000bfe:	e005      	b.n	8000c0c <LTDC_LayerCmd+0x2c>
    LTDC_Layerx->CR &= ~(uint32_t)LTDC_LxCR_LEN;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f023 0201 	bic.w	r2, r3, #1
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	601a      	str	r2, [r3, #0]
}
 8000c0c:	bf00      	nop
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <LTDC_LayerPosition>:
  * @retval Reload of the shadow registers values must be applied after layer 
  *         position reconfiguration.
  */

void LTDC_LayerPosition(LTDC_Layer_TypeDef* LTDC_Layerx, uint16_t OffsetX, uint16_t OffsetY)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b089      	sub	sp, #36	; 0x24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	460b      	mov	r3, r1
 8000c22:	807b      	strh	r3, [r7, #2]
 8000c24:	4613      	mov	r3, r2
 8000c26:	803b      	strh	r3, [r7, #0]
  uint32_t horizontal_start;
  uint32_t horizontal_stop;
  uint32_t vertical_start;
  uint32_t vertical_stop;
  
  LTDC_Layerx->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	605a      	str	r2, [r3, #4]
  LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	689b      	ldr	r3, [r3, #8]
 8000c38:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
  
  /* Reconfigures the horizontal and vertical start position */
  tempreg = LTDC->BPCR;
 8000c40:	4b2c      	ldr	r3, [pc, #176]	; (8000cf4 <LTDC_LayerPosition+0xdc>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	61bb      	str	r3, [r7, #24]
  horizontal_start = (tempreg >> 16) + 1 + OffsetX;
 8000c46:	69bb      	ldr	r3, [r7, #24]
 8000c48:	0c1a      	lsrs	r2, r3, #16
 8000c4a:	887b      	ldrh	r3, [r7, #2]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	3301      	adds	r3, #1
 8000c50:	617b      	str	r3, [r7, #20]
  vertical_start = (tempreg & 0xFFFF) + 1 + OffsetY;
 8000c52:	69bb      	ldr	r3, [r7, #24]
 8000c54:	b29a      	uxth	r2, r3
 8000c56:	883b      	ldrh	r3, [r7, #0]
 8000c58:	4413      	add	r3, r2
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	613b      	str	r3, [r7, #16]
  
  /* Reconfigures the horizontal and vertical stop position */
  /* Get the number of byte per pixel */
  
  tempreg = LTDC_Layerx->PFCR;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	691b      	ldr	r3, [r3, #16]
 8000c62:	61bb      	str	r3, [r7, #24]
  
  if (tempreg == LTDC_Pixelformat_ARGB8888)
 8000c64:	69bb      	ldr	r3, [r7, #24]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d102      	bne.n	8000c70 <LTDC_LayerPosition+0x58>
  {
    temp = 4;
 8000c6a:	2304      	movs	r3, #4
 8000c6c:	61fb      	str	r3, [r7, #28]
 8000c6e:	e016      	b.n	8000c9e <LTDC_LayerPosition+0x86>
  }
  else if (tempreg == LTDC_Pixelformat_RGB888)
 8000c70:	69bb      	ldr	r3, [r7, #24]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d102      	bne.n	8000c7c <LTDC_LayerPosition+0x64>
  {
    temp = 3;
 8000c76:	2303      	movs	r3, #3
 8000c78:	61fb      	str	r3, [r7, #28]
 8000c7a:	e010      	b.n	8000c9e <LTDC_LayerPosition+0x86>
  }
  else if ((tempreg == LTDC_Pixelformat_ARGB4444) || 
 8000c7c:	69bb      	ldr	r3, [r7, #24]
 8000c7e:	2b04      	cmp	r3, #4
 8000c80:	d008      	beq.n	8000c94 <LTDC_LayerPosition+0x7c>
 8000c82:	69bb      	ldr	r3, [r7, #24]
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	d005      	beq.n	8000c94 <LTDC_LayerPosition+0x7c>
          (tempreg == LTDC_Pixelformat_RGB565)    ||  
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	2b03      	cmp	r3, #3
 8000c8c:	d002      	beq.n	8000c94 <LTDC_LayerPosition+0x7c>
          (tempreg == LTDC_Pixelformat_ARGB1555)  ||
 8000c8e:	69bb      	ldr	r3, [r7, #24]
 8000c90:	2b07      	cmp	r3, #7
 8000c92:	d102      	bne.n	8000c9a <LTDC_LayerPosition+0x82>
          (tempreg == LTDC_Pixelformat_AL88))
  {
    temp = 2;  
 8000c94:	2302      	movs	r3, #2
 8000c96:	61fb      	str	r3, [r7, #28]
 8000c98:	e001      	b.n	8000c9e <LTDC_LayerPosition+0x86>
  }
  else
  {
    temp = 1;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	61fb      	str	r3, [r7, #28]
  }  
    
  tempreg = LTDC_Layerx->CFBLR;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca2:	61bb      	str	r3, [r7, #24]
  horizontal_stop = (((tempreg & 0x1FFF) - 3)/temp) + horizontal_start - 1;
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8000caa:	1eda      	subs	r2, r3, #3
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	fbb2 f2f3 	udiv	r2, r2, r3
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	60fb      	str	r3, [r7, #12]
  
  tempreg = LTDC_Layerx->CFBLNR;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	61bb      	str	r3, [r7, #24]
  vertical_stop = (tempreg & 0x7FF) + vertical_start - 1;  
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	4413      	add	r3, r2
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	60bb      	str	r3, [r7, #8]
  
  LTDC_Layerx->WHPCR = horizontal_start | (horizontal_stop << 16);
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	041a      	lsls	r2, r3, #16
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	431a      	orrs	r2, r3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	605a      	str	r2, [r3, #4]
  LTDC_Layerx->WVPCR = vertical_start | (vertical_stop << 16);  
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	041a      	lsls	r2, r3, #16
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	431a      	orrs	r2, r3
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
}
 8000ce6:	bf00      	nop
 8000ce8:	3724      	adds	r7, #36	; 0x24
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	40016800 	.word	0x40016800

08000cf8 <RCC_PLLSAIConfig>:
  *          This parameter must be a number between 2 and 7.
  *   
  * @retval None
  */
void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
  assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));

  RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
 8000d04:	4908      	ldr	r1, [pc, #32]	; (8000d28 <RCC_PLLSAIConfig+0x30>)
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	019a      	lsls	r2, r3, #6
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	061b      	lsls	r3, r3, #24
 8000d0e:	431a      	orrs	r2, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	071b      	lsls	r3, r3, #28
 8000d14:	4313      	orrs	r3, r2
 8000d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8000d1a:	bf00      	nop
 8000d1c:	3714      	adds	r7, #20
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	40023800 	.word	0x40023800

08000d2c <RCC_PLLSAICmd>:
  * @note   The PLLSAI is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLSAI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLSAICmd(FunctionalState NewState)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
 8000d36:	4a04      	ldr	r2, [pc, #16]	; (8000d48 <RCC_PLLSAICmd+0x1c>)
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	6013      	str	r3, [r2, #0]
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	42470070 	.word	0x42470070

08000d4c <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b089      	sub	sp, #36	; 0x24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000d54:	2300      	movs	r3, #0
 8000d56:	61bb      	str	r3, [r7, #24]
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61fb      	str	r3, [r7, #28]
 8000d60:	2302      	movs	r3, #2
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	2300      	movs	r3, #0
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	2302      	movs	r3, #2
 8000d6a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000d6c:	4b47      	ldr	r3, [pc, #284]	; (8000e8c <RCC_GetClocksFreq+0x140>)
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	f003 030c 	and.w	r3, r3, #12
 8000d74:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8000d76:	69bb      	ldr	r3, [r7, #24]
 8000d78:	2b04      	cmp	r3, #4
 8000d7a:	d007      	beq.n	8000d8c <RCC_GetClocksFreq+0x40>
 8000d7c:	2b08      	cmp	r3, #8
 8000d7e:	d009      	beq.n	8000d94 <RCC_GetClocksFreq+0x48>
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d13d      	bne.n	8000e00 <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4a42      	ldr	r2, [pc, #264]	; (8000e90 <RCC_GetClocksFreq+0x144>)
 8000d88:	601a      	str	r2, [r3, #0]
      break;
 8000d8a:	e03d      	b.n	8000e08 <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4a41      	ldr	r2, [pc, #260]	; (8000e94 <RCC_GetClocksFreq+0x148>)
 8000d90:	601a      	str	r2, [r3, #0]
      break;
 8000d92:	e039      	b.n	8000e08 <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000d94:	4b3d      	ldr	r3, [pc, #244]	; (8000e8c <RCC_GetClocksFreq+0x140>)
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	0d9b      	lsrs	r3, r3, #22
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000da0:	4b3a      	ldr	r3, [pc, #232]	; (8000e8c <RCC_GetClocksFreq+0x140>)
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000da8:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d00c      	beq.n	8000dca <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000db0:	4a38      	ldr	r2, [pc, #224]	; (8000e94 <RCC_GetClocksFreq+0x148>)
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000db8:	4a34      	ldr	r2, [pc, #208]	; (8000e8c <RCC_GetClocksFreq+0x140>)
 8000dba:	6852      	ldr	r2, [r2, #4]
 8000dbc:	0992      	lsrs	r2, r2, #6
 8000dbe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000dc2:	fb02 f303 	mul.w	r3, r2, r3
 8000dc6:	61fb      	str	r3, [r7, #28]
 8000dc8:	e00b      	b.n	8000de2 <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000dca:	4a31      	ldr	r2, [pc, #196]	; (8000e90 <RCC_GetClocksFreq+0x144>)
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd2:	4a2e      	ldr	r2, [pc, #184]	; (8000e8c <RCC_GetClocksFreq+0x140>)
 8000dd4:	6852      	ldr	r2, [r2, #4]
 8000dd6:	0992      	lsrs	r2, r2, #6
 8000dd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000ddc:	fb02 f303 	mul.w	r3, r2, r3
 8000de0:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000de2:	4b2a      	ldr	r3, [pc, #168]	; (8000e8c <RCC_GetClocksFreq+0x140>)
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	0c1b      	lsrs	r3, r3, #16
 8000de8:	f003 0303 	and.w	r3, r3, #3
 8000dec:	3301      	adds	r3, #1
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000df2:	69fa      	ldr	r2, [r7, #28]
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	fbb2 f2f3 	udiv	r2, r2, r3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	601a      	str	r2, [r3, #0]
      break;
 8000dfe:	e003      	b.n	8000e08 <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4a23      	ldr	r2, [pc, #140]	; (8000e90 <RCC_GetClocksFreq+0x144>)
 8000e04:	601a      	str	r2, [r3, #0]
      break;
 8000e06:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000e08:	4b20      	ldr	r3, [pc, #128]	; (8000e8c <RCC_GetClocksFreq+0x140>)
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e10:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	091b      	lsrs	r3, r3, #4
 8000e16:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000e18:	4a1f      	ldr	r2, [pc, #124]	; (8000e98 <RCC_GetClocksFreq+0x14c>)
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	40da      	lsrs	r2, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000e30:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <RCC_GetClocksFreq+0x140>)
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000e38:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	0a9b      	lsrs	r3, r3, #10
 8000e3e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000e40:	4a15      	ldr	r2, [pc, #84]	; (8000e98 <RCC_GetClocksFreq+0x14c>)
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	4413      	add	r3, r2
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	685a      	ldr	r2, [r3, #4]
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	40da      	lsrs	r2, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000e58:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <RCC_GetClocksFreq+0x140>)
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000e60:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	0b5b      	lsrs	r3, r3, #13
 8000e66:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000e68:	4a0b      	ldr	r2, [pc, #44]	; (8000e98 <RCC_GetClocksFreq+0x14c>)
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	685a      	ldr	r2, [r3, #4]
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	40da      	lsrs	r2, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	60da      	str	r2, [r3, #12]
}
 8000e80:	bf00      	nop
 8000e82:	3724      	adds	r7, #36	; 0x24
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	00f42400 	.word	0x00f42400
 8000e94:	007a1200 	.word	0x007a1200
 8000e98:	20000000 	.word	0x20000000

08000e9c <RCC_LTDCCLKDivConfig>:
  *          LTDC clock frequency = f(PLLSAI_R) / RCC_PLLSAIDivR  
  *            
  * @retval None
  */
void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
  
  tmpreg = RCC->DCKCFGR;
 8000ea8:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <RCC_LTDCCLKDivConfig+0x38>)
 8000eaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000eae:	60fb      	str	r3, [r7, #12]

  /* Clear PLLSAIDIVR[2:0] bits */
  tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000eb6:	60fb      	str	r3, [r7, #12]

  /* Set PLLSAIDIVR values */
  tmpreg |= RCC_PLLSAIDivR;
 8000eb8:	68fa      	ldr	r2, [r7, #12]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->DCKCFGR = tmpreg;
 8000ec0:	4a04      	ldr	r2, [pc, #16]	; (8000ed4 <RCC_LTDCCLKDivConfig+0x38>)
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 8000ec8:	bf00      	nop
 8000eca:	3714      	adds	r7, #20
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	40023800 	.word	0x40023800

08000ed8 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000ee4:	78fb      	ldrb	r3, [r7, #3]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d006      	beq.n	8000ef8 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000eea:	490a      	ldr	r1, [pc, #40]	; (8000f14 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000eec:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000eee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000ef6:	e006      	b.n	8000f06 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000ef8:	4906      	ldr	r1, [pc, #24]	; (8000f14 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000efa:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000efc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	43db      	mvns	r3, r3
 8000f02:	4013      	ands	r3, r2
 8000f04:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000f06:	bf00      	nop
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	40023800 	.word	0x40023800

08000f18 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	460b      	mov	r3, r1
 8000f22:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000f24:	78fb      	ldrb	r3, [r7, #3]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d006      	beq.n	8000f38 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000f2a:	490a      	ldr	r1, [pc, #40]	; (8000f54 <RCC_APB2PeriphClockCmd+0x3c>)
 8000f2c:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <RCC_APB2PeriphClockCmd+0x3c>)
 8000f2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000f36:	e006      	b.n	8000f46 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000f38:	4906      	ldr	r1, [pc, #24]	; (8000f54 <RCC_APB2PeriphClockCmd+0x3c>)
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <RCC_APB2PeriphClockCmd+0x3c>)
 8000f3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	43db      	mvns	r3, r3
 8000f42:	4013      	ands	r3, r2
 8000f44:	644b      	str	r3, [r1, #68]	; 0x44
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	40023800 	.word	0x40023800

08000f58 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	460b      	mov	r3, r1
 8000f62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000f64:	78fb      	ldrb	r3, [r7, #3]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d006      	beq.n	8000f78 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8000f6a:	490a      	ldr	r1, [pc, #40]	; (8000f94 <RCC_APB1PeriphResetCmd+0x3c>)
 8000f6c:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <RCC_APB1PeriphResetCmd+0x3c>)
 8000f6e:	6a1a      	ldr	r2, [r3, #32]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 8000f76:	e006      	b.n	8000f86 <RCC_APB1PeriphResetCmd+0x2e>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8000f78:	4906      	ldr	r1, [pc, #24]	; (8000f94 <RCC_APB1PeriphResetCmd+0x3c>)
 8000f7a:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <RCC_APB1PeriphResetCmd+0x3c>)
 8000f7c:	6a1a      	ldr	r2, [r3, #32]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	43db      	mvns	r3, r3
 8000f82:	4013      	ands	r3, r2
 8000f84:	620b      	str	r3, [r1, #32]
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	40023800 	.word	0x40023800

08000f98 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000fa4:	78fb      	ldrb	r3, [r7, #3]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d006      	beq.n	8000fb8 <RCC_APB2PeriphResetCmd+0x20>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8000faa:	490a      	ldr	r1, [pc, #40]	; (8000fd4 <RCC_APB2PeriphResetCmd+0x3c>)
 8000fac:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <RCC_APB2PeriphResetCmd+0x3c>)
 8000fae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	624b      	str	r3, [r1, #36]	; 0x24
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
  }
}
 8000fb6:	e006      	b.n	8000fc6 <RCC_APB2PeriphResetCmd+0x2e>
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8000fb8:	4906      	ldr	r1, [pc, #24]	; (8000fd4 <RCC_APB2PeriphResetCmd+0x3c>)
 8000fba:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <RCC_APB2PeriphResetCmd+0x3c>)
 8000fbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	624b      	str	r3, [r1, #36]	; 0x24
}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	40023800 	.word	0x40023800

08000fd8 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b087      	sub	sp, #28
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8000fea:	2300      	movs	r3, #0
 8000fec:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	095b      	lsrs	r3, r3, #5
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d103      	bne.n	8001004 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8000ffc:	4b12      	ldr	r3, [pc, #72]	; (8001048 <RCC_GetFlagStatus+0x70>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	617b      	str	r3, [r7, #20]
 8001002:	e009      	b.n	8001018 <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	2b02      	cmp	r3, #2
 8001008:	d103      	bne.n	8001012 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 800100a:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <RCC_GetFlagStatus+0x70>)
 800100c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800100e:	617b      	str	r3, [r7, #20]
 8001010:	e002      	b.n	8001018 <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8001012:	4b0d      	ldr	r3, [pc, #52]	; (8001048 <RCC_GetFlagStatus+0x70>)
 8001014:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001016:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	f003 031f 	and.w	r3, r3, #31
 800101e:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8001020:	697a      	ldr	r2, [r7, #20]
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	fa22 f303 	lsr.w	r3, r2, r3
 8001028:	f003 0301 	and.w	r3, r3, #1
 800102c:	2b00      	cmp	r3, #0
 800102e:	d002      	beq.n	8001036 <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 8001030:	2301      	movs	r3, #1
 8001032:	74fb      	strb	r3, [r7, #19]
 8001034:	e001      	b.n	800103a <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 8001036:	2300      	movs	r3, #0
 8001038:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 800103a:	7cfb      	ldrb	r3, [r7, #19]
}
 800103c:	4618      	mov	r0, r3
 800103e:	371c      	adds	r7, #28
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	40023800 	.word	0x40023800

0800104c <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4a2e      	ldr	r2, [pc, #184]	; (8001110 <SPI_I2S_DeInit+0xc4>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d10a      	bne.n	8001072 <SPI_I2S_DeInit+0x26>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 800105c:	2101      	movs	r1, #1
 800105e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001062:	f7ff ff99 	bl	8000f98 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8001066:	2100      	movs	r1, #0
 8001068:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800106c:	f7ff ff94 	bl	8000f98 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
      /* Release SPI6 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
    }
  }
}
 8001070:	e049      	b.n	8001106 <SPI_I2S_DeInit+0xba>
  else if (SPIx == SPI2)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a27      	ldr	r2, [pc, #156]	; (8001114 <SPI_I2S_DeInit+0xc8>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d10a      	bne.n	8001090 <SPI_I2S_DeInit+0x44>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 800107a:	2101      	movs	r1, #1
 800107c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001080:	f7ff ff6a 	bl	8000f58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8001084:	2100      	movs	r1, #0
 8001086:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800108a:	f7ff ff65 	bl	8000f58 <RCC_APB1PeriphResetCmd>
}
 800108e:	e03a      	b.n	8001106 <SPI_I2S_DeInit+0xba>
  else if (SPIx == SPI3)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4a21      	ldr	r2, [pc, #132]	; (8001118 <SPI_I2S_DeInit+0xcc>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d10a      	bne.n	80010ae <SPI_I2S_DeInit+0x62>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8001098:	2101      	movs	r1, #1
 800109a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800109e:	f7ff ff5b 	bl	8000f58 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 80010a2:	2100      	movs	r1, #0
 80010a4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80010a8:	f7ff ff56 	bl	8000f58 <RCC_APB1PeriphResetCmd>
}
 80010ac:	e02b      	b.n	8001106 <SPI_I2S_DeInit+0xba>
  else if (SPIx == SPI4)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a1a      	ldr	r2, [pc, #104]	; (800111c <SPI_I2S_DeInit+0xd0>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d10a      	bne.n	80010cc <SPI_I2S_DeInit+0x80>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
 80010b6:	2101      	movs	r1, #1
 80010b8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80010bc:	f7ff ff6c 	bl	8000f98 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
 80010c0:	2100      	movs	r1, #0
 80010c2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80010c6:	f7ff ff67 	bl	8000f98 <RCC_APB2PeriphResetCmd>
}
 80010ca:	e01c      	b.n	8001106 <SPI_I2S_DeInit+0xba>
  else if (SPIx == SPI5)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4a14      	ldr	r2, [pc, #80]	; (8001120 <SPI_I2S_DeInit+0xd4>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d10a      	bne.n	80010ea <SPI_I2S_DeInit+0x9e>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, ENABLE);
 80010d4:	2101      	movs	r1, #1
 80010d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80010da:	f7ff ff5d 	bl	8000f98 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
 80010de:	2100      	movs	r1, #0
 80010e0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80010e4:	f7ff ff58 	bl	8000f98 <RCC_APB2PeriphResetCmd>
}
 80010e8:	e00d      	b.n	8001106 <SPI_I2S_DeInit+0xba>
    if (SPIx == SPI6)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a0d      	ldr	r2, [pc, #52]	; (8001124 <SPI_I2S_DeInit+0xd8>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d109      	bne.n	8001106 <SPI_I2S_DeInit+0xba>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
 80010f2:	2101      	movs	r1, #1
 80010f4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80010f8:	f7ff ff4e 	bl	8000f98 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
 80010fc:	2100      	movs	r1, #0
 80010fe:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001102:	f7ff ff49 	bl	8000f98 <RCC_APB2PeriphResetCmd>
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40013000 	.word	0x40013000
 8001114:	40003800 	.word	0x40003800
 8001118:	40003c00 	.word	0x40003c00
 800111c:	40013400 	.word	0x40013400
 8001120:	40015000 	.word	0x40015000
 8001124:	40015400 	.word	0x40015400

08001128 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	881b      	ldrh	r3, [r3, #0]
 800113a:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 800113c:	89fb      	ldrh	r3, [r7, #14]
 800113e:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8001142:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	881a      	ldrh	r2, [r3, #0]
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	885b      	ldrh	r3, [r3, #2]
 800114c:	4313      	orrs	r3, r2
 800114e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001154:	4313      	orrs	r3, r2
 8001156:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800115c:	4313      	orrs	r3, r2
 800115e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001164:	4313      	orrs	r3, r2
 8001166:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800116c:	4313      	orrs	r3, r2
 800116e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001174:	4313      	orrs	r3, r2
 8001176:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800117c:	4313      	orrs	r3, r2
 800117e:	b29a      	uxth	r2, r3
 8001180:	89fb      	ldrh	r3, [r7, #14]
 8001182:	4313      	orrs	r3, r2
 8001184:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	89fa      	ldrh	r2, [r7, #14]
 800118a:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	8b9b      	ldrh	r3, [r3, #28]
 8001190:	b29b      	uxth	r3, r3
 8001192:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001196:	b29a      	uxth	r2, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	8a1a      	ldrh	r2, [r3, #16]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	821a      	strh	r2, [r3, #16]
}
 80011a4:	bf00      	nop
 80011a6:	3714      	adds	r7, #20
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	460b      	mov	r3, r1
 80011ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80011bc:	78fb      	ldrb	r3, [r7, #3]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d008      	beq.n	80011d4 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	881b      	ldrh	r3, [r3, #0]
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011cc:	b29a      	uxth	r2, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
  }
}
 80011d2:	e007      	b.n	80011e4 <SPI_Cmd+0x34>
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	881b      	ldrh	r3, [r3, #0]
 80011d8:	b29b      	uxth	r3, r3
 80011da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80011de:	b29a      	uxth	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	801a      	strh	r2, [r3, #0]
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	460b      	mov	r3, r1
 80011fa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	887a      	ldrh	r2, [r7, #2]
 8001200:	819a      	strh	r2, [r3, #12]
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800120e:	b480      	push	{r7}
 8001210:	b085      	sub	sp, #20
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
 8001216:	460b      	mov	r3, r1
 8001218:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800121a:	2300      	movs	r3, #0
 800121c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	891b      	ldrh	r3, [r3, #8]
 8001222:	b29a      	uxth	r2, r3
 8001224:	887b      	ldrh	r3, [r7, #2]
 8001226:	4013      	ands	r3, r2
 8001228:	b29b      	uxth	r3, r3
 800122a:	2b00      	cmp	r3, #0
 800122c:	d002      	beq.n	8001234 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800122e:	2301      	movs	r3, #1
 8001230:	73fb      	strb	r3, [r7, #15]
 8001232:	e001      	b.n	8001238 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8001234:	2300      	movs	r3, #0
 8001236:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8001238:	7bfb      	ldrb	r3, [r7, #15]
}
 800123a:	4618      	mov	r0, r3
 800123c:	3714      	adds	r7, #20
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
	...

08001248 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08a      	sub	sp, #40	; 0x28
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8001252:	2300      	movs	r3, #0
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
 8001256:	2300      	movs	r3, #0
 8001258:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 800125a:	2300      	movs	r3, #0
 800125c:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 800125e:	2300      	movs	r3, #0
 8001260:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	8a1b      	ldrh	r3, [r3, #16]
 8001266:	b29b      	uxth	r3, r3
 8001268:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001270:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	88db      	ldrh	r3, [r3, #6]
 8001276:	461a      	mov	r2, r3
 8001278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127a:	4313      	orrs	r3, r2
 800127c:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800127e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001280:	b29a      	uxth	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	899b      	ldrh	r3, [r3, #12]
 800128a:	b29b      	uxth	r3, r3
 800128c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001290:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001294:	f023 030c 	bic.w	r3, r3, #12
 8001298:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	889a      	ldrh	r2, [r3, #4]
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	891b      	ldrh	r3, [r3, #8]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80012aa:	4313      	orrs	r3, r2
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	461a      	mov	r2, r3
 80012b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b2:	4313      	orrs	r3, r2
 80012b4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80012b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	8a9b      	ldrh	r3, [r3, #20]
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80012c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80012cc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	899b      	ldrh	r3, [r3, #12]
 80012d2:	461a      	mov	r2, r3
 80012d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d6:	4313      	orrs	r3, r2
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80012da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012dc:	b29a      	uxth	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80012e2:	f107 0308 	add.w	r3, r7, #8
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff fd30 	bl	8000d4c <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4a30      	ldr	r2, [pc, #192]	; (80013b0 <USART_Init+0x168>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d003      	beq.n	80012fc <USART_Init+0xb4>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4a2f      	ldr	r2, [pc, #188]	; (80013b4 <USART_Init+0x16c>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d102      	bne.n	8001302 <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	623b      	str	r3, [r7, #32]
 8001300:	e001      	b.n	8001306 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	899b      	ldrh	r3, [r3, #12]
 800130a:	b29b      	uxth	r3, r3
 800130c:	b21b      	sxth	r3, r3
 800130e:	2b00      	cmp	r3, #0
 8001310:	da0c      	bge.n	800132c <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8001312:	6a3a      	ldr	r2, [r7, #32]
 8001314:	4613      	mov	r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	4413      	add	r3, r2
 800131a:	009a      	lsls	r2, r3, #2
 800131c:	441a      	add	r2, r3
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	fbb2 f3f3 	udiv	r3, r2, r3
 8001328:	61fb      	str	r3, [r7, #28]
 800132a:	e00b      	b.n	8001344 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 800132c:	6a3a      	ldr	r2, [r7, #32]
 800132e:	4613      	mov	r3, r2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	4413      	add	r3, r2
 8001334:	009a      	lsls	r2, r3, #2
 8001336:	441a      	add	r2, r3
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001342:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	4a1c      	ldr	r2, [pc, #112]	; (80013b8 <USART_Init+0x170>)
 8001348:	fba2 2303 	umull	r2, r3, r2, r3
 800134c:	095b      	lsrs	r3, r3, #5
 800134e:	011b      	lsls	r3, r3, #4
 8001350:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8001352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001354:	091b      	lsrs	r3, r3, #4
 8001356:	2264      	movs	r2, #100	; 0x64
 8001358:	fb02 f303 	mul.w	r3, r2, r3
 800135c:	69fa      	ldr	r2, [r7, #28]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	899b      	ldrh	r3, [r3, #12]
 8001366:	b29b      	uxth	r3, r3
 8001368:	b21b      	sxth	r3, r3
 800136a:	2b00      	cmp	r3, #0
 800136c:	da0c      	bge.n	8001388 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	3332      	adds	r3, #50	; 0x32
 8001374:	4a10      	ldr	r2, [pc, #64]	; (80013b8 <USART_Init+0x170>)
 8001376:	fba2 2303 	umull	r2, r3, r2, r3
 800137a:	095b      	lsrs	r3, r3, #5
 800137c:	f003 0307 	and.w	r3, r3, #7
 8001380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001382:	4313      	orrs	r3, r2
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
 8001386:	e00b      	b.n	80013a0 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	011b      	lsls	r3, r3, #4
 800138c:	3332      	adds	r3, #50	; 0x32
 800138e:	4a0a      	ldr	r2, [pc, #40]	; (80013b8 <USART_Init+0x170>)
 8001390:	fba2 2303 	umull	r2, r3, r2, r3
 8001394:	095b      	lsrs	r3, r3, #5
 8001396:	f003 030f 	and.w	r3, r3, #15
 800139a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800139c:	4313      	orrs	r3, r2
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 80013a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	811a      	strh	r2, [r3, #8]
}
 80013a8:	bf00      	nop
 80013aa:	3728      	adds	r7, #40	; 0x28
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40011000 	.word	0x40011000
 80013b4:	40011400 	.word	0x40011400
 80013b8:	51eb851f 	.word	0x51eb851f

080013bc <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	460b      	mov	r3, r1
 80013c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80013c8:	78fb      	ldrb	r3, [r7, #3]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d008      	beq.n	80013e0 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	899b      	ldrh	r3, [r3, #12]
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013d8:	b29a      	uxth	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 80013de:	e007      	b.n	80013f0 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	899b      	ldrh	r3, [r3, #12]
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	819a      	strh	r2, [r3, #12]
}
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <STM_EVAL_LEDInit>:
  *     @arg LED3
  *     @arg LED4
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	4a10      	ldr	r2, [pc, #64]	; (800144c <STM_EVAL_LEDInit+0x50>)
 800140a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800140e:	2101      	movs	r1, #1
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff fd61 	bl	8000ed8 <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	4a0d      	ldr	r2, [pc, #52]	; (8001450 <STM_EVAL_LEDInit+0x54>)
 800141a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800141e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001420:	2301      	movs	r3, #1
 8001422:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001424:	2300      	movs	r3, #0
 8001426:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8001428:	2301      	movs	r3, #1
 800142a:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800142c:	2302      	movs	r3, #2
 800142e:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	4a08      	ldr	r2, [pc, #32]	; (8001454 <STM_EVAL_LEDInit+0x58>)
 8001434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001438:	f107 0208 	add.w	r2, r7, #8
 800143c:	4611      	mov	r1, r2
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff f8f0 	bl	8000624 <GPIO_Init>
}
 8001444:	bf00      	nop
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	0800237c 	.word	0x0800237c
 8001450:	08002378 	.word	0x08002378
 8001454:	20000010 	.word	0x20000010

08001458 <STM_EVAL_LEDOn>:
  *     @arg LED3
  *     @arg LED4 
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	4a06      	ldr	r2, [pc, #24]	; (8001480 <STM_EVAL_LEDOn+0x28>)
 8001466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800146a:	79fa      	ldrb	r2, [r7, #7]
 800146c:	4905      	ldr	r1, [pc, #20]	; (8001484 <STM_EVAL_LEDOn+0x2c>)
 800146e:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001472:	831a      	strh	r2, [r3, #24]
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	20000010 	.word	0x20000010
 8001484:	08002378 	.word	0x08002378

08001488 <STM_EVAL_LEDToggle>:
  *     @arg LED3
  *     @arg LED4  
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	4a09      	ldr	r2, [pc, #36]	; (80014bc <STM_EVAL_LEDToggle+0x34>)
 8001496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800149a:	79fa      	ldrb	r2, [r7, #7]
 800149c:	4907      	ldr	r1, [pc, #28]	; (80014bc <STM_EVAL_LEDToggle+0x34>)
 800149e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80014a2:	6952      	ldr	r2, [r2, #20]
 80014a4:	79f9      	ldrb	r1, [r7, #7]
 80014a6:	4806      	ldr	r0, [pc, #24]	; (80014c0 <STM_EVAL_LEDToggle+0x38>)
 80014a8:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 80014ac:	404a      	eors	r2, r1
 80014ae:	615a      	str	r2, [r3, #20]
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	20000010 	.word	0x20000010
 80014c0:	08002378 	.word	0x08002378

080014c4 <DMA1_Stream4_IRQHandler>:
  * @brief  This function handles the DMA Tx Channel interrupt Handler.
  * @param  None
  * @retval None
  */
void sEE_I2C_DMA_TX_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* Check if the DMA transfer is complete */
  if(DMA_GetFlagStatus(sEE_I2C_DMA_STREAM_TX, sEE_TX_DMA_FLAG_TCIF) != RESET)
 80014c8:	4916      	ldr	r1, [pc, #88]	; (8001524 <DMA1_Stream4_IRQHandler+0x60>)
 80014ca:	4817      	ldr	r0, [pc, #92]	; (8001528 <DMA1_Stream4_IRQHandler+0x64>)
 80014cc:	f7ff f840 	bl	8000550 <DMA_GetFlagStatus>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d024      	beq.n	8001520 <DMA1_Stream4_IRQHandler+0x5c>
  {  
    /* Disable the DMA Tx Stream and Clear TC flag */  
    DMA_Cmd(sEE_I2C_DMA_STREAM_TX, DISABLE);
 80014d6:	2100      	movs	r1, #0
 80014d8:	4813      	ldr	r0, [pc, #76]	; (8001528 <DMA1_Stream4_IRQHandler+0x64>)
 80014da:	f7ff f81d 	bl	8000518 <DMA_Cmd>
    DMA_ClearFlag(sEE_I2C_DMA_STREAM_TX, sEE_TX_DMA_FLAG_TCIF);
 80014de:	4911      	ldr	r1, [pc, #68]	; (8001524 <DMA1_Stream4_IRQHandler+0x60>)
 80014e0:	4811      	ldr	r0, [pc, #68]	; (8001528 <DMA1_Stream4_IRQHandler+0x64>)
 80014e2:	f7ff f871 	bl	80005c8 <DMA_ClearFlag>

    /*!< Wait till all data have been physically transferred on the bus */
    sEETimeout = sEE_LONG_TIMEOUT;
 80014e6:	4b11      	ldr	r3, [pc, #68]	; (800152c <DMA1_Stream4_IRQHandler+0x68>)
 80014e8:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 80014ec:	601a      	str	r2, [r3, #0]
    while(!I2C_GetFlagStatus(sEE_I2C, I2C_FLAG_BTF))
 80014ee:	e008      	b.n	8001502 <DMA1_Stream4_IRQHandler+0x3e>
    {
      if((sEETimeout--) == 0) sEE_TIMEOUT_UserCallback();
 80014f0:	4b0e      	ldr	r3, [pc, #56]	; (800152c <DMA1_Stream4_IRQHandler+0x68>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	1e5a      	subs	r2, r3, #1
 80014f6:	490d      	ldr	r1, [pc, #52]	; (800152c <DMA1_Stream4_IRQHandler+0x68>)
 80014f8:	600a      	str	r2, [r1, #0]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d101      	bne.n	8001502 <DMA1_Stream4_IRQHandler+0x3e>
 80014fe:	f000 fdfd 	bl	80020fc <sEE_TIMEOUT_UserCallback>
    while(!I2C_GetFlagStatus(sEE_I2C, I2C_FLAG_BTF))
 8001502:	490b      	ldr	r1, [pc, #44]	; (8001530 <DMA1_Stream4_IRQHandler+0x6c>)
 8001504:	480b      	ldr	r0, [pc, #44]	; (8001534 <DMA1_Stream4_IRQHandler+0x70>)
 8001506:	f7ff f9ba 	bl	800087e <I2C_GetFlagStatus>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d0ef      	beq.n	80014f0 <DMA1_Stream4_IRQHandler+0x2c>
    }
    
    /*!< Send STOP condition */
    I2C_GenerateSTOP(sEE_I2C, ENABLE);
 8001510:	2101      	movs	r1, #1
 8001512:	4808      	ldr	r0, [pc, #32]	; (8001534 <DMA1_Stream4_IRQHandler+0x70>)
 8001514:	f7ff f993 	bl	800083e <I2C_GenerateSTOP>
    
    /* Reset the variable holding the number of data to be written */
    *sEEDataWritePointer = 0;  
 8001518:	4b07      	ldr	r3, [pc, #28]	; (8001538 <DMA1_Stream4_IRQHandler+0x74>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2200      	movs	r2, #0
 800151e:	701a      	strb	r2, [r3, #0]
  }
}
 8001520:	bf00      	nop
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20000020 	.word	0x20000020
 8001528:	40026070 	.word	0x40026070
 800152c:	20000018 	.word	0x20000018
 8001530:	10000004 	.word	0x10000004
 8001534:	40005c00 	.word	0x40005c00
 8001538:	20000048 	.word	0x20000048

0800153c <DMA1_Stream2_IRQHandler>:
  * @brief  This function handles the DMA Rx Channel interrupt Handler.
  * @param  None
  * @retval None
  */
void sEE_I2C_DMA_RX_IRQHandler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* Check if the DMA transfer is complete */
  if(DMA_GetFlagStatus(sEE_I2C_DMA_STREAM_RX, sEE_RX_DMA_FLAG_TCIF) != RESET)
 8001540:	f04f 5181 	mov.w	r1, #270532608	; 0x10200000
 8001544:	480c      	ldr	r0, [pc, #48]	; (8001578 <DMA1_Stream2_IRQHandler+0x3c>)
 8001546:	f7ff f803 	bl	8000550 <DMA_GetFlagStatus>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d010      	beq.n	8001572 <DMA1_Stream2_IRQHandler+0x36>
  {      
    /*!< Send STOP Condition */
    I2C_GenerateSTOP(sEE_I2C, ENABLE);    
 8001550:	2101      	movs	r1, #1
 8001552:	480a      	ldr	r0, [pc, #40]	; (800157c <DMA1_Stream2_IRQHandler+0x40>)
 8001554:	f7ff f973 	bl	800083e <I2C_GenerateSTOP>
    
    /* Disable the DMA Rx Stream and Clear TC Flag */  
    DMA_Cmd(sEE_I2C_DMA_STREAM_RX, DISABLE);
 8001558:	2100      	movs	r1, #0
 800155a:	4807      	ldr	r0, [pc, #28]	; (8001578 <DMA1_Stream2_IRQHandler+0x3c>)
 800155c:	f7fe ffdc 	bl	8000518 <DMA_Cmd>
    DMA_ClearFlag(sEE_I2C_DMA_STREAM_RX, sEE_RX_DMA_FLAG_TCIF);
 8001560:	f04f 5181 	mov.w	r1, #270532608	; 0x10200000
 8001564:	4804      	ldr	r0, [pc, #16]	; (8001578 <DMA1_Stream2_IRQHandler+0x3c>)
 8001566:	f7ff f82f 	bl	80005c8 <DMA_ClearFlag>
    
    /* Reset the variable holding the number of data to be read */
    *sEEDataReadPointer = 0;
 800156a:	4b05      	ldr	r3, [pc, #20]	; (8001580 <DMA1_Stream2_IRQHandler+0x44>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2200      	movs	r2, #0
 8001570:	801a      	strh	r2, [r3, #0]
  }
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40026040 	.word	0x40026040
 800157c:	40005c00 	.word	0x40005c00
 8001580:	20000050 	.word	0x20000050

08001584 <LCD_ChipSelect>:
  * @brief  Enable or Disable the LCD through CS pin
  * @param  NewState CS pin state
  * @retval None
  */
void LCD_ChipSelect(FunctionalState NewState)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	71fb      	strb	r3, [r7, #7]
  if (NewState == DISABLE)
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d104      	bne.n	800159e <LCD_ChipSelect+0x1a>
  {
    GPIO_ResetBits(LCD_NCS_GPIO_PORT, LCD_NCS_PIN); /* CS pin low: LCD disabled */
 8001594:	2104      	movs	r1, #4
 8001596:	4806      	ldr	r0, [pc, #24]	; (80015b0 <LCD_ChipSelect+0x2c>)
 8001598:	f7ff f8e1 	bl	800075e <GPIO_ResetBits>
  }
  else
  {
    GPIO_SetBits(LCD_NCS_GPIO_PORT, LCD_NCS_PIN); /* CS pin high: LCD enabled */
  }
}
 800159c:	e003      	b.n	80015a6 <LCD_ChipSelect+0x22>
    GPIO_SetBits(LCD_NCS_GPIO_PORT, LCD_NCS_PIN); /* CS pin high: LCD enabled */
 800159e:	2104      	movs	r1, #4
 80015a0:	4803      	ldr	r0, [pc, #12]	; (80015b0 <LCD_ChipSelect+0x2c>)
 80015a2:	f7ff f8cd 	bl	8000740 <GPIO_SetBits>
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40020800 	.word	0x40020800

080015b4 <LCD_ClearLine>:
  *                                      0..26 if LCD_Currentfonts is Font12x12 or Font8x12
  *                                      0..39 if LCD_Currentfonts is Font8x8
  * @retval None
  */
void LCD_ClearLine(uint16_t Line)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	80fb      	strh	r3, [r7, #6]
  uint16_t refcolumn = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	81fb      	strh	r3, [r7, #14]
  /* Send the string character by character on lCD */
  while ((refcolumn < LCD_PIXEL_WIDTH) && (((refcolumn + LCD_Currentfonts->Width)& 0xFFFF) >= LCD_Currentfonts->Width))
 80015c2:	e00b      	b.n	80015dc <LCD_ClearLine+0x28>
  {
    /* Display one character on LCD */
    LCD_DisplayChar(Line, refcolumn, ' ');
 80015c4:	89f9      	ldrh	r1, [r7, #14]
 80015c6:	88fb      	ldrh	r3, [r7, #6]
 80015c8:	2220      	movs	r2, #32
 80015ca:	4618      	mov	r0, r3
 80015cc:	f000 f8d2 	bl	8001774 <LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += LCD_Currentfonts->Width;
 80015d0:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <LCD_ClearLine+0x50>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	889a      	ldrh	r2, [r3, #4]
 80015d6:	89fb      	ldrh	r3, [r7, #14]
 80015d8:	4413      	add	r3, r2
 80015da:	81fb      	strh	r3, [r7, #14]
  while ((refcolumn < LCD_PIXEL_WIDTH) && (((refcolumn + LCD_Currentfonts->Width)& 0xFFFF) >= LCD_Currentfonts->Width))
 80015dc:	89fb      	ldrh	r3, [r7, #14]
 80015de:	2bef      	cmp	r3, #239	; 0xef
 80015e0:	d80b      	bhi.n	80015fa <LCD_ClearLine+0x46>
 80015e2:	4b08      	ldr	r3, [pc, #32]	; (8001604 <LCD_ClearLine+0x50>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	889a      	ldrh	r2, [r3, #4]
 80015e8:	89fb      	ldrh	r3, [r7, #14]
 80015ea:	4413      	add	r3, r2
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	461a      	mov	r2, r3
 80015f0:	4b04      	ldr	r3, [pc, #16]	; (8001604 <LCD_ClearLine+0x50>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	889b      	ldrh	r3, [r3, #4]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	dae4      	bge.n	80015c4 <LCD_ClearLine+0x10>
  }
}
 80015fa:	bf00      	nop
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20000040 	.word	0x20000040

08001608 <LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background.
  * @retval None
  */
void LCD_Clear(uint16_t Color)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	80fb      	strh	r3, [r7, #6]
  uint32_t index = 0;
 8001612:	2300      	movs	r3, #0
 8001614:	60fb      	str	r3, [r7, #12]
  
  /* erase memory */
  for (index = 0x00; index < BUFFER_OFFSET; index++)
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	e00a      	b.n	8001632 <LCD_Clear+0x2a>
  {
    *(__IO uint16_t*)(CurrentFrameBuffer + (2*index)) = Color;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	005a      	lsls	r2, r3, #1
 8001620:	4b09      	ldr	r3, [pc, #36]	; (8001648 <LCD_Clear+0x40>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4413      	add	r3, r2
 8001626:	461a      	mov	r2, r3
 8001628:	88fb      	ldrh	r3, [r7, #6]
 800162a:	8013      	strh	r3, [r2, #0]
  for (index = 0x00; index < BUFFER_OFFSET; index++)
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	3301      	adds	r3, #1
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001638:	d3f0      	bcc.n	800161c <LCD_Clear+0x14>
  } 
}
 800163a:	bf00      	nop
 800163c:	3714      	adds	r7, #20
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	20000020 	.word	0x20000020

0800164c <LCD_DrawChar>:
  * @param  Ypos: start column address.
  * @param  c: pointer to the character data.
  * @retval None
  */
void LCD_DrawChar(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 800164c:	b480      	push	{r7}
 800164e:	b087      	sub	sp, #28
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	603a      	str	r2, [r7, #0]
 8001656:	80fb      	strh	r3, [r7, #6]
 8001658:	460b      	mov	r3, r1
 800165a:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0, xpos =0;
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]
 8001660:	2300      	movs	r3, #0
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	2300      	movs	r3, #0
 8001666:	60bb      	str	r3, [r7, #8]
  uint32_t  Xaddress = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	60fb      	str	r3, [r7, #12]
  
  xpos = Xpos*LCD_PIXEL_WIDTH*2;
 800166c:	88fa      	ldrh	r2, [r7, #6]
 800166e:	4613      	mov	r3, r2
 8001670:	011b      	lsls	r3, r3, #4
 8001672:	1a9b      	subs	r3, r3, r2
 8001674:	015b      	lsls	r3, r3, #5
 8001676:	60bb      	str	r3, [r7, #8]
  Xaddress += Ypos;
 8001678:	88bb      	ldrh	r3, [r7, #4]
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	4413      	add	r3, r2
 800167e:	60fb      	str	r3, [r7, #12]
  
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]
 8001684:	e05f      	b.n	8001746 <LCD_DrawChar+0xfa>
  {
    
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8001686:	2300      	movs	r3, #0
 8001688:	613b      	str	r3, [r7, #16]
 800168a:	e04a      	b.n	8001722 <LCD_DrawChar+0xd6>
    {
          
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) &&(LCD_Currentfonts->Width <= 12))||
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	4413      	add	r3, r2
 8001694:	881b      	ldrh	r3, [r3, #0]
 8001696:	4619      	mov	r1, r3
 8001698:	4b31      	ldr	r3, [pc, #196]	; (8001760 <LCD_DrawChar+0x114>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	889b      	ldrh	r3, [r3, #4]
 800169e:	4a31      	ldr	r2, [pc, #196]	; (8001764 <LCD_DrawChar+0x118>)
 80016a0:	fba2 2303 	umull	r2, r3, r2, r3
 80016a4:	08db      	lsrs	r3, r3, #3
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	2280      	movs	r2, #128	; 0x80
 80016ac:	409a      	lsls	r2, r3
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	fa42 f303 	asr.w	r3, r2, r3
 80016b4:	400b      	ands	r3, r1
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d104      	bne.n	80016c4 <LCD_DrawChar+0x78>
 80016ba:	4b29      	ldr	r3, [pc, #164]	; (8001760 <LCD_DrawChar+0x114>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	889b      	ldrh	r3, [r3, #4]
 80016c0:	2b0c      	cmp	r3, #12
 80016c2:	d911      	bls.n	80016e8 <LCD_DrawChar+0x9c>
        (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	4413      	add	r3, r2
 80016cc:	881b      	ldrh	r3, [r3, #0]
 80016ce:	461a      	mov	r2, r3
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	fa42 f303 	asr.w	r3, r2, r3
 80016d6:	f003 0301 	and.w	r3, r3, #1
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) &&(LCD_Currentfonts->Width <= 12))||
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d110      	bne.n	8001700 <LCD_DrawChar+0xb4>
        (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 80016de:	4b20      	ldr	r3, [pc, #128]	; (8001760 <LCD_DrawChar+0x114>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	889b      	ldrh	r3, [r3, #4]
 80016e4:	2b0c      	cmp	r3, #12
 80016e6:	d90b      	bls.n	8001700 <LCD_DrawChar+0xb4>
      {
          /* Write data value to all SDRAM memory */
         *(__IO uint16_t*) (CurrentFrameBuffer + (2*Xaddress) + xpos) = CurrentBackColor;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	005a      	lsls	r2, r3, #1
 80016ec:	4b1e      	ldr	r3, [pc, #120]	; (8001768 <LCD_DrawChar+0x11c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	441a      	add	r2, r3
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	4413      	add	r3, r2
 80016f6:	461a      	mov	r2, r3
 80016f8:	4b1c      	ldr	r3, [pc, #112]	; (800176c <LCD_DrawChar+0x120>)
 80016fa:	881b      	ldrh	r3, [r3, #0]
 80016fc:	8013      	strh	r3, [r2, #0]
 80016fe:	e00a      	b.n	8001716 <LCD_DrawChar+0xca>
      }
      else
      {
          /* Write data value to all SDRAM memory */
         *(__IO uint16_t*) (CurrentFrameBuffer + (2*Xaddress) + xpos) = CurrentTextColor;         
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	005a      	lsls	r2, r3, #1
 8001704:	4b18      	ldr	r3, [pc, #96]	; (8001768 <LCD_DrawChar+0x11c>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	441a      	add	r2, r3
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	4413      	add	r3, r2
 800170e:	461a      	mov	r2, r3
 8001710:	4b17      	ldr	r3, [pc, #92]	; (8001770 <LCD_DrawChar+0x124>)
 8001712:	881b      	ldrh	r3, [r3, #0]
 8001714:	8013      	strh	r3, [r2, #0]
      }
      Xaddress++;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	3301      	adds	r3, #1
 800171a:	60fb      	str	r3, [r7, #12]
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	3301      	adds	r3, #1
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	4b0f      	ldr	r3, [pc, #60]	; (8001760 <LCD_DrawChar+0x114>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	889b      	ldrh	r3, [r3, #4]
 8001728:	461a      	mov	r2, r3
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	429a      	cmp	r2, r3
 800172e:	d8ad      	bhi.n	800168c <LCD_DrawChar+0x40>
    }
      Xaddress += (LCD_PIXEL_WIDTH - LCD_Currentfonts->Width);
 8001730:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <LCD_DrawChar+0x114>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	889b      	ldrh	r3, [r3, #4]
 8001736:	461a      	mov	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	1a9b      	subs	r3, r3, r2
 800173c:	33f0      	adds	r3, #240	; 0xf0
 800173e:	60fb      	str	r3, [r7, #12]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	3301      	adds	r3, #1
 8001744:	617b      	str	r3, [r7, #20]
 8001746:	4b06      	ldr	r3, [pc, #24]	; (8001760 <LCD_DrawChar+0x114>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	88db      	ldrh	r3, [r3, #6]
 800174c:	461a      	mov	r2, r3
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	429a      	cmp	r2, r3
 8001752:	d898      	bhi.n	8001686 <LCD_DrawChar+0x3a>
  }
}
 8001754:	bf00      	nop
 8001756:	371c      	adds	r7, #28
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	20000040 	.word	0x20000040
 8001764:	aaaaaaab 	.word	0xaaaaaaab
 8001768:	20000020 	.word	0x20000020
 800176c:	2000001c 	.word	0x2000001c
 8001770:	20000044 	.word	0x20000044

08001774 <LCD_DisplayChar>:
  * @param  Column: start column address.
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E.
  * @retval None
  */
void LCD_DisplayChar(uint16_t Line, uint16_t Column, uint8_t Ascii)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	80fb      	strh	r3, [r7, #6]
 800177e:	460b      	mov	r3, r1
 8001780:	80bb      	strh	r3, [r7, #4]
 8001782:	4613      	mov	r3, r2
 8001784:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8001786:	78fb      	ldrb	r3, [r7, #3]
 8001788:	3b20      	subs	r3, #32
 800178a:	70fb      	strb	r3, [r7, #3]

  LCD_DrawChar(Line, Column, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 800178c:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <LCD_DisplayChar+0x40>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	78fb      	ldrb	r3, [r7, #3]
 8001794:	4907      	ldr	r1, [pc, #28]	; (80017b4 <LCD_DisplayChar+0x40>)
 8001796:	6809      	ldr	r1, [r1, #0]
 8001798:	88c9      	ldrh	r1, [r1, #6]
 800179a:	fb01 f303 	mul.w	r3, r1, r3
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	441a      	add	r2, r3
 80017a2:	88b9      	ldrh	r1, [r7, #4]
 80017a4:	88fb      	ldrh	r3, [r7, #6]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff ff50 	bl	800164c <LCD_DrawChar>
}
 80017ac:	bf00      	nop
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20000040 	.word	0x20000040

080017b8 <LCD_WriteCommand>:
  * @brief  Writes command to select the LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void LCD_WriteCommand(uint8_t LCD_Reg)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	71fb      	strb	r3, [r7, #7]
    /* Reset WRX to send command */
  LCD_CtrlLinesWrite(LCD_WRX_GPIO_PORT, LCD_WRX_PIN, Bit_RESET);
 80017c2:	2200      	movs	r2, #0
 80017c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017c8:	480e      	ldr	r0, [pc, #56]	; (8001804 <LCD_WriteCommand+0x4c>)
 80017ca:	f000 f9b3 	bl	8001b34 <LCD_CtrlLinesWrite>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_ChipSelect(DISABLE);
 80017ce:	2000      	movs	r0, #0
 80017d0:	f7ff fed8 	bl	8001584 <LCD_ChipSelect>
  SPI_I2S_SendData(LCD_SPI, LCD_Reg);
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	4619      	mov	r1, r3
 80017da:	480b      	ldr	r0, [pc, #44]	; (8001808 <LCD_WriteCommand+0x50>)
 80017dc:	f7ff fd08 	bl	80011f0 <SPI_I2S_SendData>
  
  /* Wait until a data is sent(not busy), before config /CS HIGH */
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_BSY) != RESET);
 80017e0:	bf00      	nop
 80017e2:	2180      	movs	r1, #128	; 0x80
 80017e4:	4808      	ldr	r0, [pc, #32]	; (8001808 <LCD_WriteCommand+0x50>)
 80017e6:	f7ff fd12 	bl	800120e <SPI_I2S_GetFlagStatus>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d1f8      	bne.n	80017e2 <LCD_WriteCommand+0x2a>
  delay(10);
 80017f0:	200a      	movs	r0, #10
 80017f2:	f000 fa15 	bl	8001c20 <delay>
  LCD_ChipSelect(ENABLE);
 80017f6:	2001      	movs	r0, #1
 80017f8:	f7ff fec4 	bl	8001584 <LCD_ChipSelect>
}
 80017fc:	bf00      	nop
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40020c00 	.word	0x40020c00
 8001808:	40015000 	.word	0x40015000

0800180c <LCD_WriteData>:
  *         This function must be used after LCD_WriteCommand() function
  * @param  value: data to write to the selected register.
  * @retval None
  */
void LCD_WriteData(uint8_t value)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	71fb      	strb	r3, [r7, #7]
    /* Set WRX to send data */
  LCD_CtrlLinesWrite(LCD_WRX_GPIO_PORT, LCD_WRX_PIN, Bit_SET);
 8001816:	2201      	movs	r2, #1
 8001818:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800181c:	480e      	ldr	r0, [pc, #56]	; (8001858 <LCD_WriteData+0x4c>)
 800181e:	f000 f989 	bl	8001b34 <LCD_CtrlLinesWrite>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_ChipSelect(DISABLE);
 8001822:	2000      	movs	r0, #0
 8001824:	f7ff feae 	bl	8001584 <LCD_ChipSelect>
  SPI_I2S_SendData(LCD_SPI, value);
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	b29b      	uxth	r3, r3
 800182c:	4619      	mov	r1, r3
 800182e:	480b      	ldr	r0, [pc, #44]	; (800185c <LCD_WriteData+0x50>)
 8001830:	f7ff fcde 	bl	80011f0 <SPI_I2S_SendData>
  
  /* Wait until a data is sent(not busy), before config /CS HIGH */
  while(SPI_I2S_GetFlagStatus(LCD_SPI, SPI_I2S_FLAG_BSY) != RESET);
 8001834:	bf00      	nop
 8001836:	2180      	movs	r1, #128	; 0x80
 8001838:	4808      	ldr	r0, [pc, #32]	; (800185c <LCD_WriteData+0x50>)
 800183a:	f7ff fce8 	bl	800120e <SPI_I2S_GetFlagStatus>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d1f8      	bne.n	8001836 <LCD_WriteData+0x2a>
  delay(10);
 8001844:	200a      	movs	r0, #10
 8001846:	f000 f9eb 	bl	8001c20 <delay>
  LCD_ChipSelect(ENABLE);
 800184a:	2001      	movs	r0, #1
 800184c:	f7ff fe9a 	bl	8001584 <LCD_ChipSelect>
}
 8001850:	bf00      	nop
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40020c00 	.word	0x40020c00
 800185c:	40015000 	.word	0x40015000

08001860 <LCD_PowerOn>:

void LCD_PowerOn(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  LCD_WriteCommand(0xCA);
 8001864:	20ca      	movs	r0, #202	; 0xca
 8001866:	f7ff ffa7 	bl	80017b8 <LCD_WriteCommand>
  LCD_WriteData(0xC3);
 800186a:	20c3      	movs	r0, #195	; 0xc3
 800186c:	f7ff ffce 	bl	800180c <LCD_WriteData>
  LCD_WriteData(0x08);
 8001870:	2008      	movs	r0, #8
 8001872:	f7ff ffcb 	bl	800180c <LCD_WriteData>
  LCD_WriteData(0x50);
 8001876:	2050      	movs	r0, #80	; 0x50
 8001878:	f7ff ffc8 	bl	800180c <LCD_WriteData>
  LCD_WriteCommand(LCD_POWERB);
 800187c:	20cf      	movs	r0, #207	; 0xcf
 800187e:	f7ff ff9b 	bl	80017b8 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8001882:	2000      	movs	r0, #0
 8001884:	f7ff ffc2 	bl	800180c <LCD_WriteData>
  LCD_WriteData(0xC1);
 8001888:	20c1      	movs	r0, #193	; 0xc1
 800188a:	f7ff ffbf 	bl	800180c <LCD_WriteData>
  LCD_WriteData(0x30);
 800188e:	2030      	movs	r0, #48	; 0x30
 8001890:	f7ff ffbc 	bl	800180c <LCD_WriteData>
  LCD_WriteCommand(LCD_POWER_SEQ);
 8001894:	20ed      	movs	r0, #237	; 0xed
 8001896:	f7ff ff8f 	bl	80017b8 <LCD_WriteCommand>
  LCD_WriteData(0x64);
 800189a:	2064      	movs	r0, #100	; 0x64
 800189c:	f7ff ffb6 	bl	800180c <LCD_WriteData>
  LCD_WriteData(0x03);
 80018a0:	2003      	movs	r0, #3
 80018a2:	f7ff ffb3 	bl	800180c <LCD_WriteData>
  LCD_WriteData(0x12);
 80018a6:	2012      	movs	r0, #18
 80018a8:	f7ff ffb0 	bl	800180c <LCD_WriteData>
  LCD_WriteData(0x81);
 80018ac:	2081      	movs	r0, #129	; 0x81
 80018ae:	f7ff ffad 	bl	800180c <LCD_WriteData>
  LCD_WriteCommand(LCD_DTCA);
 80018b2:	20e8      	movs	r0, #232	; 0xe8
 80018b4:	f7ff ff80 	bl	80017b8 <LCD_WriteCommand>
  LCD_WriteData(0x85);
 80018b8:	2085      	movs	r0, #133	; 0x85
 80018ba:	f7ff ffa7 	bl	800180c <LCD_WriteData>
  LCD_WriteData(0x00);
 80018be:	2000      	movs	r0, #0
 80018c0:	f7ff ffa4 	bl	800180c <LCD_WriteData>
  LCD_WriteData(0x78);
 80018c4:	2078      	movs	r0, #120	; 0x78
 80018c6:	f7ff ffa1 	bl	800180c <LCD_WriteData>
  LCD_WriteCommand(LCD_POWERA);
 80018ca:	20cb      	movs	r0, #203	; 0xcb
 80018cc:	f7ff ff74 	bl	80017b8 <LCD_WriteCommand>
  LCD_WriteData(0x39);
 80018d0:	2039      	movs	r0, #57	; 0x39
 80018d2:	f7ff ff9b 	bl	800180c <LCD_WriteData>
  LCD_WriteData(0x2C);
 80018d6:	202c      	movs	r0, #44	; 0x2c
 80018d8:	f7ff ff98 	bl	800180c <LCD_WriteData>
  LCD_WriteData(0x00);
 80018dc:	2000      	movs	r0, #0
 80018de:	f7ff ff95 	bl	800180c <LCD_WriteData>
  LCD_WriteData(0x34);
 80018e2:	2034      	movs	r0, #52	; 0x34
 80018e4:	f7ff ff92 	bl	800180c <LCD_WriteData>
  LCD_WriteData(0x02);
 80018e8:	2002      	movs	r0, #2
 80018ea:	f7ff ff8f 	bl	800180c <LCD_WriteData>
  LCD_WriteCommand(LCD_PRC);
 80018ee:	20f7      	movs	r0, #247	; 0xf7
 80018f0:	f7ff ff62 	bl	80017b8 <LCD_WriteCommand>
  LCD_WriteData(0x20);
 80018f4:	2020      	movs	r0, #32
 80018f6:	f7ff ff89 	bl	800180c <LCD_WriteData>
  LCD_WriteCommand(LCD_DTCB);
 80018fa:	20ea      	movs	r0, #234	; 0xea
 80018fc:	f7ff ff5c 	bl	80017b8 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8001900:	2000      	movs	r0, #0
 8001902:	f7ff ff83 	bl	800180c <LCD_WriteData>
  LCD_WriteData(0x00);
 8001906:	2000      	movs	r0, #0
 8001908:	f7ff ff80 	bl	800180c <LCD_WriteData>
  LCD_WriteCommand(LCD_FRC);
 800190c:	20b1      	movs	r0, #177	; 0xb1
 800190e:	f7ff ff53 	bl	80017b8 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8001912:	2000      	movs	r0, #0
 8001914:	f7ff ff7a 	bl	800180c <LCD_WriteData>
  LCD_WriteData(0x1B);
 8001918:	201b      	movs	r0, #27
 800191a:	f7ff ff77 	bl	800180c <LCD_WriteData>
  LCD_WriteCommand(LCD_DFC);
 800191e:	20b6      	movs	r0, #182	; 0xb6
 8001920:	f7ff ff4a 	bl	80017b8 <LCD_WriteCommand>
  LCD_WriteData(0x0A);
 8001924:	200a      	movs	r0, #10
 8001926:	f7ff ff71 	bl	800180c <LCD_WriteData>
  LCD_WriteData(0xA2);
 800192a:	20a2      	movs	r0, #162	; 0xa2
 800192c:	f7ff ff6e 	bl	800180c <LCD_WriteData>
  LCD_WriteCommand(LCD_POWER1);
 8001930:	20c0      	movs	r0, #192	; 0xc0
 8001932:	f7ff ff41 	bl	80017b8 <LCD_WriteCommand>
  LCD_WriteData(0x10);
 8001936:	2010      	movs	r0, #16
 8001938:	f7ff ff68 	bl	800180c <LCD_WriteData>
  LCD_WriteCommand(LCD_POWER2);
 800193c:	20c1      	movs	r0, #193	; 0xc1
 800193e:	f7ff ff3b 	bl	80017b8 <LCD_WriteCommand>
  LCD_WriteData(0x10);
 8001942:	2010      	movs	r0, #16
 8001944:	f7ff ff62 	bl	800180c <LCD_WriteData>
  LCD_WriteCommand(LCD_VCOM1);
 8001948:	20c5      	movs	r0, #197	; 0xc5
 800194a:	f7ff ff35 	bl	80017b8 <LCD_WriteCommand>
  LCD_WriteData(0x45);
 800194e:	2045      	movs	r0, #69	; 0x45
 8001950:	f7ff ff5c 	bl	800180c <LCD_WriteData>
  LCD_WriteData(0x15);
 8001954:	2015      	movs	r0, #21
 8001956:	f7ff ff59 	bl	800180c <LCD_WriteData>
  LCD_WriteCommand(LCD_VCOM2);
 800195a:	20c7      	movs	r0, #199	; 0xc7
 800195c:	f7ff ff2c 	bl	80017b8 <LCD_WriteCommand>
  LCD_WriteData(0x90);
 8001960:	2090      	movs	r0, #144	; 0x90
 8001962:	f7ff ff53 	bl	800180c <LCD_WriteData>
  LCD_WriteCommand(LCD_MAC);
 8001966:	2036      	movs	r0, #54	; 0x36
 8001968:	f7ff ff26 	bl	80017b8 <LCD_WriteCommand>
  LCD_WriteData(0xC8);
 800196c:	20c8      	movs	r0, #200	; 0xc8
 800196e:	f7ff ff4d 	bl	800180c <LCD_WriteData>
  LCD_WriteCommand(LCD_3GAMMA_EN);
 8001972:	20f2      	movs	r0, #242	; 0xf2
 8001974:	f7ff ff20 	bl	80017b8 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8001978:	2000      	movs	r0, #0
 800197a:	f7ff ff47 	bl	800180c <LCD_WriteData>
  LCD_WriteCommand(LCD_RGB_INTERFACE);
 800197e:	20b0      	movs	r0, #176	; 0xb0
 8001980:	f7ff ff1a 	bl	80017b8 <LCD_WriteCommand>
  LCD_WriteData(0xC2);
 8001984:	20c2      	movs	r0, #194	; 0xc2
 8001986:	f7ff ff41 	bl	800180c <LCD_WriteData>
  LCD_WriteCommand(LCD_DFC);
 800198a:	20b6      	movs	r0, #182	; 0xb6
 800198c:	f7ff ff14 	bl	80017b8 <LCD_WriteCommand>
  LCD_WriteData(0x0A);
 8001990:	200a      	movs	r0, #10
 8001992:	f7ff ff3b 	bl	800180c <LCD_WriteData>
  LCD_WriteData(0xA7);
 8001996:	20a7      	movs	r0, #167	; 0xa7
 8001998:	f7ff ff38 	bl	800180c <LCD_WriteData>
  LCD_WriteData(0x27);
 800199c:	2027      	movs	r0, #39	; 0x27
 800199e:	f7ff ff35 	bl	800180c <LCD_WriteData>
  LCD_WriteData(0x04);
 80019a2:	2004      	movs	r0, #4
 80019a4:	f7ff ff32 	bl	800180c <LCD_WriteData>

  /* colomn address set */
  LCD_WriteCommand(LCD_COLUMN_ADDR);
 80019a8:	202a      	movs	r0, #42	; 0x2a
 80019aa:	f7ff ff05 	bl	80017b8 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 80019ae:	2000      	movs	r0, #0
 80019b0:	f7ff ff2c 	bl	800180c <LCD_WriteData>
  LCD_WriteData(0x00);
 80019b4:	2000      	movs	r0, #0
 80019b6:	f7ff ff29 	bl	800180c <LCD_WriteData>
  LCD_WriteData(0x00);
 80019ba:	2000      	movs	r0, #0
 80019bc:	f7ff ff26 	bl	800180c <LCD_WriteData>
  LCD_WriteData(0xEF);
 80019c0:	20ef      	movs	r0, #239	; 0xef
 80019c2:	f7ff ff23 	bl	800180c <LCD_WriteData>
  /* Page Address Set */
  LCD_WriteCommand(LCD_PAGE_ADDR);
 80019c6:	202b      	movs	r0, #43	; 0x2b
 80019c8:	f7ff fef6 	bl	80017b8 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 80019cc:	2000      	movs	r0, #0
 80019ce:	f7ff ff1d 	bl	800180c <LCD_WriteData>
  LCD_WriteData(0x00);
 80019d2:	2000      	movs	r0, #0
 80019d4:	f7ff ff1a 	bl	800180c <LCD_WriteData>
  LCD_WriteData(0x01);
 80019d8:	2001      	movs	r0, #1
 80019da:	f7ff ff17 	bl	800180c <LCD_WriteData>
  LCD_WriteData(0x3F);
 80019de:	203f      	movs	r0, #63	; 0x3f
 80019e0:	f7ff ff14 	bl	800180c <LCD_WriteData>
  LCD_WriteCommand(LCD_INTERFACE);
 80019e4:	20f6      	movs	r0, #246	; 0xf6
 80019e6:	f7ff fee7 	bl	80017b8 <LCD_WriteCommand>
  LCD_WriteData(0x01);
 80019ea:	2001      	movs	r0, #1
 80019ec:	f7ff ff0e 	bl	800180c <LCD_WriteData>
  LCD_WriteData(0x00);
 80019f0:	2000      	movs	r0, #0
 80019f2:	f7ff ff0b 	bl	800180c <LCD_WriteData>
  LCD_WriteData(0x06);
 80019f6:	2006      	movs	r0, #6
 80019f8:	f7ff ff08 	bl	800180c <LCD_WriteData>
  
  LCD_WriteCommand(LCD_GRAM);
 80019fc:	202c      	movs	r0, #44	; 0x2c
 80019fe:	f7ff fedb 	bl	80017b8 <LCD_WriteCommand>
  delay(200);
 8001a02:	20c8      	movs	r0, #200	; 0xc8
 8001a04:	f000 f90c 	bl	8001c20 <delay>
  
  LCD_WriteCommand(LCD_GAMMA);
 8001a08:	2026      	movs	r0, #38	; 0x26
 8001a0a:	f7ff fed5 	bl	80017b8 <LCD_WriteCommand>
  LCD_WriteData(0x01);
 8001a0e:	2001      	movs	r0, #1
 8001a10:	f7ff fefc 	bl	800180c <LCD_WriteData>
  
  LCD_WriteCommand(LCD_PGAMMA);
 8001a14:	20e0      	movs	r0, #224	; 0xe0
 8001a16:	f7ff fecf 	bl	80017b8 <LCD_WriteCommand>
  LCD_WriteData(0x0F);
 8001a1a:	200f      	movs	r0, #15
 8001a1c:	f7ff fef6 	bl	800180c <LCD_WriteData>
  LCD_WriteData(0x29);
 8001a20:	2029      	movs	r0, #41	; 0x29
 8001a22:	f7ff fef3 	bl	800180c <LCD_WriteData>
  LCD_WriteData(0x24);
 8001a26:	2024      	movs	r0, #36	; 0x24
 8001a28:	f7ff fef0 	bl	800180c <LCD_WriteData>
  LCD_WriteData(0x0C);
 8001a2c:	200c      	movs	r0, #12
 8001a2e:	f7ff feed 	bl	800180c <LCD_WriteData>
  LCD_WriteData(0x0E);
 8001a32:	200e      	movs	r0, #14
 8001a34:	f7ff feea 	bl	800180c <LCD_WriteData>
  LCD_WriteData(0x09);
 8001a38:	2009      	movs	r0, #9
 8001a3a:	f7ff fee7 	bl	800180c <LCD_WriteData>
  LCD_WriteData(0x4E);
 8001a3e:	204e      	movs	r0, #78	; 0x4e
 8001a40:	f7ff fee4 	bl	800180c <LCD_WriteData>
  LCD_WriteData(0x78);
 8001a44:	2078      	movs	r0, #120	; 0x78
 8001a46:	f7ff fee1 	bl	800180c <LCD_WriteData>
  LCD_WriteData(0x3C);
 8001a4a:	203c      	movs	r0, #60	; 0x3c
 8001a4c:	f7ff fede 	bl	800180c <LCD_WriteData>
  LCD_WriteData(0x09);
 8001a50:	2009      	movs	r0, #9
 8001a52:	f7ff fedb 	bl	800180c <LCD_WriteData>
  LCD_WriteData(0x13);
 8001a56:	2013      	movs	r0, #19
 8001a58:	f7ff fed8 	bl	800180c <LCD_WriteData>
  LCD_WriteData(0x05);
 8001a5c:	2005      	movs	r0, #5
 8001a5e:	f7ff fed5 	bl	800180c <LCD_WriteData>
  LCD_WriteData(0x17);
 8001a62:	2017      	movs	r0, #23
 8001a64:	f7ff fed2 	bl	800180c <LCD_WriteData>
  LCD_WriteData(0x11);
 8001a68:	2011      	movs	r0, #17
 8001a6a:	f7ff fecf 	bl	800180c <LCD_WriteData>
  LCD_WriteData(0x00);
 8001a6e:	2000      	movs	r0, #0
 8001a70:	f7ff fecc 	bl	800180c <LCD_WriteData>
  LCD_WriteCommand(LCD_NGAMMA);
 8001a74:	20e1      	movs	r0, #225	; 0xe1
 8001a76:	f7ff fe9f 	bl	80017b8 <LCD_WriteCommand>
  LCD_WriteData(0x00);
 8001a7a:	2000      	movs	r0, #0
 8001a7c:	f7ff fec6 	bl	800180c <LCD_WriteData>
  LCD_WriteData(0x16);
 8001a80:	2016      	movs	r0, #22
 8001a82:	f7ff fec3 	bl	800180c <LCD_WriteData>
  LCD_WriteData(0x1B);
 8001a86:	201b      	movs	r0, #27
 8001a88:	f7ff fec0 	bl	800180c <LCD_WriteData>
  LCD_WriteData(0x04);
 8001a8c:	2004      	movs	r0, #4
 8001a8e:	f7ff febd 	bl	800180c <LCD_WriteData>
  LCD_WriteData(0x11);
 8001a92:	2011      	movs	r0, #17
 8001a94:	f7ff feba 	bl	800180c <LCD_WriteData>
  LCD_WriteData(0x07);
 8001a98:	2007      	movs	r0, #7
 8001a9a:	f7ff feb7 	bl	800180c <LCD_WriteData>
  LCD_WriteData(0x31);
 8001a9e:	2031      	movs	r0, #49	; 0x31
 8001aa0:	f7ff feb4 	bl	800180c <LCD_WriteData>
  LCD_WriteData(0x33);
 8001aa4:	2033      	movs	r0, #51	; 0x33
 8001aa6:	f7ff feb1 	bl	800180c <LCD_WriteData>
  LCD_WriteData(0x42);
 8001aaa:	2042      	movs	r0, #66	; 0x42
 8001aac:	f7ff feae 	bl	800180c <LCD_WriteData>
  LCD_WriteData(0x05);
 8001ab0:	2005      	movs	r0, #5
 8001ab2:	f7ff feab 	bl	800180c <LCD_WriteData>
  LCD_WriteData(0x0C);
 8001ab6:	200c      	movs	r0, #12
 8001ab8:	f7ff fea8 	bl	800180c <LCD_WriteData>
  LCD_WriteData(0x0A);
 8001abc:	200a      	movs	r0, #10
 8001abe:	f7ff fea5 	bl	800180c <LCD_WriteData>
  LCD_WriteData(0x28);
 8001ac2:	2028      	movs	r0, #40	; 0x28
 8001ac4:	f7ff fea2 	bl	800180c <LCD_WriteData>
  LCD_WriteData(0x2F);
 8001ac8:	202f      	movs	r0, #47	; 0x2f
 8001aca:	f7ff fe9f 	bl	800180c <LCD_WriteData>
  LCD_WriteData(0x0F);
 8001ace:	200f      	movs	r0, #15
 8001ad0:	f7ff fe9c 	bl	800180c <LCD_WriteData>
  
  LCD_WriteCommand(LCD_SLEEP_OUT);
 8001ad4:	2011      	movs	r0, #17
 8001ad6:	f7ff fe6f 	bl	80017b8 <LCD_WriteCommand>
  delay(200);
 8001ada:	20c8      	movs	r0, #200	; 0xc8
 8001adc:	f000 f8a0 	bl	8001c20 <delay>
  LCD_WriteCommand(LCD_DISPLAY_ON);
 8001ae0:	2029      	movs	r0, #41	; 0x29
 8001ae2:	f7ff fe69 	bl	80017b8 <LCD_WriteCommand>
  /* GRAM start writing */
  LCD_WriteCommand(LCD_GRAM);
 8001ae6:	202c      	movs	r0, #44	; 0x2c
 8001ae8:	f7ff fe66 	bl	80017b8 <LCD_WriteCommand>
 }
 8001aec:	bf00      	nop
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <LCD_CtrlLinesConfig>:
  *         when VDDIO is lower than required LCD supply.
  * @param  None
  * @retval None
  */
void LCD_CtrlLinesConfig(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  RCC_AHB1PeriphClockCmd(LCD_NCS_GPIO_CLK, ENABLE);
 8001af6:	2101      	movs	r1, #1
 8001af8:	2004      	movs	r0, #4
 8001afa:	f7ff f9ed 	bl	8000ed8 <RCC_AHB1PeriphClockCmd>

  /* Configure NCS in Output Push-Pull mode */
  GPIO_InitStructure.GPIO_Pin = LCD_NCS_PIN;
 8001afe:	2304      	movs	r3, #4
 8001b00:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001b02:	2302      	movs	r3, #2
 8001b04:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001b06:	2301      	movs	r3, #1
 8001b08:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001b12:	463b      	mov	r3, r7
 8001b14:	4619      	mov	r1, r3
 8001b16:	4806      	ldr	r0, [pc, #24]	; (8001b30 <LCD_CtrlLinesConfig+0x40>)
 8001b18:	f7fe fd84 	bl	8000624 <GPIO_Init>

  LCD_CtrlLinesWrite(LCD_NCS_GPIO_PORT, LCD_NCS_PIN, Bit_SET);
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	2104      	movs	r1, #4
 8001b20:	4803      	ldr	r0, [pc, #12]	; (8001b30 <LCD_CtrlLinesConfig+0x40>)
 8001b22:	f000 f807 	bl	8001b34 <LCD_CtrlLinesWrite>
}
 8001b26:	bf00      	nop
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40020800 	.word	0x40020800

08001b34 <LCD_CtrlLinesWrite>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void LCD_CtrlLinesWrite(GPIO_TypeDef* GPIOx, uint16_t CtrlPins, BitAction BitVal)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	807b      	strh	r3, [r7, #2]
 8001b40:	4613      	mov	r3, r2
 8001b42:	707b      	strb	r3, [r7, #1]
  /* Set or Reset the control line */
  GPIO_WriteBit(GPIOx, (uint16_t)CtrlPins, (BitAction)BitVal);
 8001b44:	787a      	ldrb	r2, [r7, #1]
 8001b46:	887b      	ldrh	r3, [r7, #2]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f7fe fe16 	bl	800077c <GPIO_WriteBit>
}
 8001b50:	bf00      	nop
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <LCD_SPIConfig>:
  * @brief  Configures the LCD_SPI interface.
  * @param  None
  * @retval None
  */
void LCD_SPIConfig(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b088      	sub	sp, #32
 8001b5c:	af00      	add	r7, sp, #0
  SPI_InitTypeDef    SPI_InitStructure;
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable LCD_SPI_SCK_GPIO_CLK, LCD_SPI_MISO_GPIO_CLK and LCD_SPI_MOSI_GPIO_CLK clock */
  RCC_AHB1PeriphClockCmd(LCD_SPI_SCK_GPIO_CLK | LCD_SPI_MISO_GPIO_CLK | LCD_SPI_MOSI_GPIO_CLK, ENABLE);
 8001b5e:	2101      	movs	r1, #1
 8001b60:	2020      	movs	r0, #32
 8001b62:	f7ff f9b9 	bl	8000ed8 <RCC_AHB1PeriphClockCmd>

  /* Enable LCD_SPI and SYSCFG clock  */
  RCC_APB2PeriphClockCmd(LCD_SPI_CLK, ENABLE);
 8001b66:	2101      	movs	r1, #1
 8001b68:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001b6c:	f7ff f9d4 	bl	8000f18 <RCC_APB2PeriphClockCmd>
  
  /* Configure LCD_SPI SCK pin */
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_SCK_PIN;
 8001b70:	2380      	movs	r3, #128	; 0x80
 8001b72:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001b74:	2302      	movs	r3, #2
 8001b76:	727b      	strb	r3, [r7, #9]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	723b      	strb	r3, [r7, #8]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	72bb      	strb	r3, [r7, #10]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	72fb      	strb	r3, [r7, #11]
  GPIO_Init(LCD_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
 8001b84:	1d3b      	adds	r3, r7, #4
 8001b86:	4619      	mov	r1, r3
 8001b88:	4823      	ldr	r0, [pc, #140]	; (8001c18 <LCD_SPIConfig+0xc0>)
 8001b8a:	f7fe fd4b 	bl	8000624 <GPIO_Init>

  /* Configure LCD_SPI MISO pin */
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_MISO_PIN;
 8001b8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b92:	607b      	str	r3, [r7, #4]
  GPIO_Init(LCD_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
 8001b94:	1d3b      	adds	r3, r7, #4
 8001b96:	4619      	mov	r1, r3
 8001b98:	481f      	ldr	r0, [pc, #124]	; (8001c18 <LCD_SPIConfig+0xc0>)
 8001b9a:	f7fe fd43 	bl	8000624 <GPIO_Init>

  /* Configure LCD_SPI MOSI pin */
  GPIO_InitStructure.GPIO_Pin = LCD_SPI_MOSI_PIN;
 8001b9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ba2:	607b      	str	r3, [r7, #4]
  GPIO_Init(LCD_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
 8001ba4:	1d3b      	adds	r3, r7, #4
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	481b      	ldr	r0, [pc, #108]	; (8001c18 <LCD_SPIConfig+0xc0>)
 8001baa:	f7fe fd3b 	bl	8000624 <GPIO_Init>

  /* Connect SPI SCK */
  GPIO_PinAFConfig(LCD_SPI_SCK_GPIO_PORT, LCD_SPI_SCK_SOURCE, LCD_SPI_SCK_AF);
 8001bae:	2205      	movs	r2, #5
 8001bb0:	2107      	movs	r1, #7
 8001bb2:	4819      	ldr	r0, [pc, #100]	; (8001c18 <LCD_SPIConfig+0xc0>)
 8001bb4:	f7fe fdfa 	bl	80007ac <GPIO_PinAFConfig>

  /* Connect SPI MISO */
  GPIO_PinAFConfig(LCD_SPI_MISO_GPIO_PORT, LCD_SPI_MISO_SOURCE, LCD_SPI_MISO_AF);
 8001bb8:	2205      	movs	r2, #5
 8001bba:	2108      	movs	r1, #8
 8001bbc:	4816      	ldr	r0, [pc, #88]	; (8001c18 <LCD_SPIConfig+0xc0>)
 8001bbe:	f7fe fdf5 	bl	80007ac <GPIO_PinAFConfig>

  /* Connect SPI MOSI */
  GPIO_PinAFConfig(LCD_SPI_MOSI_GPIO_PORT, LCD_SPI_MOSI_SOURCE, LCD_SPI_MOSI_AF);
 8001bc2:	2205      	movs	r2, #5
 8001bc4:	2109      	movs	r1, #9
 8001bc6:	4814      	ldr	r0, [pc, #80]	; (8001c18 <LCD_SPIConfig+0xc0>)
 8001bc8:	f7fe fdf0 	bl	80007ac <GPIO_PinAFConfig>
  
  SPI_I2S_DeInit(LCD_SPI);
 8001bcc:	4813      	ldr	r0, [pc, #76]	; (8001c1c <LCD_SPIConfig+0xc4>)
 8001bce:	f7ff fa3d 	bl	800104c <SPI_I2S_DeInit>
  
  /* SPI Config */
  SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex; //SPI_Direction_1Line_Tx;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	81bb      	strh	r3, [r7, #12]
  SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8001bd6:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001bda:	81fb      	strh	r3, [r7, #14]
  SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	823b      	strh	r3, [r7, #16]
  SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 8001be0:	2300      	movs	r3, #0
 8001be2:	827b      	strh	r3, [r7, #18]
  SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 8001be4:	2300      	movs	r3, #0
 8001be6:	82bb      	strh	r3, [r7, #20]
  SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8001be8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bec:	82fb      	strh	r3, [r7, #22]
  SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_4; 
 8001bee:	2308      	movs	r3, #8
 8001bf0:	833b      	strh	r3, [r7, #24]
  SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	837b      	strh	r3, [r7, #26]
  SPI_InitStructure.SPI_CRCPolynomial = 7;
 8001bf6:	2307      	movs	r3, #7
 8001bf8:	83bb      	strh	r3, [r7, #28]
  SPI_Init(LCD_SPI, &SPI_InitStructure);
 8001bfa:	f107 030c 	add.w	r3, r7, #12
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4806      	ldr	r0, [pc, #24]	; (8001c1c <LCD_SPIConfig+0xc4>)
 8001c02:	f7ff fa91 	bl	8001128 <SPI_Init>

  /* SPI enable */
  SPI_Cmd(LCD_SPI, ENABLE);
 8001c06:	2101      	movs	r1, #1
 8001c08:	4804      	ldr	r0, [pc, #16]	; (8001c1c <LCD_SPIConfig+0xc4>)
 8001c0a:	f7ff fad1 	bl	80011b0 <SPI_Cmd>
}
 8001c0e:	bf00      	nop
 8001c10:	3720      	adds	r7, #32
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40021400 	.word	0x40021400
 8001c1c:	40015000 	.word	0x40015000

08001c20 <delay>:
  * @brief  Inserts a delay time.
  * @param  nCount: specifies the delay time length.
  * @retval None
  */
static void delay(__IO uint32_t nCount)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  __IO uint32_t index = 0; 
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60fb      	str	r3, [r7, #12]
  for(index = nCount; index != 0; index--)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	e002      	b.n	8001c38 <delay+0x18>
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	3b01      	subs	r3, #1
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1f9      	bne.n	8001c32 <delay+0x12>
  {
  }
}
 8001c3e:	bf00      	nop
 8001c40:	3714      	adds	r7, #20
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
	...

08001c4c <main>:
**===========================================================================
*/


int main(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b096      	sub	sp, #88	; 0x58
 8001c50:	af00      	add	r7, sp, #0

  /*Declaration of variables, initialization structures*/

   GPIO_InitTypeDef  GPIO_InitStructure, GPIO_InitStructureAN;
   USART_InitTypeDef USART_InitStruct;
   int i = 0;
 8001c52:	2300      	movs	r3, #0
 8001c54:	653b      	str	r3, [r7, #80]	; 0x50
  /*Initialize Clock to ADC, LTDC, USART, GPIO*/

  /*ADC1 and LTDC, both the peripherals on ABP2. Hence we initialize the clock to these
   *Peripherals with following functions: */

  RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 8001c56:	2101      	movs	r1, #1
 8001c58:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001c5c:	f7ff f95c 	bl	8000f18 <RCC_APB2PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_LTDC, ENABLE);
 8001c60:	2101      	movs	r1, #1
 8001c62:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001c66:	f7ff f957 	bl	8000f18 <RCC_APB2PeriphClockCmd>

  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	f7ff f933 	bl	8000ed8 <RCC_AHB1PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1,ENABLE);
 8001c72:	2101      	movs	r1, #1
 8001c74:	2010      	movs	r0, #16
 8001c76:	f7ff f94f 	bl	8000f18 <RCC_APB2PeriphClockCmd>

  /*Set PA9 and PA10 to alternate function of USART*/
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource9, GPIO_AF_USART1);
 8001c7a:	2207      	movs	r2, #7
 8001c7c:	2109      	movs	r1, #9
 8001c7e:	485c      	ldr	r0, [pc, #368]	; (8001df0 <main+0x1a4>)
 8001c80:	f7fe fd94 	bl	80007ac <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_USART1);
 8001c84:	2207      	movs	r2, #7
 8001c86:	210a      	movs	r1, #10
 8001c88:	4859      	ldr	r0, [pc, #356]	; (8001df0 <main+0x1a4>)
 8001c8a:	f7fe fd8f 	bl	80007ac <GPIO_PinAFConfig>

  /*GPIOA Initialization for PA1, PA9 and PA10*/
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 8001c8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c92:	643b      	str	r3, [r7, #64]	; 0x40
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001c94:	2302      	movs	r3, #2
 8001c96:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001cac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	484f      	ldr	r0, [pc, #316]	; (8001df0 <main+0x1a4>)
 8001cb4:	f7fe fcb6 	bl	8000624 <GPIO_Init>
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 8001cb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cbc:	643b      	str	r3, [r7, #64]	; 0x40
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001cbe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	484a      	ldr	r0, [pc, #296]	; (8001df0 <main+0x1a4>)
 8001cc6:	f7fe fcad 	bl	8000624 <GPIO_Init>

  /*Setting PA1 as Analog pin with no pull*/
  GPIO_InitStructureAN.GPIO_Pin = GPIO_Pin_0;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructureAN.GPIO_Mode = GPIO_Mode_AN;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  GPIO_InitStructureAN.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  GPIO_Init(GPIOA, &GPIO_InitStructureAN);
 8001cda:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4843      	ldr	r0, [pc, #268]	; (8001df0 <main+0x1a4>)
 8001ce2:	f7fe fc9f 	bl	8000624 <GPIO_Init>


  /*USART Initialization*/

  USART_InitStruct.USART_BaudRate = 115200;
 8001ce6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001cea:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8001cec:	2300      	movs	r3, #0
 8001cee:	86bb      	strh	r3, [r7, #52]	; 0x34
  USART_InitStruct.USART_Mode = USART_Mode_Tx;
 8001cf0:	2308      	movs	r3, #8
 8001cf2:	867b      	strh	r3, [r7, #50]	; 0x32
  USART_InitStruct.USART_Parity = USART_Parity_No;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	863b      	strh	r3, [r7, #48]	; 0x30
  USART_InitStruct.USART_StopBits = USART_StopBits_1;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	85fb      	strh	r3, [r7, #46]	; 0x2e
  USART_InitStruct.USART_WordLength = USART_WordLength_8b;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	85bb      	strh	r3, [r7, #44]	; 0x2c
  USART_Init(USART1, &USART_InitStruct);
 8001d00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d04:	4619      	mov	r1, r3
 8001d06:	483b      	ldr	r0, [pc, #236]	; (8001df4 <main+0x1a8>)
 8001d08:	f7ff fa9e 	bl	8001248 <USART_Init>
  USART_Cmd	(USART1, ENABLE);
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	4839      	ldr	r0, [pc, #228]	; (8001df4 <main+0x1a8>)
 8001d10:	f7ff fb54 	bl	80013bc <USART_Cmd>

  /*ADC Initialization*/

  ADC_InitTypeDef ADC1_Init_Type;
  ADC1_Init_Type.ADC_Resolution = ADC_Resolution_12b; //Set-up ADC in 12-bit resolution mode
 8001d14:	2300      	movs	r3, #0
 8001d16:	613b      	str	r3, [r7, #16]
  ADC1_Init_Type.ADC_ScanConvMode = DISABLE; //Set-up ADC for single channel mode
 8001d18:	2300      	movs	r3, #0
 8001d1a:	753b      	strb	r3, [r7, #20]
  ADC1_Init_Type.ADC_NbrOfConversion = 1; //Number of "Regular" conversions set at 1
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  ADC1_Init_Type.ADC_DataAlign = ADC_DataAlign_Right; //Conversion result will be stored in right-aligned mode
 8001d22:	2300      	movs	r3, #0
 8001d24:	623b      	str	r3, [r7, #32]
  ADC1_Init_Type.ADC_ContinuousConvMode = ENABLE; //Conversion does not stop at EOC signal
 8001d26:	2301      	movs	r3, #1
 8001d28:	757b      	strb	r3, [r7, #21]
  ADC1_Init_Type.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61fb      	str	r3, [r7, #28]
  ADC1_Init_Type.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61bb      	str	r3, [r7, #24]
  ADC_CommonInitTypeDef ADC1_Common_Init_Type;
  ADC_CommonStructInit(&ADC1_Common_Init_Type);
 8001d32:	463b      	mov	r3, r7
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7fe fad7 	bl	80002e8 <ADC_CommonStructInit>
  /*Initialize ADC1_Common_Init_Type.ADC_Mode to Independent, ADC1_Common_Init_Type.ADC_Prescaler to 2,
   ADC1_Common_Init_Type.ADC_DMAAccessMode to disabled, ADC1_Common_Init_Type.ADC_TwoSamplingDelay to 5  cycles*/



  ADC_CommonInit(&ADC1_Common_Init_Type);
 8001d3a:	463b      	mov	r3, r7
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7fe faab 	bl	8000298 <ADC_CommonInit>
  ADC_Init(ADC1, &ADC1_Init_Type);
 8001d42:	f107 0310 	add.w	r3, r7, #16
 8001d46:	4619      	mov	r1, r3
 8001d48:	482b      	ldr	r0, [pc, #172]	; (8001df8 <main+0x1ac>)
 8001d4a:	f7fe fa4f 	bl	80001ec <ADC_Init>
  //ADC_ContinuousModeCmd (ADC1, ENABLE);
  ADC_DiscModeCmd (ADC1, DISABLE);
 8001d4e:	2100      	movs	r1, #0
 8001d50:	4829      	ldr	r0, [pc, #164]	; (8001df8 <main+0x1ac>)
 8001d52:	f7fe fbc5 	bl	80004e0 <ADC_DiscModeCmd>
  //ADC_EOCOnEachRegularChannelCmd(ADC1,ENABLE);
  ADC_RegularChannelConfig( ADC1, ADC_Channel_0, 1, ADC_SampleTime_3Cycles);
 8001d56:	2300      	movs	r3, #0
 8001d58:	2201      	movs	r2, #1
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	4826      	ldr	r0, [pc, #152]	; (8001df8 <main+0x1ac>)
 8001d5e:	f7fe faf5 	bl	800034c <ADC_RegularChannelConfig>
  ADC_Cmd (ADC1, ENABLE);
 8001d62:	2101      	movs	r1, #1
 8001d64:	4824      	ldr	r0, [pc, #144]	; (8001df8 <main+0x1ac>)
 8001d66:	f7fe fad5 	bl	8000314 <ADC_Cmd>
  	  6. Misc (Addressed)
  */


  /* Initialize LTCD*/
  uint32_t tobuttom = 0;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t totop = 0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Configure LCD : Configure 2 layers w/ Blending and CLUT loading for layer 1 */
  LCD_Config();
 8001d72:	f000 f845 	bl	8001e00 <LCD_Config>

  /* Enable Layer 1 */
  LTDC_LayerCmd(LTDC_Layer1, ENABLE);
 8001d76:	2101      	movs	r1, #1
 8001d78:	4820      	ldr	r0, [pc, #128]	; (8001dfc <main+0x1b0>)
 8001d7a:	f7fe ff31 	bl	8000be0 <LTDC_LayerCmd>

  /* Reload LTDC configuration  */
 LTDC_ReloadConfig(LTDC_IMReload);
 8001d7e:	2001      	movs	r0, #1
 8001d80:	f7fe fe84 	bl	8000a8c <LTDC_ReloadConfig>
 LTDC_LayerPosition(LTDC_Layer1, 0, (40));
 8001d84:	2228      	movs	r2, #40	; 0x28
 8001d86:	2100      	movs	r1, #0
 8001d88:	481c      	ldr	r0, [pc, #112]	; (8001dfc <main+0x1b0>)
 8001d8a:	f7fe ff45 	bl	8000c18 <LTDC_LayerPosition>
 /* Reload LTDC configuration  */
 LTDC_ReloadConfig(LTDC_IMReload);
 8001d8e:	2001      	movs	r0, #1
 8001d90:	f7fe fe7c 	bl	8000a8c <LTDC_ReloadConfig>

  /* Enable The LCD */
  LTDC_Cmd(ENABLE);
 8001d94:	2001      	movs	r0, #1
 8001d96:	f7fe fe3d 	bl	8000a14 <LTDC_Cmd>

  /*LTDC Initialization End*/


  //STM_EVAL_LEDInit(LED3);
  STM_EVAL_LEDInit(LED4);
 8001d9a:	2001      	movs	r0, #1
 8001d9c:	f7ff fb2e 	bl	80013fc <STM_EVAL_LEDInit>

  //STM_EVAL_LEDOn(LED3);
  STM_EVAL_LEDOn(LED4);
 8001da0:	2001      	movs	r0, #1
 8001da2:	f7ff fb59 	bl	8001458 <STM_EVAL_LEDOn>

  float tempff, tempDecimals;
  //int count =0;
  /* Infinite loop */
 // LCD_SetColors (0x0000, 0x4db4);
  delay(1000);
 8001da6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001daa:	f000 f98d 	bl	80020c8 <delay>

  int lineA = 0;
 8001dae:	2300      	movs	r3, #0
 8001db0:	657b      	str	r3, [r7, #84]	; 0x54
  while (1)
  {

	  STM_EVAL_LEDToggle(LED4);
 8001db2:	2001      	movs	r0, #1
 8001db4:	f7ff fb68 	bl	8001488 <STM_EVAL_LEDToggle>
	  delay(100);
 8001db8:	2064      	movs	r0, #100	; 0x64
 8001dba:	f000 f985 	bl	80020c8 <delay>

	  for(lineA = 40; lineA <281; lineA++ )
 8001dbe:	2328      	movs	r3, #40	; 0x28
 8001dc0:	657b      	str	r3, [r7, #84]	; 0x54
 8001dc2:	e010      	b.n	8001de6 <main+0x19a>
	  {
		  LCD_ClearLine	(lineA);
 8001dc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff fbf3 	bl	80015b4 <LCD_ClearLine>
		  delay(100);
 8001dce:	2064      	movs	r0, #100	; 0x64
 8001dd0:	f000 f97a 	bl	80020c8 <delay>
		  LTDC_ReloadConfig(LTDC_IMReload);
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	f7fe fe59 	bl	8000a8c <LTDC_ReloadConfig>
		  delay(100);
 8001dda:	2064      	movs	r0, #100	; 0x64
 8001ddc:	f000 f974 	bl	80020c8 <delay>
	  for(lineA = 40; lineA <281; lineA++ )
 8001de0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001de2:	3301      	adds	r3, #1
 8001de4:	657b      	str	r3, [r7, #84]	; 0x54
 8001de6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001de8:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8001dec:	ddea      	ble.n	8001dc4 <main+0x178>
	  STM_EVAL_LEDToggle(LED4);
 8001dee:	e7e0      	b.n	8001db2 <main+0x166>
 8001df0:	40020000 	.word	0x40020000
 8001df4:	40011000 	.word	0x40011000
 8001df8:	40012000 	.word	0x40012000
 8001dfc:	40016884 	.word	0x40016884

08001e00 <LCD_Config>:


}

static void LCD_Config(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b0a2      	sub	sp, #136	; 0x88
 8001e04:	af00      	add	r7, sp, #0

	  LTDC_InitTypeDef               LTDC_InitStruct;
	  LTDC_Layer_InitTypeDef         LTDC_Layer_InitStruct;
	  GPIO_InitTypeDef               GPIO_InitStructure;

	  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8001e06:	2101      	movs	r1, #1
 8001e08:	2008      	movs	r0, #8
 8001e0a:	f7ff f865 	bl	8000ed8 <RCC_AHB1PeriphClockCmd>

	  /* Configure NCS in Output Push-Pull mode */
	  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
 8001e0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e12:	607b      	str	r3, [r7, #4]
	  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001e14:	2302      	movs	r3, #2
 8001e16:	727b      	strb	r3, [r7, #9]
	  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	723b      	strb	r3, [r7, #8]
	  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	72bb      	strb	r3, [r7, #10]
	  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	72fb      	strb	r3, [r7, #11]
	  GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001e24:	1d3b      	adds	r3, r7, #4
 8001e26:	4619      	mov	r1, r3
 8001e28:	4849      	ldr	r0, [pc, #292]	; (8001f50 <LCD_Config+0x150>)
 8001e2a:	f7fe fbfb 	bl	8000624 <GPIO_Init>


	  /* Configure the LCD Control pins ------------------------------------------*/
	  LCD_CtrlLinesConfig();
 8001e2e:	f7ff fe5f 	bl	8001af0 <LCD_CtrlLinesConfig>
	  LCD_ChipSelect(DISABLE);
 8001e32:	2000      	movs	r0, #0
 8001e34:	f7ff fba6 	bl	8001584 <LCD_ChipSelect>
	  LCD_ChipSelect(ENABLE);
 8001e38:	2001      	movs	r0, #1
 8001e3a:	f7ff fba3 	bl	8001584 <LCD_ChipSelect>

	  /* Configure the LCD_SPI interface -----------------------------------------*/
	  LCD_SPIConfig();
 8001e3e:	f7ff fe8b 	bl	8001b58 <LCD_SPIConfig>

	  /* Power on the LCD --------------------------------------------------------*/
	  LCD_PowerOn();
 8001e42:	f7ff fd0d 	bl	8001860 <LCD_PowerOn>

	  /* Enable the LTDC Clock */
	  RCC_APB2PeriphClockCmd(RCC_APB2Periph_LTDC, ENABLE);
 8001e46:	2101      	movs	r1, #1
 8001e48:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001e4c:	f7ff f864 	bl	8000f18 <RCC_APB2PeriphClockCmd>

	  /* Enable the DMA2D Clock */
	  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2D, ENABLE);
 8001e50:	2101      	movs	r1, #1
 8001e52:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001e56:	f7ff f83f 	bl	8000ed8 <RCC_AHB1PeriphClockCmd>

	  /* Configure the LCD Control pins */
	  LCD_AF_GPIOConfig();
 8001e5a:	f000 f87f 	bl	8001f5c <LCD_AF_GPIOConfig>
	  /* Configure PLLSAI prescalers for LCD */
	  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAI_N = 192 Mhz */
	  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAI_R = 192/3 = 64 Mhz */
	  /* LTDC clock frequency = PLLLCDCLK / RCC_PLLSAIDivR = 64/8 = 8 Mhz */
	  RCC_PLLSAIConfig(192, 7, 3);
 8001e5e:	2203      	movs	r2, #3
 8001e60:	2107      	movs	r1, #7
 8001e62:	20c0      	movs	r0, #192	; 0xc0
 8001e64:	f7fe ff48 	bl	8000cf8 <RCC_PLLSAIConfig>
	  RCC_LTDCCLKDivConfig(RCC_PLLSAIDivR_Div8);
 8001e68:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001e6c:	f7ff f816 	bl	8000e9c <RCC_LTDCCLKDivConfig>

	  /* Enable PLLSAI Clock */
	  RCC_PLLSAICmd(ENABLE);
 8001e70:	2001      	movs	r0, #1
 8001e72:	f7fe ff5b 	bl	8000d2c <RCC_PLLSAICmd>
	  /* Wait for PLLSAI activation */
	  while(RCC_GetFlagStatus(RCC_FLAG_PLLSAIRDY) == RESET)
 8001e76:	bf00      	nop
 8001e78:	203d      	movs	r0, #61	; 0x3d
 8001e7a:	f7ff f8ad 	bl	8000fd8 <RCC_GetFlagStatus>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d0f9      	beq.n	8001e78 <LCD_Config+0x78>
	  }

	  /* LTDC Initialization -----------------------------------------------------*/

	  /* Initialize the horizontal synchronization polarity as active low*/
	  LTDC_InitStruct.LTDC_HSPolarity = LTDC_HSPolarity_AL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	64fb      	str	r3, [r7, #76]	; 0x4c
	  /* Initialize the vertical synchronization polarity as active low */
	  LTDC_InitStruct.LTDC_VSPolarity = LTDC_VSPolarity_AL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	653b      	str	r3, [r7, #80]	; 0x50
	  /* Initialize the data enable polarity as active low */
	  LTDC_InitStruct.LTDC_DEPolarity = LTDC_DEPolarity_AL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	657b      	str	r3, [r7, #84]	; 0x54
	  /* Initialize the pixel clock polarity as input pixel clock */
	  LTDC_InitStruct.LTDC_PCPolarity = LTDC_PCPolarity_IPC;
 8001e90:	2300      	movs	r3, #0
 8001e92:	65bb      	str	r3, [r7, #88]	; 0x58

	  /* Timing configuration */
	  /* Configure horizontal synchronization width */
	  LTDC_InitStruct.LTDC_HorizontalSync = 9;
 8001e94:	2309      	movs	r3, #9
 8001e96:	65fb      	str	r3, [r7, #92]	; 0x5c
	  /* Configure vertical synchronization height */
	  LTDC_InitStruct.LTDC_VerticalSync = 1;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	663b      	str	r3, [r7, #96]	; 0x60
	  /* Configure accumulated horizontal back porch */
	  LTDC_InitStruct.LTDC_AccumulatedHBP = 29;
 8001e9c:	231d      	movs	r3, #29
 8001e9e:	667b      	str	r3, [r7, #100]	; 0x64
	  /* Configure accumulated vertical back porch */
	  LTDC_InitStruct.LTDC_AccumulatedVBP = 3;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	66bb      	str	r3, [r7, #104]	; 0x68
	  /* Configure accumulated active width */
	  LTDC_InitStruct.LTDC_AccumulatedActiveW = 269;
 8001ea4:	f240 130d 	movw	r3, #269	; 0x10d
 8001ea8:	66fb      	str	r3, [r7, #108]	; 0x6c
	  /* Configure accumulated active height */
	  LTDC_InitStruct.LTDC_AccumulatedActiveH = 323;
 8001eaa:	f240 1343 	movw	r3, #323	; 0x143
 8001eae:	673b      	str	r3, [r7, #112]	; 0x70
	  /* Configure total width */
	  LTDC_InitStruct.LTDC_TotalWidth = 279;
 8001eb0:	f240 1317 	movw	r3, #279	; 0x117
 8001eb4:	677b      	str	r3, [r7, #116]	; 0x74
	  /* Configure total height */
	  LTDC_InitStruct.LTDC_TotalHeigh = 327;
 8001eb6:	f240 1347 	movw	r3, #327	; 0x147
 8001eba:	67bb      	str	r3, [r7, #120]	; 0x78

	  LTDC_Init(&LTDC_InitStruct);
 8001ebc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7fe fd0f 	bl	80008e4 <LTDC_Init>

	  /* Configure R,G,B component values for LCD background color */
	  LTDC_InitStruct.LTDC_BackgroundRedValue = 0;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	67fb      	str	r3, [r7, #124]	; 0x7c
	  LTDC_InitStruct.LTDC_BackgroundGreenValue = 0;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	  LTDC_InitStruct.LTDC_BackgroundBlueValue = 0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	  //LCD_SetColors (0x0000, 0x4db4);

	  LTDC_Init(&LTDC_InitStruct);
 8001ed6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7fe fd02 	bl	80008e4 <LTDC_Init>
	  Horizontal start = horizontal synchronization + Horizontal back porch = 30
	  Horizontal stop = Horizontal start + window width -1 = 30 + 240 -1
	  Vertical start   = vertical synchronization + vertical back porch     = 4
	  Vertical stop   = Vertical start + window height -1  = 4 + 160 -1      */

	  LTDC_Layer_InitStruct.LTDC_HorizontalStart = 30;
 8001ee0:	231e      	movs	r3, #30
 8001ee2:	60fb      	str	r3, [r7, #12]
	  LTDC_Layer_InitStruct.LTDC_HorizontalStop = (240 + 30 - 1);
 8001ee4:	f240 130d 	movw	r3, #269	; 0x10d
 8001ee8:	613b      	str	r3, [r7, #16]
	  LTDC_Layer_InitStruct.LTDC_VerticalStart = 4;
 8001eea:	2304      	movs	r3, #4
 8001eec:	617b      	str	r3, [r7, #20]
	  LTDC_Layer_InitStruct.LTDC_VerticalStop = 240 + 4 -1;
 8001eee:	23f3      	movs	r3, #243	; 0xf3
 8001ef0:	61bb      	str	r3, [r7, #24]

	  /* Pixel Format configuration*/
	  LTDC_Layer_InitStruct.LTDC_PixelFormat = LTDC_Pixelformat_RGB565;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	61fb      	str	r3, [r7, #28]

	  /* Alpha constant (255 totally opaque) */
	  LTDC_Layer_InitStruct.LTDC_ConstantAlpha = 255;
 8001ef6:	23ff      	movs	r3, #255	; 0xff
 8001ef8:	623b      	str	r3, [r7, #32]

	  /* Configure blending factors */
	  LTDC_Layer_InitStruct.LTDC_BlendingFactor_1 = LTDC_BlendingFactor1_PAxCA;
 8001efa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001efe:	637b      	str	r3, [r7, #52]	; 0x34
	  LTDC_Layer_InitStruct.LTDC_BlendingFactor_2 = LTDC_BlendingFactor2_PAxCA;
 8001f00:	2307      	movs	r3, #7
 8001f02:	63bb      	str	r3, [r7, #56]	; 0x38

	  /* Default Color configuration (configure A,R,G,B component values) */
	  LTDC_Layer_InitStruct.LTDC_DefaultColorBlue = 0;
 8001f04:	2300      	movs	r3, #0
 8001f06:	627b      	str	r3, [r7, #36]	; 0x24
	  LTDC_Layer_InitStruct.LTDC_DefaultColorGreen = 0;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	62bb      	str	r3, [r7, #40]	; 0x28
	  LTDC_Layer_InitStruct.LTDC_DefaultColorRed = 0;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
	  LTDC_Layer_InitStruct.LTDC_DefaultColorAlpha = 0;
 8001f10:	2300      	movs	r3, #0
 8001f12:	633b      	str	r3, [r7, #48]	; 0x30

	  /* Input Address configuration */
	  //char arrayA[100];
	  //LTDC_Layer_InitStruct.LTDC_CFBStartAdress = (uint32_t)&ST_LOGO_1;
	  LTDC_Layer_InitStruct.LTDC_CFBStartAdress = (uint32_t)&image_data_my;
 8001f14:	4b0f      	ldr	r3, [pc, #60]	; (8001f54 <LCD_Config+0x154>)
 8001f16:	63fb      	str	r3, [r7, #60]	; 0x3c
	  /* the length of one line of pixels in bytes + 3 then :
	  Line Lenth = Active high width x number of bytes per pixel + 3
	  Active high width         = 240
	  number of bytes per pixel = 2    (pixel_format : RGB565)
	  */
	  LTDC_Layer_InitStruct.LTDC_CFBLineLength = ((240 * 2) + 3);
 8001f18:	f240 13e3 	movw	r3, #483	; 0x1e3
 8001f1c:	643b      	str	r3, [r7, #64]	; 0x40

	  /*  the pitch is the increment from the start of one line of pixels to the
	  start of the next line in bytes, then :
	  Pitch = Active high width x number of bytes per pixel
	  */
	  LTDC_Layer_InitStruct.LTDC_CFBPitch = (240 * 2);
 8001f1e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001f22:	647b      	str	r3, [r7, #68]	; 0x44

	  /* configure the number of lines */
	  LTDC_Layer_InitStruct.LTDC_CFBLineNumber = 240;
 8001f24:	23f0      	movs	r3, #240	; 0xf0
 8001f26:	64bb      	str	r3, [r7, #72]	; 0x48

	  LTDC_LayerInit(LTDC_Layer1, &LTDC_Layer_InitStruct);
 8001f28:	f107 030c 	add.w	r3, r7, #12
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	480a      	ldr	r0, [pc, #40]	; (8001f58 <LCD_Config+0x158>)
 8001f30:	f7fe fdbc 	bl	8000aac <LTDC_LayerInit>

	  /* Layer1 Configuration end ------------------------------------------------*/
	  LTDC_DitherCmd(ENABLE);
 8001f34:	2001      	movs	r0, #1
 8001f36:	f7fe fd8b 	bl	8000a50 <LTDC_DitherCmd>

	  LCD_Clear(0);
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	f7ff fb64 	bl	8001608 <LCD_Clear>
	  delay(100);
 8001f40:	2064      	movs	r0, #100	; 0x64
 8001f42:	f000 f8c1 	bl	80020c8 <delay>


}
 8001f46:	bf00      	nop
 8001f48:	3788      	adds	r7, #136	; 0x88
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40020c00 	.word	0x40020c00
 8001f54:	08002384 	.word	0x08002384
 8001f58:	40016884 	.word	0x40016884

08001f5c <LCD_AF_GPIOConfig>:

static void LCD_AF_GPIOConfig(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable GPIOI, GPIOJ, GPIOG, GPIOF, GPIOH AHB Clocks */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB | \
 8001f62:	2101      	movs	r1, #1
 8001f64:	206f      	movs	r0, #111	; 0x6f
 8001f66:	f7fe ffb7 	bl	8000ed8 <RCC_AHB1PeriphClockCmd>
  -----------------------------------------------------

  */

  /* GPIOA configuration */
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_LTDC);
 8001f6a:	220e      	movs	r2, #14
 8001f6c:	2103      	movs	r1, #3
 8001f6e:	4850      	ldr	r0, [pc, #320]	; (80020b0 <LCD_AF_GPIOConfig+0x154>)
 8001f70:	f7fe fc1c 	bl	80007ac <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource4, GPIO_AF_LTDC);
 8001f74:	220e      	movs	r2, #14
 8001f76:	2104      	movs	r1, #4
 8001f78:	484d      	ldr	r0, [pc, #308]	; (80020b0 <LCD_AF_GPIOConfig+0x154>)
 8001f7a:	f7fe fc17 	bl	80007ac <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_LTDC);
 8001f7e:	220e      	movs	r2, #14
 8001f80:	2106      	movs	r1, #6
 8001f82:	484b      	ldr	r0, [pc, #300]	; (80020b0 <LCD_AF_GPIOConfig+0x154>)
 8001f84:	f7fe fc12 	bl	80007ac <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource11, GPIO_AF_LTDC);
 8001f88:	220e      	movs	r2, #14
 8001f8a:	210b      	movs	r1, #11
 8001f8c:	4848      	ldr	r0, [pc, #288]	; (80020b0 <LCD_AF_GPIOConfig+0x154>)
 8001f8e:	f7fe fc0d 	bl	80007ac <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource12, GPIO_AF_LTDC);
 8001f92:	220e      	movs	r2, #14
 8001f94:	210c      	movs	r1, #12
 8001f96:	4846      	ldr	r0, [pc, #280]	; (80020b0 <LCD_AF_GPIOConfig+0x154>)
 8001f98:	f7fe fc08 	bl	80007ac <GPIO_PinAFConfig>

  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_6 | \
 8001f9c:	f641 0358 	movw	r3, #6232	; 0x1858
 8001fa0:	603b      	str	r3, [r7, #0]
                             GPIO_Pin_11 | GPIO_Pin_12;
  GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	717b      	strb	r3, [r7, #5]
  GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	713b      	strb	r3, [r7, #4]
  GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8001faa:	2300      	movs	r3, #0
 8001fac:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb2:	463b      	mov	r3, r7
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	483e      	ldr	r0, [pc, #248]	; (80020b0 <LCD_AF_GPIOConfig+0x154>)
 8001fb8:	f7fe fb34 	bl	8000624 <GPIO_Init>

  /* GPIOB configuration */
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource0, GPIO_AF_LTDC);
 8001fbc:	220e      	movs	r2, #14
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	483c      	ldr	r0, [pc, #240]	; (80020b4 <LCD_AF_GPIOConfig+0x158>)
 8001fc2:	f7fe fbf3 	bl	80007ac <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource1, GPIO_AF_LTDC);
 8001fc6:	220e      	movs	r2, #14
 8001fc8:	2101      	movs	r1, #1
 8001fca:	483a      	ldr	r0, [pc, #232]	; (80020b4 <LCD_AF_GPIOConfig+0x158>)
 8001fcc:	f7fe fbee 	bl	80007ac <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_LTDC);
 8001fd0:	220e      	movs	r2, #14
 8001fd2:	2108      	movs	r1, #8
 8001fd4:	4837      	ldr	r0, [pc, #220]	; (80020b4 <LCD_AF_GPIOConfig+0x158>)
 8001fd6:	f7fe fbe9 	bl	80007ac <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_LTDC);
 8001fda:	220e      	movs	r2, #14
 8001fdc:	2109      	movs	r1, #9
 8001fde:	4835      	ldr	r0, [pc, #212]	; (80020b4 <LCD_AF_GPIOConfig+0x158>)
 8001fe0:	f7fe fbe4 	bl	80007ac <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_LTDC);
 8001fe4:	220e      	movs	r2, #14
 8001fe6:	210a      	movs	r1, #10
 8001fe8:	4832      	ldr	r0, [pc, #200]	; (80020b4 <LCD_AF_GPIOConfig+0x158>)
 8001fea:	f7fe fbdf 	bl	80007ac <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_LTDC);
 8001fee:	220e      	movs	r2, #14
 8001ff0:	210b      	movs	r1, #11
 8001ff2:	4830      	ldr	r0, [pc, #192]	; (80020b4 <LCD_AF_GPIOConfig+0x158>)
 8001ff4:	f7fe fbda 	bl	80007ac <GPIO_PinAFConfig>

  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_8 | \
 8001ff8:	f640 7303 	movw	r3, #3843	; 0xf03
 8001ffc:	603b      	str	r3, [r7, #0]
                             GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11;

  GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ffe:	463b      	mov	r3, r7
 8002000:	4619      	mov	r1, r3
 8002002:	482c      	ldr	r0, [pc, #176]	; (80020b4 <LCD_AF_GPIOConfig+0x158>)
 8002004:	f7fe fb0e 	bl	8000624 <GPIO_Init>

  /* GPIOC configuration */
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource6, GPIO_AF_LTDC);
 8002008:	220e      	movs	r2, #14
 800200a:	2106      	movs	r1, #6
 800200c:	482a      	ldr	r0, [pc, #168]	; (80020b8 <LCD_AF_GPIOConfig+0x15c>)
 800200e:	f7fe fbcd 	bl	80007ac <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource7, GPIO_AF_LTDC);
 8002012:	220e      	movs	r2, #14
 8002014:	2107      	movs	r1, #7
 8002016:	4828      	ldr	r0, [pc, #160]	; (80020b8 <LCD_AF_GPIOConfig+0x15c>)
 8002018:	f7fe fbc8 	bl	80007ac <GPIO_PinAFConfig>
  //  GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_LTDC);

  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;// | GPIO_Pin_10;
 800201c:	23c0      	movs	r3, #192	; 0xc0
 800201e:	603b      	str	r3, [r7, #0]

  GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002020:	463b      	mov	r3, r7
 8002022:	4619      	mov	r1, r3
 8002024:	4824      	ldr	r0, [pc, #144]	; (80020b8 <LCD_AF_GPIOConfig+0x15c>)
 8002026:	f7fe fafd 	bl	8000624 <GPIO_Init>

  /* GPIOD configuration */
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource3, GPIO_AF_LTDC);
 800202a:	220e      	movs	r2, #14
 800202c:	2103      	movs	r1, #3
 800202e:	4823      	ldr	r0, [pc, #140]	; (80020bc <LCD_AF_GPIOConfig+0x160>)
 8002030:	f7fe fbbc 	bl	80007ac <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource6, GPIO_AF_LTDC);
 8002034:	220e      	movs	r2, #14
 8002036:	2106      	movs	r1, #6
 8002038:	4820      	ldr	r0, [pc, #128]	; (80020bc <LCD_AF_GPIOConfig+0x160>)
 800203a:	f7fe fbb7 	bl	80007ac <GPIO_PinAFConfig>

  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_3 | GPIO_Pin_6;
 800203e:	2348      	movs	r3, #72	; 0x48
 8002040:	603b      	str	r3, [r7, #0]

  GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002042:	463b      	mov	r3, r7
 8002044:	4619      	mov	r1, r3
 8002046:	481d      	ldr	r0, [pc, #116]	; (80020bc <LCD_AF_GPIOConfig+0x160>)
 8002048:	f7fe faec 	bl	8000624 <GPIO_Init>

  /* GPIOF configuration */
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource10, GPIO_AF_LTDC);
 800204c:	220e      	movs	r2, #14
 800204e:	210a      	movs	r1, #10
 8002050:	481b      	ldr	r0, [pc, #108]	; (80020c0 <LCD_AF_GPIOConfig+0x164>)
 8002052:	f7fe fbab 	bl	80007ac <GPIO_PinAFConfig>

  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_10;
 8002056:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800205a:	603b      	str	r3, [r7, #0]

  GPIO_Init(GPIOF, &GPIO_InitStruct);
 800205c:	463b      	mov	r3, r7
 800205e:	4619      	mov	r1, r3
 8002060:	4817      	ldr	r0, [pc, #92]	; (80020c0 <LCD_AF_GPIOConfig+0x164>)
 8002062:	f7fe fadf 	bl	8000624 <GPIO_Init>

  /* GPIOG configuration */
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource6, GPIO_AF_LTDC);
 8002066:	220e      	movs	r2, #14
 8002068:	2106      	movs	r1, #6
 800206a:	4816      	ldr	r0, [pc, #88]	; (80020c4 <LCD_AF_GPIOConfig+0x168>)
 800206c:	f7fe fb9e 	bl	80007ac <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource7, GPIO_AF_LTDC);
 8002070:	220e      	movs	r2, #14
 8002072:	2107      	movs	r1, #7
 8002074:	4813      	ldr	r0, [pc, #76]	; (80020c4 <LCD_AF_GPIOConfig+0x168>)
 8002076:	f7fe fb99 	bl	80007ac <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource10, GPIO_AF_LTDC);
 800207a:	220e      	movs	r2, #14
 800207c:	210a      	movs	r1, #10
 800207e:	4811      	ldr	r0, [pc, #68]	; (80020c4 <LCD_AF_GPIOConfig+0x168>)
 8002080:	f7fe fb94 	bl	80007ac <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource11, GPIO_AF_LTDC);
 8002084:	220e      	movs	r2, #14
 8002086:	210b      	movs	r1, #11
 8002088:	480e      	ldr	r0, [pc, #56]	; (80020c4 <LCD_AF_GPIOConfig+0x168>)
 800208a:	f7fe fb8f 	bl	80007ac <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource12, GPIO_AF_LTDC);
 800208e:	220e      	movs	r2, #14
 8002090:	210c      	movs	r1, #12
 8002092:	480c      	ldr	r0, [pc, #48]	; (80020c4 <LCD_AF_GPIOConfig+0x168>)
 8002094:	f7fe fb8a 	bl	80007ac <GPIO_PinAFConfig>

  GPIO_InitStruct.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_10 | \
 8002098:	f44f 53e6 	mov.w	r3, #7360	; 0x1cc0
 800209c:	603b      	str	r3, [r7, #0]
                             GPIO_Pin_11 | GPIO_Pin_12;

  GPIO_Init(GPIOG, &GPIO_InitStruct);
 800209e:	463b      	mov	r3, r7
 80020a0:	4619      	mov	r1, r3
 80020a2:	4808      	ldr	r0, [pc, #32]	; (80020c4 <LCD_AF_GPIOConfig+0x168>)
 80020a4:	f7fe fabe 	bl	8000624 <GPIO_Init>
}
 80020a8:	bf00      	nop
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40020000 	.word	0x40020000
 80020b4:	40020400 	.word	0x40020400
 80020b8:	40020800 	.word	0x40020800
 80020bc:	40020c00 	.word	0x40020c00
 80020c0:	40021400 	.word	0x40021400
 80020c4:	40021800 	.word	0x40021800

080020c8 <delay>:


static void delay(__IO uint32_t nCount)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t index = 0;
 80020d0:	2300      	movs	r3, #0
 80020d2:	60fb      	str	r3, [r7, #12]
  for(index = 100000*nCount; index != 0; index--)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a08      	ldr	r2, [pc, #32]	; (80020f8 <delay+0x30>)
 80020d8:	fb02 f303 	mul.w	r3, r2, r3
 80020dc:	60fb      	str	r3, [r7, #12]
 80020de:	e002      	b.n	80020e6 <delay+0x1e>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	3b01      	subs	r3, #1
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d1f9      	bne.n	80020e0 <delay+0x18>
  {
  }
}
 80020ec:	bf00      	nop
 80020ee:	3714      	adds	r7, #20
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	000186a0 	.word	0x000186a0

080020fc <sEE_TIMEOUT_UserCallback>:
/*
 * Callback used by stm324xg_eval_i2c_ee.c.
 * Refer to stm324xg_eval_i2c_ee.h for more info.
 */
uint32_t sEE_TIMEOUT_UserCallback(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  while (1)
 8002100:	e7fe      	b.n	8002100 <sEE_TIMEOUT_UserCallback+0x4>
	...

08002104 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002104:	f8df d034 	ldr.w	sp, [pc, #52]	; 800213c <LoopFillZerobss+0x14>
  
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002108:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800210a:	e003      	b.n	8002114 <LoopCopyDataInit>

0800210c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800210c:	4b0c      	ldr	r3, [pc, #48]	; (8002140 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800210e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002110:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002112:	3104      	adds	r1, #4

08002114 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002114:	480b      	ldr	r0, [pc, #44]	; (8002144 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002116:	4b0c      	ldr	r3, [pc, #48]	; (8002148 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002118:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800211a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800211c:	d3f6      	bcc.n	800210c <CopyDataInit>
  ldr  r2, =_sbss
 800211e:	4a0b      	ldr	r2, [pc, #44]	; (800214c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002120:	e002      	b.n	8002128 <LoopFillZerobss>

08002122 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002122:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002124:	f842 3b04 	str.w	r3, [r2], #4

08002128 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002128:	4b09      	ldr	r3, [pc, #36]	; (8002150 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800212a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800212c:	d3f9      	bcc.n	8002122 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800212e:	f000 f841 	bl	80021b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002132:	f000 f8f1 	bl	8002318 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002136:	f7ff fd89 	bl	8001c4c <main>
  bx  lr    
 800213a:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800213c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002140:	0801e58c 	.word	0x0801e58c
  ldr  r0, =_sdata
 8002144:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002148:	20000024 	.word	0x20000024
  ldr  r2, =_sbss
 800214c:	20000024 	.word	0x20000024
  ldr  r3, = _ebss
 8002150:	20000054 	.word	0x20000054

08002154 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002154:	e7fe      	b.n	8002154 <ADC_IRQHandler>

08002156 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8002156:	b480      	push	{r7}
 8002158:	af00      	add	r7, sp, #0
}
 800215a:	bf00      	nop
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8002168:	e7fe      	b.n	8002168 <HardFault_Handler+0x4>

0800216a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800216a:	b480      	push	{r7}
 800216c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800216e:	e7fe      	b.n	800216e <MemManage_Handler+0x4>

08002170 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8002174:	e7fe      	b.n	8002174 <BusFault_Handler+0x4>

08002176 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002176:	b480      	push	{r7}
 8002178:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800217a:	e7fe      	b.n	800217a <UsageFault_Handler+0x4>

0800217c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
}
 8002180:	bf00      	nop
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr

0800218a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800218a:	b480      	push	{r7}
 800218c:	af00      	add	r7, sp, #0
}
 800218e:	bf00      	nop
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
}
 800219c:	bf00      	nop
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80021a6:	b480      	push	{r7}
 80021a8:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 80021aa:	bf00      	nop
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021b8:	4a16      	ldr	r2, [pc, #88]	; (8002214 <SystemInit+0x60>)
 80021ba:	4b16      	ldr	r3, [pc, #88]	; (8002214 <SystemInit+0x60>)
 80021bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80021c8:	4a13      	ldr	r2, [pc, #76]	; (8002218 <SystemInit+0x64>)
 80021ca:	4b13      	ldr	r3, [pc, #76]	; (8002218 <SystemInit+0x64>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f043 0301 	orr.w	r3, r3, #1
 80021d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80021d4:	4b10      	ldr	r3, [pc, #64]	; (8002218 <SystemInit+0x64>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80021da:	4a0f      	ldr	r2, [pc, #60]	; (8002218 <SystemInit+0x64>)
 80021dc:	4b0e      	ldr	r3, [pc, #56]	; (8002218 <SystemInit+0x64>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80021e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021e8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80021ea:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <SystemInit+0x64>)
 80021ec:	4a0b      	ldr	r2, [pc, #44]	; (800221c <SystemInit+0x68>)
 80021ee:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80021f0:	4a09      	ldr	r2, [pc, #36]	; (8002218 <SystemInit+0x64>)
 80021f2:	4b09      	ldr	r3, [pc, #36]	; (8002218 <SystemInit+0x64>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021fa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80021fc:	4b06      	ldr	r3, [pc, #24]	; (8002218 <SystemInit+0x64>)
 80021fe:	2200      	movs	r2, #0
 8002200:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8002202:	f000 f80d 	bl	8002220 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002206:	4b03      	ldr	r3, [pc, #12]	; (8002214 <SystemInit+0x60>)
 8002208:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800220c:	609a      	str	r2, [r3, #8]
#endif
}
 800220e:	bf00      	nop
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	e000ed00 	.word	0xe000ed00
 8002218:	40023800 	.word	0x40023800
 800221c:	24003010 	.word	0x24003010

08002220 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8002226:	2300      	movs	r3, #0
 8002228:	607b      	str	r3, [r7, #4]
 800222a:	2300      	movs	r3, #0
 800222c:	603b      	str	r3, [r7, #0]
                   (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

#else /* PLL_SOURCE_HSE_BYPASS or PLL_SOURCE_HSE */

  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800222e:	4a36      	ldr	r2, [pc, #216]	; (8002308 <SetSysClock+0xe8>)
 8002230:	4b35      	ldr	r3, [pc, #212]	; (8002308 <SetSysClock+0xe8>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002238:	6013      	str	r3, [r2, #0]
  RCC->CR |= ((uint32_t)RCC_CR_HSEBYP);
#endif   /* PLL_SOURCE_HSE_BYPASS */
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800223a:	4b33      	ldr	r3, [pc, #204]	; (8002308 <SetSysClock+0xe8>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002242:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3301      	adds	r3, #1
 8002248:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d103      	bne.n	8002258 <SetSysClock+0x38>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002256:	d1f0      	bne.n	800223a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002258:	4b2b      	ldr	r3, [pc, #172]	; (8002308 <SetSysClock+0xe8>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d002      	beq.n	800226a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8002264:	2301      	movs	r3, #1
 8002266:	603b      	str	r3, [r7, #0]
 8002268:	e001      	b.n	800226e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800226a:	2300      	movs	r3, #0
 800226c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d102      	bne.n	800227a <SetSysClock+0x5a>
  {
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8002274:	4b24      	ldr	r3, [pc, #144]	; (8002308 <SetSysClock+0xe8>)
 8002276:	4a25      	ldr	r2, [pc, #148]	; (800230c <SetSysClock+0xec>)
 8002278:	605a      	str	r2, [r3, #4]
         configuration. User can add here some code to deal with this error */
  }
#endif /*PLL_SOURCE_HSI*/
  
      /* Select regulator voltage output Scale 1 mode, System frequency up to 180 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800227a:	4a23      	ldr	r2, [pc, #140]	; (8002308 <SetSysClock+0xe8>)
 800227c:	4b22      	ldr	r3, [pc, #136]	; (8002308 <SetSysClock+0xe8>)
 800227e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002284:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8002286:	4a22      	ldr	r2, [pc, #136]	; (8002310 <SetSysClock+0xf0>)
 8002288:	4b21      	ldr	r3, [pc, #132]	; (8002310 <SetSysClock+0xf0>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002290:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8002292:	4a1d      	ldr	r2, [pc, #116]	; (8002308 <SetSysClock+0xe8>)
 8002294:	4b1c      	ldr	r3, [pc, #112]	; (8002308 <SetSysClock+0xe8>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800229a:	4a1b      	ldr	r2, [pc, #108]	; (8002308 <SetSysClock+0xe8>)
 800229c:	4b1a      	ldr	r3, [pc, #104]	; (8002308 <SetSysClock+0xe8>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022a4:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80022a6:	4a18      	ldr	r2, [pc, #96]	; (8002308 <SetSysClock+0xe8>)
 80022a8:	4b17      	ldr	r3, [pc, #92]	; (8002308 <SetSysClock+0xe8>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80022b0:	6093      	str	r3, [r2, #8]

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80022b2:	4a15      	ldr	r2, [pc, #84]	; (8002308 <SetSysClock+0xe8>)
 80022b4:	4b14      	ldr	r3, [pc, #80]	; (8002308 <SetSysClock+0xe8>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022bc:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80022be:	bf00      	nop
 80022c0:	4b11      	ldr	r3, [pc, #68]	; (8002308 <SetSysClock+0xe8>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d0f9      	beq.n	80022c0 <SetSysClock+0xa0>
    {
    }

    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80022cc:	4b11      	ldr	r3, [pc, #68]	; (8002314 <SetSysClock+0xf4>)
 80022ce:	f240 7205 	movw	r2, #1797	; 0x705
 80022d2:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80022d4:	4a0c      	ldr	r2, [pc, #48]	; (8002308 <SetSysClock+0xe8>)
 80022d6:	4b0c      	ldr	r3, [pc, #48]	; (8002308 <SetSysClock+0xe8>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f023 0303 	bic.w	r3, r3, #3
 80022de:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80022e0:	4a09      	ldr	r2, [pc, #36]	; (8002308 <SetSysClock+0xe8>)
 80022e2:	4b09      	ldr	r3, [pc, #36]	; (8002308 <SetSysClock+0xe8>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f043 0302 	orr.w	r3, r3, #2
 80022ea:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80022ec:	bf00      	nop
 80022ee:	4b06      	ldr	r3, [pc, #24]	; (8002308 <SetSysClock+0xe8>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 030c 	and.w	r3, r3, #12
 80022f6:	2b08      	cmp	r3, #8
 80022f8:	d1f9      	bne.n	80022ee <SetSysClock+0xce>
    {
    }
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	40023800 	.word	0x40023800
 800230c:	07405a08 	.word	0x07405a08
 8002310:	40007000 	.word	0x40007000
 8002314:	40023c00 	.word	0x40023c00

08002318 <__libc_init_array>:
 8002318:	b570      	push	{r4, r5, r6, lr}
 800231a:	4e0d      	ldr	r6, [pc, #52]	; (8002350 <__libc_init_array+0x38>)
 800231c:	4c0d      	ldr	r4, [pc, #52]	; (8002354 <__libc_init_array+0x3c>)
 800231e:	1ba4      	subs	r4, r4, r6
 8002320:	10a4      	asrs	r4, r4, #2
 8002322:	2500      	movs	r5, #0
 8002324:	42a5      	cmp	r5, r4
 8002326:	d109      	bne.n	800233c <__libc_init_array+0x24>
 8002328:	4e0b      	ldr	r6, [pc, #44]	; (8002358 <__libc_init_array+0x40>)
 800232a:	4c0c      	ldr	r4, [pc, #48]	; (800235c <__libc_init_array+0x44>)
 800232c:	f000 f818 	bl	8002360 <_init>
 8002330:	1ba4      	subs	r4, r4, r6
 8002332:	10a4      	asrs	r4, r4, #2
 8002334:	2500      	movs	r5, #0
 8002336:	42a5      	cmp	r5, r4
 8002338:	d105      	bne.n	8002346 <__libc_init_array+0x2e>
 800233a:	bd70      	pop	{r4, r5, r6, pc}
 800233c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002340:	4798      	blx	r3
 8002342:	3501      	adds	r5, #1
 8002344:	e7ee      	b.n	8002324 <__libc_init_array+0xc>
 8002346:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800234a:	4798      	blx	r3
 800234c:	3501      	adds	r5, #1
 800234e:	e7f2      	b.n	8002336 <__libc_init_array+0x1e>
 8002350:	0801e584 	.word	0x0801e584
 8002354:	0801e584 	.word	0x0801e584
 8002358:	0801e584 	.word	0x0801e584
 800235c:	0801e588 	.word	0x0801e588

08002360 <_init>:
 8002360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002362:	bf00      	nop
 8002364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002366:	bc08      	pop	{r3}
 8002368:	469e      	mov	lr, r3
 800236a:	4770      	bx	lr

0800236c <_fini>:
 800236c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800236e:	bf00      	nop
 8002370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002372:	bc08      	pop	{r3}
 8002374:	469e      	mov	lr, r3
 8002376:	4770      	bx	lr
